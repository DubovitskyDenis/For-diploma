probabilist
extens
concurr
constraint
factor
oracl
model
music
improvis
mauricio
toro
universidad
eafit
abstract
program
music
improvis
system
without
formal
semant
model
process
calculu
time
concurr
constraint
ntcc
calculu
concurr
constraint
factor
oracl
model
music
improvis
ccfomi
improvis
model
specifi
ntcc
sinc
ccfomi
improvis
control
choic
therefor
littl
control
sequenc
variat
improvis
avoid
extend
ccfomi
use
probabilist
time
concurr
constraint
calculu
extens
ccfomi
chang
time
space
complex
build
thu
make
extens
compat
howev
ntcc
interpret
capabl
execut
ccfomi
develop
ntccrt
capabl
interpret
execut
ccfomi
ntccrt
futur
plan
extend
ntccrt
execut
extens
ccfomi
keyword
factor
oracl
concurr
constraint
program
ccp
machin
learn
machin
improvis
ccfomi
gecod
ntcc
pntcc
introduct
two
differ
approach
develop
multimedia
interact
system
machin
improvis
one
may
think
order
implement
capabl
system
system
written
directli
effici
contrast
one
may
argu
multimedia
interact
system
written
directli
formal
reason
concurr
argu
system
model
use
process
calculu
formal
semant
verif
procedur
execut
model
time
capabl
interpret
definit
rest
document
garavel
explain
model
base
process
calculu
widespread
mani
calculu
mani
variant
calculu
difficult
choos
appropri
addit
difficult
express
explicit
notion
time
requir
process
calculu
final
argu
exist
tool
process
calculu
motiv
defend
calculu
approach
rueda
explain
use
semant
logic
underli
time
concurr
constraint
ntcc
calculu
possibl
prove
properti
ntcc
model
execut
execut
model
ntcc
interpret
defin
soft
time
multimedia
interact
mean
system
react
fast
enough
interact
human
player
without
let
notic
delay
one
may
disagre
rueda
argu
although
sever
interpret
ntcc
lman
rueda
interpret
gener
interpret
run
ntcc
model
agre
rueda
way
develop
system
also
argu
current
ntcc
interpret
capabl
argu
agreement
rueda
argument
model
base
ntcc
concurr
constraint
factor
oracl
model
music
improvis
ccfomi
good
altern
model
multimedia
interact
synchron
present
declar
mean
variabl
share
among
concurr
agent
reason
inform
contain
global
store
howev
due
determinist
choic
improvis
ccfomi
repetit
produc
loop
without
control
addit
sinc
ccfomi
chang
intens
learn
note
ccfomi
may
produc
sharp
differ
rel
loud
musician
play
improvis
play
process
calculu
appli
model
interact
music
system
ecolog
system
main
object
extend
ccfomi
model
probabilist
choic
music
sequenc
also
want
show
ntcc
model
interact
human
player
soft
use
ntcc
interpret
reason
develop
ntccrt
gener
interpret
ntcc
rest
introduct
organ
follow
first
section
give
definit
music
improvis
second
section
explain
machin
improvis
third
section
give
brief
introduct
ntcc
present
system
model
ntcc
explain
intuit
music
improvis
machin
improvis
ntcc
explain
solut
extend
ccfomi
section
fourth
section
fifth
section
explain
contribut
thesi
work
final
sixth
section
explain
organ
follow
chapter
music
improvis
music
improvis
spontan
creativ
process
make
music
perform
use
linguist
analog
improvis
like
speak
convers
oppos
recit
written
text
among
jazz
musician
adag
improvis
composit
speed
vice
versa
composit
improvis
slow
improvis
exist
almost
music
generel
howev
improvis
frequent
associ
melod
improvis
found
jazz
howev
spontan
variat
perform
tempo
dynam
within
classic
perform
may
also
consid
improvis
reader
may
see
exampl
music
improvis
musician
alberto
riasco
improvis
colombian
music
genr
explain
machin
improvis
machin
improvis
simul
music
improvis
comput
process
build
represent
music
either
explicit
code
rule
appli
machin
learn
method
machin
improvis
necessari
perform
two
phase
concurr
stylist
learn
stylist
guabina
colombian
tradit
music
common
region
antioquia
santand
boyacá
cundinamarca
tolima
huila
simul
addit
perform
phase
concurr
system
must
abl
interact
human
player
rueda
defin
stylist
learn
process
appli
method
music
sequenc
order
captur
import
music
featur
organ
featur
model
stylist
simul
process
produc
music
sequenc
stylist
consist
learn
style
exampl
system
run
concurr
phase
ccfomi
system
use
factor
oracl
store
inform
learn
sequenc
ntcc
calculu
synchron
phase
improvis
introduct
ntcc
ntcc
calculu
mathemat
formal
use
repres
reactiv
system
synchron
asynchron
behavior
formal
extens
use
model
system
music
improvis
system
audio
process
framework
interact
score
ntcc
use
multimedia
semant
interact
also
use
field
model
molecular
biolog
analyz
biolog
system
secur
protocol
field
also
includ
studi
complex
interact
want
observ
certain
properti
show
model
answer
system
model
molecular
biolog
secur
protocol
multimedia
semant
interact
use
process
calculu
base
project
robust
theori
emerg
applic
concurr
theori
novelti
approach
specif
synchron
declar
way
oppos
program
languag
programm
specifi
multipl
step
guarante
correct
synchron
safe
access
share
resourc
explan
ntcc
model
music
process
ntcc
present
chapter
solut
avoid
repetit
improvis
extend
ccfomi
probabilist
determinist
time
concurr
constraint
pntcc
calculu
decreas
probabl
choos
sequenc
previous
improvis
idea
base
probabilist
ccfomi
model
develop
pérez
rueda
model
choos
improvis
sequenc
probabilist
base
probabl
distribut
unfortun
probabilist
ccfomi
give
inform
probabl
distribut
built
chang
time
accord
user
comput
interact
model
first
pntcc
model
far
know
probabl
distribut
chang
anoth
instanc
consid
system
play
certain
moment
pitch
frecuenc
note
equal
probabl
output
sequenc
aaba
go
choos
anoth
pitch
choos
pitch
greater
probabl
chosen
greater
probabl
chosen
play
three
time
last
sequenc
use
probabilist
extens
avoid
multipl
cycl
improvis
happen
without
control
ccfomi
hand
coher
rel
loud
user
current
play
chang
intens
improvis
note
idea
base
interview
musician
riasco
juan
manuel
collazo
thesi
partial
fund
react
project
sponsor
colciencia
argu
techniqu
use
improvis
improv
qualiti
improvis
two
person
improvis
time
instanc
comput
play
five
note
intens
measur
user
play
time
four
note
intens
incoher
result
user
play
low
comput
play
loud
reason
system
multipli
intens
factor
relat
averag
sequenc
chang
intens
comput
output
contribut
gecol
first
approach
provid
interfac
gecod
common
lisp
extend
gecol
work
gecod
use
gecol
wrote
sever
prototyp
ntcc
interpret
exampl
sourc
binari
found
http
ntccrt
capabl
interpret
ntcc
use
ntccrt
execut
ccfomi
exampl
sourc
binari
found
http
articl
ntccrt
publish
year
gelisp
new
graphic
constraint
solv
librari
openmus
plan
use
futur
closer
integr
ntccrt
openmus
exampl
sourc
binari
found
http
articl
gelisp
publish
year
origin
version
gelisp
develop
rueda
common
lisp
technic
report
report
includ
implement
detail
ntccrt
graphic
interfac
gelisp
gecol
applic
ntccrt
previou
attempt
develop
ntcc
interpret
organ
structur
thesi
follow
chapter
explain
background
concept
chapter
focu
model
ccfomi
allow
probabilist
choic
music
sequenc
chapter
explain
modif
ccfomi
allow
variat
intens
learn
note
style
simul
phase
chapter
describ
model
pntcc
chapter
explain
design
implement
ntccrt
interpret
ntcc
chapter
show
result
test
made
interpret
final
chapter
present
summari
thesi
conclud
remark
propos
futur
work
background
concurr
constraint
program
ccp
concurr
constraint
program
ccp
model
concurr
system
ccp
concurr
system
model
term
constraint
system
variabl
term
agent
interact
partial
inform
obtain
variabl
constraint
formula
repres
partial
inform
valu
system
variabl
program
languag
base
ccp
model
provid
propag
constraint
propag
seen
oper
reduc
set
possibl
valu
variabl
instanc
system
variabl
take
music
instrument
digit
interfac
midi
valu
constraint
specifi
possibl
valu
least
one
tone
higher
midi
notat
midi
pitch
unit
repres
ccp
model
includ
set
constraint
relat
know
constraint
deduc
other
name
entail
relat
relat
give
way
deduc
constraint
inform
suppli
constraint
idea
ccp
model
accumul
inform
store
inform
store
increas
decreas
concurr
process
interact
store
either
ad
inform
ask
constraint
deduc
current
store
constraint
deduc
process
block
enough
inform
deduc
constraint
consid
instanc
four
agent
interact
concurr
fig
process
tell
tell
add
new
inform
store
process
ask
ask
launch
process
process
respect
condit
entail
store
execut
tell
process
process
ask
launch
process
process
ask
suspend
condit
entail
store
figur
process
interact
ccp
formal
ccp
model
base
idea
constraint
system
var
countabl
set
primit
constraint
system
structur
constraint
token
infer
relat
logic
entail
relat
token
token
var
infinit
set
variabl
non
primit
constraint
compos
primit
constraint
formal
definit
ccp
specifi
type
constraint
use
thu
constraint
system
adapt
particular
need
depend
set
instanc
finit
domain
constraint
system
provid
primit
constraint
also
call
basic
constraint
set
rang
integ
hand
finit
set
constraint
system
provid
primit
constraint
set
variabl
variabl
constraint
system
may
also
includ
express
tree
graph
set
valencia
rueda
argu
ccp
model
poss
difficulti
model
reactiv
system
inform
given
variabl
chang
depend
interact
system
environ
problem
aris
inform
ad
store
delet
chang
time
concurr
constraint
ntcc
ntcc
introduc
notion
discret
time
sequenc
unit
start
store
possibl
empti
suppli
environ
ntcc
execut
process
schedul
contrast
ccp
ntcc
variabl
chang
valu
along
time
model
ntcc
variabl
take
differ
valu
along
model
ccp
would
creat
new
variabl
time
chang
valu
follow
give
exampl
comput
agent
ntcc
use
oper
semant
ntcc
agent
found
appendix
summari
found
tabl
use
tell
agent
constraint
system
possibl
add
constraint
mean
must
equal
mean
integ
agent
use
describ
system
react
differ
event
instanc
tell
process
react
soon
pitch
sequenc
repres
midi
notat
play
ad
constraint
store
current
agent
tell
local
next
unless
next
mean
add
constraint
current
store
hold
run
run
local
variabl
parallel
composit
run
next
unless
infer
run
non
determinist
choos
hold
delay
indefinit
forev
execut
tabl
ntcc
agent
parallel
composit
allow
repres
concurr
process
instanc
tell
tell
process
tell
store
concurr
react
octav
assign
instrument
fig
number
one
repres
acoust
piano
midi
notat
next
agent
use
want
model
variabl
chang
time
instanc
next
tell
mean
equal
current
differ
next
figur
tell
parallel
agent
ntcc
unless
agent
use
model
system
react
condit
satisfi
deduc
store
instanc
unless
next
tell
lastpitch
react
fals
deduc
store
play
current
tell
store
next
lastpitch
fig
figur
unless
agent
ntcc
agent
may
use
music
delay
end
music
process
indefinit
forev
know
process
execut
know
instanc
agent
execut
certain
process
everi
execut
instanc
tell
agent
use
model
choic
instanc
true
tell
model
system
note
chosen
major
chord
repres
midi
number
play
fig
agent
present
tabl
deriv
basic
oper
agent
choos
execut
either
persist
assign
process
chang
valu
current
valu
follow
similar
way
agent
tabl
use
model
cell
cell
variabl
valu
term
previou
valu
creat
new
cell
initi
valu
chang
valu
cell
differ
chang
valu
exchang
valu
cell
true
tell
express
tell
tell
tell
figur
execut
process
ntcc
agent
mean
true
local
next
tell
tabl
deriv
ntcc
agent
agent
mean
tell
unless
chang
next
local
tell
chang
next
local
tell
chang
tell
chang
next
tabl
definit
cell
final
basic
recurs
defin
ntcc
form
process
name
restrict
call
call
must
within
scope
next
reason
use
next
want
infinit
recurs
within
recurs
use
model
iter
recurs
definit
instanc
use
basic
recurs
possibl
write
function
comput
factori
function
inform
recurs
ntcc
found
gener
constraint
develop
environ
gecod
gecod
constraint
solv
librari
written
gecod
base
constraint
propag
agent
cpa
accord
cpa
system
provid
multipl
propag
transform
constraint
primit
constraint
suppli
inform
finit
domain
constraint
system
primit
constraint
form
instanc
store
contain
propag
would
add
constraint
reader
may
notic
similar
cpa
ntcc
base
concurr
agent
work
constraint
store
chapter
explain
encod
ntcc
agent
propag
gecod
work
differ
oper
system
current
use
constraint
librari
alic
soon
use
therefor
maintain
long
time
furthermor
provid
extens
api
allow
creat
new
propag
final
conjectur
gecod
perform
better
constraint
solv
use
sicstu
prolog
base
gecod
factor
oracl
factor
oracl
finit
automaton
built
linear
time
space
increment
fashion
recogn
least
factor
given
sequenc
recogn
sequenc
factor
state
consid
accept
state
sequenc
symbol
learn
automaton
state
alway
transit
arrow
call
factor
link
state
state
transit
arrow
direct
backward
go
state
call
suffix
link
suffix
link
oppos
factor
link
label
instanc
automaton
present
figur
black
head
arrow
repres
factor
link
white
head
arrow
repres
suffix
link
benchmark
present
http
figur
automaton
built
author
prove
algorithm
linear
complex
time
space
new
enter
symbol
new
state
ad
arrow
creat
label
start
suffix
link
iter
follow
backward
state
reach
factor
link
label
go
state
suffix
link
follow
state
met
iter
new
factor
link
label
ad
state
final
suffix
link
ad
state
state
depend
condit
termin
iter
formal
definit
proof
complex
found
construct
algorithm
present
detail
appendix
sinc
linear
complex
time
space
found
appropri
machin
improvis
addit
attribut
valu
music
event
kept
object
attach
correspond
node
sinc
actual
inform
structur
given
configur
arrow
factor
suffix
link
therefor
tupl
pitch
frecuenc
note
durat
amount
time
note
play
intens
volum
note
play
relat
arrow
accord
concurr
constraint
factor
oracl
model
music
improvis
concurr
constraint
factor
oracl
model
music
improvis
ccfomi
defin
follow
present
briefli
explan
model
taken
ccfomi
three
kind
variabl
repres
partial
built
automaton
variabl
set
label
current
exist
factor
link
go
forward
variabl
suffix
link
state
variabl
give
state
reach
follow
factor
link
label
instanc
figur
repres
although
state
explicitli
ccfomi
variabl
model
infinit
ration
tree
unari
branch
allow
add
element
infinit
ration
tree
infinit
size
howev
contain
finit
number
distinct
reason
subject
multipl
axiomat
construct
constraint
system
base
instanc
post
constraint
con
nil
con
con
model
list
three
element
ccfomi
divid
three
subsystem
learn
add
improvis
choic
play
player
run
concurr
addit
synchron
process
sync
take
care
synchron
add
process
charg
build
process
model
learn
phase
creat
factor
link
suffix
link
note
process
add
call
loop
process
tell
process
add
need
factor
link
label
state
state
reach
suffix
link
comput
suffix
link
unless
next
tell
tell
tell
tell
musician
model
player
process
play
note
everi
player
process
choos
play
note
postpon
decis
next
true
tell
tell
next
tell
next
learn
simul
phase
must
work
concurr
order
achiev
requir
simul
phase
take
place
complet
built
process
charg
synchron
simul
learn
phase
preserv
properti
synchron
phase
greatli
simplifi
use
constraint
variabl
valu
process
depend
block
therefor
process
wait
greater
equal
one
mean
process
play
note
process
add
new
symbol
condit
first
suffix
link
equal
follow
simul
phase
next
unless
next
improvis
process
us
distribut
function
process
start
state
stochast
choos
accord
probabl
whether
output
symbol
follow
backward
link
next
tell
tell
next
tell
unless
next
tell
whole
system
repres
process
initi
launch
process
correspond
improvis
start
symbol
creat
player
process
tell
tell
choic
probabilist
time
concurr
constraint
pntcc
one
possibl
critiqu
ccp
gener
repres
certain
complex
system
even
count
partial
inform
extrem
valuabl
find
properli
take
account
certain
phenomenon
remain
difficult
sever
affect
model
verif
particularli
challeng
case
uncertain
behavior
inde
uncertainti
underli
concurr
interact
area
comput
music
go
way
beyond
model
use
partial
inform
first
attempt
extend
ntcc
work
probabl
stochast
time
concurr
constraint
sntcc
calculu
sntcc
use
howev
use
provid
oper
decid
whether
execut
process
certain
sntcc
ccfomi
model
action
choos
suffix
probabl
sntcc
link
factor
link
probabl
possibl
use
probabl
distribut
choos
among
factor
link
follow
state
probabl
distribut
describ
rang
possibl
valu
random
variabl
take
pntcc
overcom
problem
provid
new
agent
calculu
probabilist
choic
probabilist
choic
oper
follow
syntax
finit
set
index
everi
intuit
oper
follow
associ
repres
probabl
select
execut
henc
collect
repres
probabl
distribut
guard
entail
current
store
determin
subset
enabl
process
use
determin
eventu
normal
current
time
interv
summat
probabilist
choos
one
enabl
process
accord
distribut
defin
possibl
normal
chosen
altern
preclud
other
choic
possibl
summat
use
probabilist
choic
model
process
choos
factor
link
probabl
distribut
tell
oper
semant
agent
formal
definit
pntcc
found
appendix
probabilist
choic
music
sequenc
model
machin
improvis
want
choos
certain
music
sequenc
base
histori
user
comput
interact
instanc
travers
factor
oracl
simul
phase
want
inform
choos
among
factor
link
suffix
link
follow
certain
state
achiev
propos
assign
integ
link
use
integ
calcul
probabl
choos
link
base
probabl
distribut
recal
introduct
main
object
extend
ccfomi
model
probabilist
choic
music
sequenc
begin
thesi
work
develop
probabilist
model
chang
complex
time
build
quadrat
see
appendix
idea
behind
chang
probabl
factor
link
come
state
modifi
factor
link
leav
state
idea
discard
compat
soft
consid
soft
defin
introduct
probabilist
model
chose
base
simpl
yet
power
concept
use
system
paramet
probabl
choos
factor
link
simul
phase
decreas
time
factor
link
chosen
addit
calcul
length
common
suffix
context
associ
suffix
link
use
context
reward
suffix
link
inform
context
found
repres
system
four
kind
variabl
use
repres
state
transit
music
inform
attach
probabilist
inform
inform
chang
music
attribut
note
base
user
style
addit
variabl
describ
system
inform
parametr
user
constant
recombin
factor
repres
proport
new
sequenc
desir
repres
factor
decreas
import
factor
link
chosen
simul
phase
repres
import
new
factor
link
relat
factor
link
come
state
describ
chapter
paramet
chang
music
attribut
note
final
paramet
repres
number
note
must
learn
start
simul
phase
chapter
describ
use
synchron
improvis
phase
label
factor
link
pitch
moreov
outsid
definit
creat
tupl
three
integ
factor
link
pitch
durat
intens
three
characterist
repres
integ
pitch
intens
repres
integ
durat
repres
way
build
pitch
symbol
pitch
associ
music
inform
time
build
also
creat
three
integ
array
sum
integ
everi
factor
link
everi
suffix
link
everi
state
note
would
repres
probabl
choos
factor
link
suffix
link
consid
context
next
show
learn
simul
phase
probabilist
extens
present
simpl
exampl
explain
probabl
calcul
learn
phase
use
simul
phase
final
present
conclud
remark
improvis
model
relat
model
stylist
learn
phase
learn
phase
store
integ
factor
link
go
label
also
store
integ
state
automaton
initi
valu
fig
system
paramet
repres
import
new
sequenc
relat
sequenc
alreadi
learn
factor
link
label
first
factor
link
leav
assign
constant
want
big
integ
allow
precis
reason
reader
may
notic
approach
give
certain
import
new
factor
link
leav
label
without
chang
valu
quantiti
leav
furthermor
preserv
sum
valu
variabl
state
system
exhibit
import
properti
state
sum
probabl
associ
factor
link
come
state
equal
one
properti
preserv
chang
valu
improvis
phase
pitch
durat
intens
repres
accord
midi
standard
figur
ad
factor
link
hand
give
reward
suffix
link
use
context
calcul
context
lefebvr
lecroq
modifi
construct
algorithm
conserv
linear
complex
time
space
approach
success
use
cont
assayag
dubnov
anticipatori
improvis
model
figur
simpl
exampl
integ
array
present
previous
first
present
score
fragment
happi
birthday
song
present
sequenc
possibl
tupl
pitch
durat
intens
fragment
final
probabilist
inform
score
fragment
fragment
happi
birthday
song
repres
tupl
factor
oracl
probabilist
inform
figur
factor
oracl
use
repres
happi
birthday
fragment
stylist
simul
phase
simul
phase
use
inform
calcul
learn
phase
choos
note
probabilist
factor
link
chosen
phase
decreas
import
proport
addit
probabl
choos
secondari
factor
link
proport
consid
primari
factor
link
go
state
other
secondari
hand
suffix
link
reward
context
calcul
learn
phase
suffix
link
would
choos
factor
link
leav
state
later
explain
probabl
distribut
extend
concept
work
suffix
link
reward
context
howev
concept
decreas
probabl
factor
link
chosen
remain
invari
system
choos
certain
factor
link
leav
label
valu
decrement
multipli
subsequ
updat
new
valu
subtract
fig
way
preserv
properti
state
note
ad
constant
time
oper
make
model
compat
soft
figur
choos
factor
link
label
follow
factor
link
obtain
factor
subsequ
origin
sequenc
caus
two
problem
first
alway
follow
factor
link
soon
get
last
state
automaton
second
improvis
subsequ
inform
learn
user
without
sequenc
variat
would
make
improvis
repetit
follow
suffix
link
achiev
sequenc
variat
combin
differ
suffix
prefix
sequenc
learn
instanc
omax
model
music
improvis
process
audio
call
recombin
parametr
recombin
factor
rueda
approach
problem
ccfomi
creat
probabl
distribut
parameter
valu
probabl
choos
factor
link
given
probabl
choos
suffix
link
given
drawback
approach
sinc
reward
suffix
link
context
length
common
suffix
system
may
choos
multipl
time
row
suffix
link
go
back
one
two
state
creat
repetit
sequenc
approach
base
reward
suffix
link
context
intuit
choos
factor
link
leav
state
factor
link
leav
state
reach
follow
current
state
suffix
link
reward
last
one
product
recombin
factor
context
consid
function
return
state
suffix
link
lead
state
consid
factor
link
would
two
probabl
distribut
way
relat
use
context
creat
probabl
distribut
rank
factor
link
leav
state
product
sorri
ignor
case
case
use
system
abl
choos
symbol
state
advantag
probabl
distribut
one
present
ccfomi
take
account
context
well
recombin
factor
exemplifi
build
probabl
distribut
consid
probabilist
inform
figur
exampl
correspond
random
valu
integ
array
describ
chapter
tabl
show
build
probabl
distribut
figur
note
state
zero
two
tabl
probabl
calcul
happen
first
state
suffix
link
backward
last
state
factor
link
forward
hand
probabl
calcul
state
one
combin
probabl
choos
factor
link
follow
state
choos
suffix
link
choos
factor
link
state
zero
figur
factor
oracl
includ
probabl
sequenc
tabl
probabl
distribut
figur
summari
chapter
explain
model
music
improvis
use
probabl
extend
notion
choic
describ
ccfomi
intuit
decreas
probabl
choos
factor
link
time
chosen
reward
suffix
link
base
context
furthermor
explain
paramet
allow
parameter
comput
probabl
procedur
simpl
enough
probabl
comput
constant
time
built
preserv
linear
complex
time
space
construct
algorithm
addit
use
probabl
allow
gener
differ
sequenc
without
repeat
sequenc
multipl
time
row
like
ccfomi
relat
work
omax
assayag
blonch
recent
propos
new
way
travers
oracl
base
heurist
argu
travers
oracl
use
suffix
link
use
factor
link
produc
interest
sequenc
extens
ccfomi
use
pntcc
use
pntcc
make
possibl
choos
sequenc
simul
phase
base
probabl
distribut
although
perez
rueda
model
probabilist
choic
sequenc
use
provid
descript
probabl
calcul
learn
phase
chang
music
attribut
note
accord
conklin
system
aim
creat
music
base
predefin
rule
corpu
collect
music
piec
certain
music
style
learn
previous
system
creat
new
music
materi
base
style
corpu
learn
unfortun
use
algorithm
high
complex
time
space
make
inappropri
music
interact
accord
hand
interact
system
music
improvis
ccfomi
usual
base
recombin
sequenc
learn
user
although
recombin
creat
new
sequenc
base
user
style
creat
new
note
fact
even
chang
singl
characterist
note
solv
problem
one
object
thesi
work
chang
least
one
music
attribut
note
gener
style
simul
begin
work
tri
develop
algorithm
creat
new
note
base
learn
style
idea
calcul
probabl
certain
music
scale
base
probabl
choos
random
pitch
scale
music
scale
ascend
descend
seri
note
pitch
also
develop
algorithm
calcul
durat
new
note
see
appendix
includ
idea
thesi
work
first
choos
pitch
base
supposit
scale
gener
music
base
scale
addit
procedur
calcul
probabl
certain
scale
accur
found
test
final
algorithm
gener
new
durat
compat
soft
approach
chose
chang
music
attribut
base
simpl
power
concept
store
averag
intens
music
attribut
chang
model
reason
mention
note
current
play
current
dynam
comput
also
store
current
dynam
user
compar
chang
current
dynam
comput
necessari
make
similar
user
current
dynam
idea
behind
intens
variat
origin
propos
musician
riasco
collazo
base
concept
usual
appli
improvis
musician
order
formal
concept
calcul
learn
phase
current
dynam
last
system
paramet
note
play
user
comput
separ
concurr
simul
phase
compar
two
current
dynam
equal
multipli
intens
current
note
play
comput
factor
proport
relat
user
comput
current
dynam
follow
explain
detail
calcul
current
dynam
learn
phase
chang
intens
note
gener
simul
phase
stylist
learn
phase
intens
music
repres
two
differ
thing
time
analyz
intens
singl
note
sequenc
reason
intens
music
accent
mean
import
certain
note
defin
rhythm
hand
reason
averag
intens
sequenc
note
dynam
sequenc
note
accent
may
written
explicitli
score
symbol
bellow
note
dynam
rel
loud
may
written
explicitli
score
piano
fort
fortissimo
etc
captur
two
concept
learn
phase
store
intens
tupl
pitch
durat
intens
addit
store
current
dynam
last
note
play
user
comput
calcul
current
dynam
propos
algorithm
idea
algorithm
store
last
intens
queue
algorithm
receiv
sequenc
intens
valu
refer
queue
current
dynam
invari
algorithm
alway
averag
queue
data
variabl
sum
variabl
intensitysum
append
give
exampl
oper
algorithm
new
queue
intensitysum
queuesiz
queuesiz
intensitysum
els
intensitysum
intensitysum
stylist
simul
phase
phase
travers
use
probabilist
distribut
propos
chapter
rememb
intens
durat
associ
pitch
play
intens
valu
learn
could
problem
coher
current
dynam
user
current
dynam
sequenc
produc
give
exampl
problem
consid
happi
birthday
fragment
present
figur
current
dynam
fragment
suppos
comput
current
dynam
pose
problem
user
expect
comput
improvis
dynam
accord
interview
riasco
collazo
solut
propos
multipli
factor
intens
everi
note
gener
comput
previou
exampl
next
note
gener
comput
would
multipli
factor
summari
explain
chang
intens
note
gener
improvis
idea
maintain
current
dynam
note
gener
comput
similar
current
dynam
note
gener
user
correspond
formal
improvis
techniqu
use
two
musician
interview
thesi
work
kind
variat
intens
someth
new
machin
improvis
system
far
know
believ
kind
approach
simpl
variat
made
preserv
style
learn
user
compat
topic
investig
futur
work
relat
work
solv
problem
creat
new
note
chang
attribut
note
improvis
omax
model
paramet
call
innov
rate
indic
amount
new
materi
desir
furthermor
omax
calcul
rhythmic
qualiti
function
compar
densiti
number
event
overal
durat
current
state
place
link
lead
use
rhythmic
qualiti
function
improvis
jump
abruptli
differ
rhythmic
pattern
therefor
omax
improvis
rhythmic
coher
within
howev
gener
new
rhythm
coher
user
style
machin
improvis
still
open
problem
anticipatori
model
develop
cont
present
result
sequenc
produc
improvis
differ
pitch
compar
origin
sequenc
achiev
improvis
pitch
interv
learn
interv
pitch
play
user
allow
calcul
new
pitch
use
pitch
interv
attribut
improvis
neither
ccfomi
probabilist
extens
provid
way
chang
music
attribut
note
creat
new
materi
base
user
style
model
system
pntcc
ntcc
use
larg
varieti
situat
synchron
music
process
introduct
chapter
recal
model
interact
score
audio
process
formal
music
process
music
improvis
model
synchron
made
declar
mean
ntcc
hide
detail
process
synchron
share
resourc
store
access
one
object
work
model
improvis
system
ntcc
far
present
modif
improvis
phase
allow
probabilist
choic
music
sequenc
chang
music
attribut
simul
phase
sinc
choos
sequenc
probabilist
use
pntcc
probabilist
extens
ntcc
model
improvis
system
order
synchron
improvis
phase
learn
phase
must
take
place
begin
howev
simul
phase
launch
learn
phase
learn
note
phase
run
concurr
synchron
must
provid
improvis
phase
must
work
partial
built
graph
improvis
fragment
graph
repres
addit
simul
phase
work
state
valu
current
dynam
context
probabilist
distribut
calcul
state
approach
synchron
improvis
phase
similar
one
use
ccfomi
rememb
ccfomi
synchron
improvis
phase
use
variabl
variabl
player
process
post
constraint
variabl
process
build
add
loop
activ
deduc
certain
inform
variabl
extend
concept
use
new
variabl
introduc
model
addit
variabl
use
ccfomi
model
variabl
repres
probabilist
choic
music
sequenc
repres
music
attribut
associ
pitch
repres
intens
variat
variabl
repres
ration
tree
variabl
chang
valu
anoth
variabl
repres
cell
cell
defin
chapter
chapter
explain
write
sequenti
algorithm
learn
phase
combin
algorithm
build
calcul
context
calcul
probabilist
distribut
current
dynam
show
phase
model
pntcc
final
give
conclud
remark
present
relat
work
model
stylist
learn
phase
learn
phase
easili
integr
algorithm
build
calcul
context
origin
algorithm
present
appendix
learn
phase
repres
function
calcul
context
use
function
propos
lefevr
calcul
context
find
length
repeat
suffix
linear
time
space
complex
function
charg
ad
new
pitch
also
creat
tupl
pitch
durat
intens
updat
valu
calcul
current
dynam
user
context
state
function
receiv
state
pitch
durat
intens
system
paramet
intens
queue
execut
us
constant
function
tempor
variabl
big
integ
constant
function
return
suffix
link
state
tempor
variabl
use
calcul
context
oracl
durat
intens
creat
new
state
queuesiz
intensitysum
els
intensitysum
intens
durat
intens
undefin
els
return
oracl
function
sequenti
algorithm
repres
learn
phase
receiv
three
vector
pitch
durat
intens
addit
take
system
paramet
rank
import
new
note
ad
system
paramet
repres
number
note
taken
account
calcul
current
dynam
figur
present
execut
function
three
first
symbol
happi
birthday
fragment
present
figur
creat
oracl
one
singl
state
new
queue
intensitysum
oracl
oracl
figur
execut
ext
oracl
algorithm
learn
phase
model
pntcc
process
phi
add
loop
player
context
process
phi
calcul
valu
probabl
distribut
use
choos
factor
link
leav
state
label
symbol
recombin
factor
parameter
process
repres
act
ad
fresh
variabl
infinit
ration
tree
describ
chapter
use
infinit
ration
tree
repres
variabl
repres
transit
phi
tell
tell
process
add
one
charg
ad
new
pitch
addit
process
updat
valu
cell
variabl
call
function
phi
tell
next
loop
process
repres
loop
function
process
add
new
factor
link
point
new
state
greater
transit
label
valu
depend
suffix
link
addit
calcul
valu
context
probabilist
inform
tell
next
next
tell
tell
tell
context
process
reader
may
notic
use
instead
unless
next
know
alway
valu
valu
use
calcul
effici
context
accord
lefevr
algorithm
context
tell
tell
tell
next
process
calcul
valu
current
dynam
addit
updat
sum
base
paramet
index
final
player
store
valu
pitch
durat
intens
receiv
environ
note
play
user
furthermor
updat
current
dynam
next
tell
tell
tell
tell
tell
next
tell
model
style
simul
phase
phase
use
agent
defin
pntcc
model
probabilist
choic
model
extens
model
present
model
improv
process
choos
link
accord
probabl
distribut
furthermor
updat
valu
sum
output
updat
comput
current
dynam
order
ask
constraint
deduc
store
use
reific
instanc
process
codifi
process
constraint
improv
next
tell
tell
tell
tell
next
improv
unless
next
unless
next
improv
unless
next
improv
synchron
improvis
phase
synchron
phase
greatli
simplifi
use
constraint
variabl
valu
process
depend
block
therefor
process
wait
greater
equal
one
mean
process
play
note
process
add
new
symbol
condit
first
suffix
link
equal
suffix
link
follow
simul
phase
addit
sync
process
also
wait
current
dynam
take
valu
greater
equal
next
next
process
necessari
wait
symbol
learn
launch
improv
process
wait
next
improv
unless
next
wait
system
model
player
sync
process
run
parallel
process
wait
symbol
play
start
improv
process
reader
remeb
recombin
factor
repres
proport
new
sequenc
desir
repres
factor
decreas
import
factor
link
chosen
simul
phase
repres
import
new
factor
link
relat
factor
link
come
state
paramet
chang
music
attribut
note
final
paramet
repres
number
note
must
learn
start
simul
phase
system
tell
wait
summari
model
concept
describ
previou
chapter
use
pntcc
although
synchron
probabilist
choic
model
declar
match
easi
task
valu
cell
chang
follow
chang
valu
cell
scope
unless
process
need
awar
valu
chang
two
relat
work
omax
model
us
instead
use
ntcc
us
share
state
concurr
synchron
improvis
phase
messag
pass
concurr
synchron
openmus
although
remark
model
believ
ntcc
provid
easier
way
synchron
process
reason
correct
implement
obvious
easier
synchron
declar
constraint
provid
much
power
way
express
declar
complex
synchron
pattern
sinc
ntcc
model
logic
counterpart
possibl
prove
properti
model
instanc
fact
alway
never
sometim
choos
longest
context
repetit
given
subsequ
avoid
probabilist
ccofmi
fix
problem
synchron
extend
notion
probabilist
choic
improvis
phase
give
clear
concis
semant
howev
model
probabilist
distribut
may
chang
anoth
base
user
comput
interact
implement
ntcc
interpret
program
take
ntcc
model
creat
program
interact
environ
simul
behavior
ntcc
model
ntcc
interpret
includ
interpret
design
simul
finit
ntcc
model
mean
simul
finit
number
last
decad
three
interpret
ntcc
develop
lman
hurtado
muñoz
ntccsim
http
avispa
research
group
rueda
sim
intend
simul
ntcc
model
made
interact
recal
introduct
soft
interact
mean
user
experi
notic
delay
interact
design
ntcc
interpret
need
constraint
solv
librari
program
languag
allow
check
stabil
know
check
entail
know
constraint
deduc
store
post
constraint
synchron
concurr
access
store
task
must
perform
effici
achiev
good
perform
author
ntcc
model
interact
score
propos
use
gecod
constraint
solv
librari
futur
ntcc
interpret
creat
interfac
gecod
openmus
specifi
multimedia
interact
applic
furthermor
propos
extend
lman
work
mac
use
gecod
one
object
thesi
develop
prototyp
ntcc
interpret
time
capabl
follow
advis
author
interact
score
model
tri
sever
altern
develop
interpret
use
gecod
first
attempt
use
thread
repres
ntcc
process
simul
howev
found
use
thread
add
overhead
perform
interpret
among
thread
even
use
lightweight
thread
tri
use
program
perform
better
compar
thread
implement
howev
time
process
ask
condit
entail
need
check
stabil
thu
ad
unnecessari
overhead
reader
may
find
inform
previou
attempt
appendix
perform
result
chapter
implement
ntccrt
base
simpl
power
concept
process
encod
propag
gecod
way
gecod
manag
concurr
requir
interpret
gecod
call
continu
process
process
condit
assign
true
hand
tell
process
trivial
codifi
exist
gecod
propag
time
agent
unless
next
manag
provid
differ
process
queue
simul
interpret
work
two
mode
develop
mode
interact
mode
develop
mode
user
may
specifi
ntcc
system
want
simul
interpret
interact
mode
user
execut
model
interact
chapter
design
implement
ntccrt
explain
encod
ntcc
process
also
explain
execut
model
interpret
show
run
ccfomi
interpret
addit
describ
made
interfac
openmus
gener
binari
plugin
program
languag
pure
data
midi
audio
video
interact
ntccrt
binari
final
give
conclus
futur
work
short
descript
exist
interpret
detail
descript
ntccrt
gener
binari
plugin
pure
data
previou
ntccrt
prototyp
found
previou
public
design
ntccrt
first
version
ntccrt
allow
specifi
ntcc
model
execut
program
current
version
offer
possibl
specifi
ntcc
model
either
lisp
openmus
addit
current
possibl
execut
ntcc
model
program
extern
object
binari
plugin
max
develop
mode
order
write
ntcc
model
ntccrt
user
may
write
directli
use
parser
take
common
lisp
macro
input
defin
graphic
patch
openmus
use
either
represent
possibl
gener
alon
program
extern
object
fig
figur
ntccrt
develop
mode
make
interfac
openmus
first
develop
lisp
parser
use
common
lisp
macro
write
ntcc
model
lisp
syntax
translat
code
lisp
macro
extend
lisp
syntax
give
special
mean
charact
reserv
user
purpos
execut
macro
automat
compil
ntcc
program
success
lisp
macro
creat
openmus
method
repres
ntcc
process
openmus
method
graphic
represent
use
common
lisp
object
system
clo
graphic
object
place
graphic
patch
execut
patch
gener
ntccrt
program
execut
mode
execut
ntccrt
program
proceed
two
differ
way
creat
program
interact
midishar
librari
creat
extern
object
either
max
advantag
compil
ntcc
model
extern
object
lie
use
control
signal
messag
pass
api
provid
max
synchron
graphic
object
ntccrt
extern
figur
ntccrt
interact
mode
handl
midi
stream
midi
file
midi
instrument
midi
stream
program
use
predefin
function
max
process
midi
connect
output
function
ntccrt
binari
plugin
also
provid
interfac
midishar
use
run
program
fig
implement
ntccrt
ntccrt
first
ntcc
interpret
written
use
gecod
section
focu
describ
data
structur
requir
repres
ntcc
agent
explain
interpret
make
simul
ntcc
model
ntcc
agent
repres
class
avoid
confus
write
agent
bold
font
class
ital
font
class
data
structur
repres
constraint
system
need
provid
new
data
type
gecod
variabl
work
particular
store
therefor
need
abstract
repres
ntcc
variabl
present
multipl
store
variabl
object
boolean
variabl
repres
boolv
class
variabl
intv
class
variabl
setv
class
infinit
ration
tree
unari
branch
setvarray
boolvarray
intvarray
class
encod
constraint
system
defin
way
repres
process
class
inherit
askbodi
askbodi
class
defin
execut
method
call
anoth
object
nest
repres
tell
agent
defin
super
class
tell
prototyp
provid
three
subclass
repres
process
tell
tell
tell
kind
tell
agent
easili
defin
inherit
tell
superclass
declar
execut
method
agent
made
propag
class
call
propag
process
repres
two
propag
reifi
propag
constraint
els
skip
propag
propag
check
valu
valu
true
call
execut
method
otherwis
take
action
figur
show
encod
process
use
propag
figur
exampl
propag
repres
agent
choic
made
parallel
condit
propag
propag
receiv
sequenc
tupl
gecod
boolean
variabl
repres
condit
reifi
propag
pointer
askbodi
object
process
execut
assign
true
propag
execut
process
associ
first
guard
assign
true
mean
work
variabl
assign
fals
work
propag
base
idea
parallel
condit
combin
propos
schult
curiou
reader
might
ask
obtain
determinist
behavior
order
make
choic
pa
paramet
propag
random
order
way
propag
alway
choos
first
process
condit
true
sinc
process
condit
given
random
order
simul
choic
figur
show
encod
process
tell
use
parallel
condit
propag
process
explain
appendix
figur
exampl
parallel
condit
propag
local
variabl
easili
repres
instruct
allow
user
creat
new
variabl
begin
procedur
new
variabl
persist
follow
simul
implement
local
variabl
use
process
contain
local
variabl
variabl
declar
begin
simul
time
agent
repres
timedprocess
class
timedprocess
abstract
class
provid
pointer
current
queue
use
unless
process
queue
use
persist
assign
process
queue
use
process
continu
process
subclass
defin
differ
execut
method
instanc
execut
method
star
class
randomli
choos
place
continu
askbodi
object
correspond
process
queue
unless
class
persist
assign
class
differ
execut
method
unless
object
persist
assign
object
call
calcul
fixpoint
common
process
process
queue
formal
propag
seen
function
receiv
store
return
store
fixpoint
propag
store
gecod
calcul
store
fixpoint
propag
said
store
stabl
calcul
fixpoint
condit
unless
deduc
stabl
store
continu
execut
next
hand
persist
assign
copi
domain
variabl
assign
store
stabl
assign
variabl
follow
creat
tell
object
follow
also
procedur
class
use
model
ntcc
simpl
definit
tell
ntcc
recurs
definit
invoc
use
call
class
ntcc
recurs
definit
creat
local
variabl
simul
specifi
formal
recurs
ntcc
restrict
paramet
variabl
store
make
recurs
call
recurs
procedur
howev
ntccrt
check
condit
left
user
implement
gener
recurs
execut
model
order
execut
simul
user
write
ntcc
mdel
ntccrt
compil
call
compil
program
number
unit
simul
paramet
main
ntcc
definit
interpret
execut
follow
step
first
creat
new
store
new
variabl
store
process
input
midi
data
come
max
simul
first
call
main
ntcc
definit
argument
given
user
move
unless
process
unless
queue
move
persist
assign
process
persist
assign
queue
execut
remain
process
process
queue
calcul
fixpoint
note
calcul
one
fixpoint
oppos
previou
prototyp
calcul
fixpoint
execut
unless
process
unless
queue
execut
persist
assign
persist
assign
queue
call
output
process
method
send
variabl
valu
standard
output
midi
port
final
delet
current
store
figur
illustr
execut
model
figur
execut
model
ntcc
interpret
implement
ccfomi
rueda
ran
ccfomi
interpret
wrote
lisp
macro
extend
lisp
syntax
definit
ntcc
process
provid
similar
interfac
write
ntcc
process
lisp
furthermor
write
ccfomi
definit
ntccrt
intuit
way
use
openmus
instanc
process
present
chapter
charg
synchron
process
repres
box
one
parallel
process
one
condit
one
condit
one
unless
process
fig
figur
write
process
openmus
success
ran
ccfomi
program
use
midishar
present
result
test
program
chapter
error
refer
sourc
found
also
ran
plugin
gener
ntccrt
plugin
connect
clock
use
chang
simplic
gener
clock
puls
note
play
user
fig
way
could
connect
metronom
object
metronom
object
creat
clock
puls
fix
interv
time
figur
run
ccfomi
pure
data
summari
develop
interpret
develop
interfac
openmus
write
ntcc
model
ntccrt
although
openmus
interfac
gener
code
ntccrt
abl
emb
lisp
code
interpret
addit
current
version
interpret
support
probabilist
choic
cell
requir
run
model
accept
object
develop
ntcc
interpret
prototyp
reason
still
support
pntcc
cell
basic
oper
ntcc
follow
describ
possibl
limit
interpret
possibl
solut
futur
work
addit
sinc
encod
process
gecod
propag
abl
use
search
ntcc
model
without
use
agent
possibl
encod
process
lightweight
thread
thread
thread
manag
insid
gecod
search
engin
model
use
determinist
choic
incompat
recomput
use
search
engin
ntccrt
simul
process
lead
store
fals
instanc
fals
next
tell
sinc
agent
repres
propag
propag
achiev
fail
state
propag
call
caus
inconsist
rest
simul
fortun
process
reason
fals
store
rewritten
differ
way
avoid
kind
situat
instanc
process
rewritten
next
tell
although
mani
applic
want
continu
store
fail
fail
store
like
except
program
languag
divis
zero
addit
ntccrt
restrict
domain
differ
constraint
system
domain
variabl
set
tree
ration
tree
variabl
limit
due
gecod
us
integ
data
type
repres
variabl
anoth
problem
aris
want
call
lisp
function
interpret
useful
make
comput
music
program
written
lisp
interact
ntccrt
current
use
lisp
gener
code
howev
possibl
emb
lisp
code
interpret
call
lisp
function
continu
process
fix
inconveni
propos
use
gelisp
write
new
interpret
take
advantag
function
provid
foreign
function
interfac
ffi
call
lisp
function
way
propag
abl
call
lisp
function
although
could
neg
impact
perform
correct
system
lisp
function
end
implement
cell
still
experiment
yet
usabl
idea
capabl
implement
cell
extend
implement
persist
assign
cell
way
persist
assign
requir
pa
domain
variabl
current
futur
howev
persist
assign
usual
involv
simpl
equal
relat
hand
cell
assign
may
involv
mathemat
function
probabilist
choic
yet
possibl
neither
achiev
propos
extend
idea
use
choic
agent
model
enough
determin
first
condit
deduc
activ
process
associ
probabilist
choic
need
check
condit
calcul
fixpoint
need
know
condit
entail
calcul
probabilist
distribut
multipl
probabilist
choic
oper
nest
need
calcul
fixpoint
nest
level
implement
cell
probabilist
choic
would
easi
implement
model
propos
work
valencia
propos
develop
model
check
tool
ntcc
futur
propos
use
model
check
tool
verifi
properti
complex
system
one
bit
use
sign
addit
pérez
rueda
propos
explor
automat
gener
model
probabilist
model
checker
prism
reader
awar
prism
use
success
check
properti
system
believ
approach
use
verifi
properti
system
final
found
ntccrt
repres
uniform
unit
simul
differ
durat
problem
synchron
ntcc
program
program
fix
made
durat
take
fix
time
easili
use
clock
provid
max
provid
clock
input
ntccrt
plugin
way
start
simul
new
receiv
clock
puls
hand
fix
durat
two
problem
first
fix
time
le
time
requir
comput
process
make
simul
incoher
second
make
simul
last
longer
fix
time
upper
limit
durat
relat
work
lman
develop
framework
program
rcx
lego
robot
compos
three
part
abstract
machin
compil
visual
languag
borrow
interpret
idea
sever
queue
store
ntcc
process
instead
use
thread
regrett
sinc
lman
support
finit
domain
constraint
ntccsim
use
simul
biolog
model
develop
abl
work
finit
domain
constraint
system
reason
real
number
conjectur
prove
use
write
ntcc
interpret
effici
use
gecod
base
result
obtain
benchmark
gecod
gecod
perform
better
constraint
solv
rueda
sim
develop
framework
simul
multimedia
semant
interact
applic
interpret
first
one
repres
ration
tree
finit
domain
finit
domain
set
constraint
system
one
drawback
interpret
use
screamer
repres
constraint
system
screamer
framework
constraint
logic
program
written
common
lisp
unfortun
screamer
design
high
perform
make
execut
ntcc
model
rueda
sim
suitabl
interact
test
result
sinc
creation
lman
perform
correct
main
issu
evalu
ntcc
interpret
lman
great
success
histori
ntcc
interpret
use
lman
possibl
program
lego
robot
formal
predict
behavior
robot
year
later
rueda
sim
capabl
model
multimedia
interact
system
although
beyond
scope
research
evalu
whether
interpret
faster
ntccrt
whether
abl
interact
human
player
conjectur
appropri
interact
simul
hundr
complex
model
ccfomi
base
result
present
author
chapter
want
evalu
perform
ntcc
interpret
prototyp
also
evalu
behavior
ntccrt
order
achiev
goal
perform
differ
test
ntccrt
previou
implement
ntcc
first
tri
develop
gener
implement
lightweight
thread
could
use
lispwork
purpos
use
thread
manag
concurr
ntcc
interpret
compar
lisp
process
thread
implement
thread
base
continu
implement
thread
base
program
found
continu
effici
lispwork
also
found
implement
thread
faster
use
lisp
process
continu
howev
difficult
express
instruct
jump
except
local
variabl
definit
program
tri
use
lisp
process
thread
implement
ntcc
interpret
explain
appendix
found
switch
thread
fact
check
stabil
constantli
add
overhead
perform
ntcc
interpret
reason
discard
use
thread
ntcc
interpret
also
found
encod
ntcc
process
gecod
propag
outperform
thread
implement
interpret
test
present
chapter
taken
sampl
essay
time
measur
use
time
command
provid
mac
time
macro
provid
common
lisp
test
perform
mac
use
imac
intel
core
duo
ghz
lispwork
profession
graph
bar
present
averag
sampl
vertic
axe
measur
second
graph
present
standard
deviat
statist
inform
differ
perform
one
implement
anoth
consider
high
reason
perform
implement
sometim
present
bar
graph
fit
scale
graph
test
ntccrt
perform
order
test
ntccrt
perform
made
two
test
first
compar
ntcc
specif
find
path
graph
three
implement
second
test
ccfomi
use
ntccrt
recal
begin
chapter
test
taken
sampl
essay
time
measur
use
time
command
provid
mac
time
macro
provid
common
lisp
test
perform
mac
use
imac
intel
core
duo
ghz
lispwork
profession
test
compar
implement
ntcc
interpret
compar
execut
time
simul
specif
present
find
path
graph
concurr
explain
detail
appendix
run
lisp
interpret
ntccrt
also
compar
concurr
constraint
implement
recurs
implement
lisp
fig
figur
compar
implement
find
path
graph
test
execut
ccfomi
ccfomi
abl
receiv
one
note
reason
measur
perform
averag
durat
ntcc
simul
ran
ccfomi
ntccrt
player
interpret
first
note
bach
invent
studi
player
choos
determinist
play
note
postpon
decis
next
took
averag
millisecond
per
schedul
around
process
per
simul
simul
experi
time
detail
result
found
appendix
present
music
result
sinc
scope
work
conclud
whether
ccfomi
produc
improvis
appeal
ear
interest
perform
test
pachet
argu
improvis
system
abl
learn
produc
sequenc
le
appropri
interact
sinc
ccfomi
respons
time
averag
simul
conclud
capabl
interact
accord
pachet
research
summari
ntccrt
ntcc
interpret
base
encod
ntcc
process
gecod
propag
outperform
thread
implement
ntcc
sinc
learn
produc
sequenc
respons
time
lower
millisecond
accord
author
continu
system
fast
enough
interact
musician
relat
work
lman
develop
ran
specif
play
midi
pitch
fix
durat
test
made
use
pentium
iii
mhz
ram
linux
debian
woodi
rcx
lego
robot
run
bricko
made
simul
simpl
process
take
averag
run
use
lman
unfortun
suitabl
interact
music
even
would
run
modern
comput
hand
rueda
interpret
ran
ccfomi
ghz
appl
powerbook
use
digitool
mcl
version
common
lisp
take
averag
millisecond
per
schedul
around
concurr
process
also
made
simul
unfortun
rueda
implement
us
mcl
function
defin
common
lisp
standard
abl
run
interpret
mac
intel
compar
ntccrt
hand
lman
design
linux
longer
maintain
current
version
linux
conclus
chapter
present
summari
thesi
conclud
remark
propos
futur
work
thought
summari
explain
model
music
improvis
use
probabl
extend
notion
choic
describ
ccfomi
although
idea
simpl
probabl
comput
constant
time
space
built
manag
preserv
linear
complex
time
space
construct
algorithm
calcul
probabl
certain
scale
make
model
appropri
certain
music
genr
requir
calcul
multipl
constant
vari
accord
genr
tonal
music
user
improvis
reason
discard
explain
chang
intens
note
gener
improvis
kind
variat
intens
someth
new
machin
improvis
system
far
know
believ
kind
approach
simpl
variat
made
preserv
style
learn
user
compat
implement
topic
investig
futur
work
use
cell
repres
variabl
chang
anoth
use
cell
model
probabilist
distribut
chang
accord
user
comput
interact
far
know
first
pntcc
model
probabilist
distribut
chang
unfortun
current
version
ntccrt
support
cell
probabilist
choic
ran
ccfomi
ntccrt
take
averag
millisecond
per
see
chapter
sinc
learn
produc
sequenc
respons
time
le
millisecond
accord
author
continu
system
fast
enough
interact
musician
although
gecod
design
solv
combinatori
problem
use
constraint
found
use
gecod
ntccrt
give
outstand
result
write
ntcc
interpret
unfortun
interpret
abl
execut
process
lead
store
fals
howev
process
reason
fals
store
rewritten
differ
way
avoid
kind
situat
conclud
remark
show
make
probabilist
extens
ccfomi
use
factor
oracl
extens
three
main
featur
first
preserv
linear
time
space
complex
factor
oracl
algorithm
factor
oracl
chosen
data
structur
captur
user
style
ccfomi
linear
complex
extens
would
worth
chang
complex
factor
oracl
construct
algorithm
order
add
probabilist
inform
model
make
incompat
second
use
pntcc
probabilist
extens
ntcc
model
advantag
pntcc
need
model
process
new
calculu
extend
ccfomi
instead
use
pntcc
agent
defin
ntcc
except
agent
use
work
new
agent
probabilist
choic
ad
probabilist
choic
ccofmi
avoid
loop
without
control
improvis
may
happen
without
control
ccfomi
due
natur
addit
chang
probabl
distribut
could
favor
repetit
improvis
desir
third
variat
intens
improvis
far
know
first
model
consid
kind
variat
gener
variat
intens
improvis
avoid
sharp
differ
user
comput
intens
make
improvis
appeal
ear
accord
musician
interview
variat
music
attribut
decad
comput
assist
composit
interact
system
machin
improvis
variat
still
open
subject
part
due
time
requir
interact
system
reader
consid
relev
use
process
calculu
pntcc
model
verifi
execut
music
improvis
system
pose
reader
follow
question
reader
develop
improvis
system
program
languag
mix
probabilist
choic
tri
verifi
system
formal
easi
task
would
reader
abl
write
system
line
code
use
pntcc
model
system
use
pntcc
process
calculu
known
theori
concurr
past
two
decad
use
applic
garavel
argu
model
base
process
calculu
widespread
mani
calculu
mani
variant
calculu
difficult
choos
appropri
addit
difficult
express
explicit
notion
time
requir
process
calculu
final
argu
exist
tool
process
calculu
want
make
process
calculu
widespread
applic
left
task
repres
process
calculu
choos
appropri
variant
calculu
applic
senior
research
work
focu
develop
applic
pntcc
show
interpret
ntccrt
tool
provid
graphic
interfac
describ
ntcc
process
easili
compil
model
ccfomi
effici
program
capabl
time
user
interact
also
show
approach
design
ntccrt
offer
better
perform
use
thread
program
repres
process
reader
may
argu
although
synchron
ntccrt
extern
clock
provid
max
solv
problem
simul
model
clock
step
smaller
time
necessari
comput
addit
reader
may
argu
encourag
formal
verif
ntcc
pntcc
model
exist
tool
verifi
model
automat
even
reader
right
reason
current
avispa
research
group
sponsor
pontificia
universidad
javeriana
cali
develop
interpret
extens
ntcc
capabl
model
fix
durat
addit
avispa
propos
colciencia
project
call
robust
theori
emerg
applic
concurr
theori
process
logic
use
emerg
system
focu
develop
verif
tool
ntcc
pntcc
process
calculu
addit
project
continu
develop
faster
easier
use
interpret
invit
reader
read
follow
section
know
futur
work
thought
propos
addit
reader
may
find
inform
propos
http
futur
work
futur
propos
extend
research
follow
direct
extend
model
propos
captur
new
element
music
sequenc
instanc
consid
music
timbr
music
variat
vibrato
bend
acciaccatura
reson
effect
delay
reverb
choru
improvis
sever
concurr
improvis
situat
propos
none
implement
music
improvis
rueda
propos
follow
perform
oracl
learn
perform
one
perform
one
oracl
learn
sever
improvis
process
run
concurr
oracl
one
perform
sever
oracl
learn
differ
viewpoint
perform
use
gelisp
ntccrt
current
use
lisp
gener
code
howev
possibl
emb
lisp
code
interpret
work
around
propos
use
gelisp
write
new
interpret
take
advantag
function
provid
foreign
function
interfac
ffi
call
lisp
function
way
process
trigger
execut
lisp
function
ad
support
cell
ntccrt
idea
capabl
implement
cell
extend
implement
persist
assign
cell
way
persist
assign
requir
pa
domain
variabl
current
futur
develop
interpret
pntcc
pérez
rueda
alreadi
propos
interpret
pntcc
achiev
probabilist
choic
ntccrt
propos
extend
idea
use
choic
agent
model
enough
determin
first
condit
deduc
activ
process
associ
probabilist
choic
need
check
condit
calcul
fixpoint
need
know
condit
entail
calcul
probabilist
distribut
multipl
probabilist
choic
oper
nest
need
calcul
fixpoint
nest
level
develop
interpret
rtcc
way
describ
behavior
ntcc
fix
time
le
time
requir
execut
process
schedul
reason
propos
develop
interpret
real
time
concurr
constraint
rtcc
calculu
rtcc
extens
ntcc
capabl
deal
strong
strong
allow
execut
process
interrupt
exact
instant
intern
transit
caus
constraint
infer
store
rtcc
also
capabl
delay
insid
singl
time
unit
delay
insid
singl
time
unit
allow
express
thing
like
process
must
start
second
anoth
start
sarria
propos
develop
interpret
rtcc
believ
extend
ntccrt
simul
rtcc
model
ad
graphic
interfac
ntccrt
work
conduct
test
mac
use
program
sinc
use
gecod
flext
gener
extern
could
easili
compil
platform
max
use
openmus
defin
icon
represent
ntcc
model
futur
also
propos
explor
way
make
graphic
specif
ntcc
similar
graphic
represent
data
structur
develop
model
check
tool
ntccrt
valencia
propos
use
model
check
tool
verifi
properti
complex
ntcc
model
addit
pérez
rueda
propos
develop
model
check
tool
pntcc
instanc
propos
explor
automat
gener
model
prism
base
pntcc
model
propos
gener
model
exist
model
checker
automat
prove
properti
system
simul
ntccrt
acknowledg
remov
review
refer
cyril
allauzen
maxim
crochemor
mathieu
raffinot
factor
oracl
new
structur
pattern
match
confer
current
trend
theori
practic
informat
page
music
collazo
juan
manuel
improvis
interview
darrel
conklin
ian
witten
multipl
viewpoint
system
music
antoin
allomb
gérard
assayag
camilo
rueda
concurr
constraint
model
interact
score
proc
sound
music
comput
confer
smc
gmem
marseil
may
antoin
allombert
myriam
mauricio
toro
model
tempor
constrain
system
interact
score
gérard
assayag
charlott
truchet
editor
constraint
program
music
chapter
page
wiley
jesú
aranda
gérard
assayag
carlo
olart
jorg
pérez
camilo
rueda
mauricio
toro
frank
valencia
overview
forc
inria
project
declar
formal
emerg
system
patricia
hill
david
scott
warren
editor
logic
program
intern
confer
iclp
pasadena
usa
juli
proceed
volum
lectur
note
comput
scienc
page
springer
gérard
assayag
georg
bloch
naveg
oracl
heurist
approach
intern
comput
music
confer
page
copenhagen
denmark
august
gèrard
assayag
shlomo
dubnov
improvis
plan
jam
session
design
use
concept
sequenc
variat
flow
experi
sound
music
comput
salerno
itali
novembr
videorecord
internet
predict
journal
new
music
research
arshia
cont
antescofo
anticipatori
synchron
control
interact
paramet
comput
music
proceed
intern
comput
music
confer
icmc
belfast
august
arshia
cont
shlomo
dubnov
gérard
assayag
framework
anticipatori
machin
improvis
style
imit
anticipatori
behavior
adapt
learn
system
abial
rome
itali
septembr
arshia
cont
shlomo
dubnov
anticipatori
model
music
style
imit
use
collabor
competit
reinforc
learn
butz
sigaud
pezzulo
baldassarr
editor
anticipatori
behavior
adapt
learn
system
volum
lectur
note
comput
scienc
artifici
intellig
lnai
page
springer
verlag
berlin
musiqu
page
herm
hubert
garavel
reflect
futur
concurr
theori
gener
process
calculu
particular
electron
note
theor
comput
improvis
soft
intern
linux
audio
confer
julian
gutiérrez
jorg
pérez
camilo
rueda
frank
valencia
time
concurr
constraint
program
analyz
biolog
system
electron
note
theor
comput
ottó
károlyi
introducción
música
alianza
editori
madrid
kwiatkowska
norman
parker
sproston
model
verif
system
formal
softwar
tool
chapter
verif
probabilist
system
page
john
wiley
son
lefebvr
lecroq
comput
repeat
factor
factor
oracl
brankov
ryan
editor
proceed
australasian
workshop
combinatori
algorithm
page
hunter
valley
australia
albert
graef
interfac
pure
data
faust
lac
editor
letz
fober
orlarey
midishar
une
architectur
logiciel
pour
sholomo
dubnov
use
factor
oracl
machin
françoi
pachet
play
virtual
musician
continu
practic
orlarey
fober
letz
syntact
semant
aspect
olart
rueda
stochast
tempor
concurr
hugo
lópez
catuscia
palamidessi
jorg
andré
pérez
camilo
rueda
frank
valencia
declar
framework
secur
secur
concurr
constraint
program
iclp
page
muñoz
hurtado
lman
ntcc
abstract
machin
concurr
program
lego
robot
spanish
thesi
depart
comput
scienc
engin
pontifica
universidad
javeriana
cali
pilar
muñoz
andré
hurtado
program
robot
devic
time
concurr
constraint
program
principl
practic
constraint
program
lnc
page
encyclopedia
music
improvis
nielsen
palamidessi
valencia
tempor
concurr
constraint
program
denot
logic
applic
nordic
journal
comput
constraint
calculu
sccc
carlo
olart
camilo
rueda
gerardo
sarria
mauricio
toro
frank
valencia
concurr
constraint
model
music
interact
gérard
assayag
charlott
truchet
editor
constraint
program
music
chapter
page
wiley
hoboken
faust
soft
ieee
multimedia
jorg
pérez
camilo
rueda
probabl
time
concurr
constraint
program
maria
garcia
banda
enrico
pontelli
editor
logic
program
internatino
confer
iclp
udin
itali
decemb
proceed
volum
lectur
note
comput
scienc
page
pntcc
probabl
anna
philipp
mauricio
toro
process
order
process
calculu
ecolog
model
proceed
mokmasd
lnc
page
springer
anna
philipp
mauricio
toro
margarita
antonaki
simul
verif
process
calculu
ecolog
model
scientif
annal
comput
scienc
confer
san
francisco
msp
proceed
intern
comput
music
viswanath
ramachandran
pascal
van
hentenryck
increment
algorithm
constraint
solv
entail
ration
tree
proceed
confer
foundat
softwar
technolog
theoret
comput
scienc
page
london
internet
andrea
rossberg
guido
tack
leif
kornstaedt
statu
report
hot
pickl
serv
claudio
russo
derek
dreyer
editor
acm
sigplan
workshop
page
acm
peter
van
roy
editor
multiparadigm
program
second
intern
confer
moz
charleroi
belgium
octob
revis
select
invit
paper
volum
lectur
note
comput
scienc
springer
ccp
soft
puckett
pure
data
proceed
intern
comput
music
puckett
apel
zicarelli
audio
analysi
tool
alberto
riasco
interview
music
improvis
videorecord
rueda
valencia
valid
model
music
problem
camilo
rueda
carlo
olart
use
stochast
ntcc
model
biolog
camilo
rueda
research
report
technic
report
ircam
pari
camilo
rueda
frank
valencia
tempor
concurr
constraint
calculu
vijay
saraswat
concurr
constraint
program
mit
press
gerardo
sarria
formal
model
time
music
process
phd
thesi
franc
camilo
rueda
gérard
assayag
shlomo
dubnov
concurr
constraint
factor
oracl
model
music
improvis
xxxii
conferencia
latinoamericana
informtica
clei
santiago
chile
aot
system
clei
latinoamerican
confer
informat
audio
process
framework
smc
camilo
rueda
frank
valencia
formal
time
music
process
tempor
concurr
constraint
program
calculu
proc
music
constraint
workshop
universidad
del
vall
colombia
christian
schult
program
deep
concurr
constraint
combin
practic
aspect
declar
languag
second
intern
workshop
padl
volum
lectur
note
comput
scienc
page
verlag
jeffrey
mark
siskind
david
allen
mcallest
nondeterminist
lisp
substrat
constraint
logic
program
proceed
nation
confer
artifici
intellig
juli
mauricio
toro
explor
possibl
limit
concurr
program
multimedia
interact
graphic
represent
solv
music
csp
technic
report
ircam
pari
franc
mauricio
toro
probabilist
extens
factor
oracl
model
music
improvis
master
thesi
pontificia
universidad
javeriana
cali
colombia
mauricio
toro
toward
correct
effici
implement
simul
verif
tool
probabilist
ntcc
technic
report
pontificia
universidad
javeriana
may
mauricio
toro
structur
interact
music
score
manuel
hermenegildo
torsten
schaub
editor
technic
commun
intern
confer
logic
program
iclp
juli
edinburgh
scotland
volum
lipic
page
schloss
dagstuhl
fuer
informatik
mauricio
toro
structur
interact
score
simpl
structur
descript
multimedia
scenario
capabl
implement
formal
semant
phd
thesi
univeristé
bordeaux
franc
mauricio
toro
carlo
agón
gérard
assayag
camilo
rueda
ntccrt
concurr
constraint
framework
interact
proc
icmc
montreal
canada
mauricio
toro
myriam
concurr
constraint
condit
branch
interact
score
proc
smc
barcelona
spain
mauricio
toro
myriam
baltazar
model
interact
score
tempor
constraint
condit
branch
proc
journé
informatiqu
music
jim
may
mauricio
toro
myriam
julien
castet
extens
interact
score
multimedia
scenario
tempor
relat
micro
macro
control
proc
sound
music
comput
smc
copenhagen
denmark
juli
mauricio
toro
structur
interact
music
score
corr
avail
mauricio
toro
myriam
camilo
rueda
formal
semant
interact
music
score
framework
design
specifi
properti
execut
interact
scenario
journal
mathemat
music
mauricio
toro
anna
philipp
sair
arboleda
carlo
vélez
maría
puerta
semant
process
calculu
ecolog
model
technic
report
depart
informat
system
universidad
eafit
http
mauricio
toro
anna
philipp
christina
kassara
spyro
sfenthouraki
synchron
parallel
composit
process
calculu
ecolog
model
gabriel
ciobanu
dominiqu
méri
editor
proceed
intern
colloquium
theoret
aspect
comput
ictac
bucharest
romania
septemb
volum
lectur
note
comput
scienc
page
springer
ltl
theor
comput
frank
valencia
decid
time
ccp
process
appendix
algorithm
follow
present
four
algorithm
factor
oracl
algorithm
algorithm
calcul
context
first
approach
extend
algorithm
probabilist
choic
exampl
current
dynam
algorithm
factor
oracl
algorithm
algorithm
build
present
creat
new
state
creat
new
transit
label
transit
creat
new
transit
els
lead
transit
return
oracl
creat
oracl
one
singl
state
oracl
oracl
theorem
complex
time
space
factor
oracl
algorithm
calcul
context
follow
present
algorithm
calcul
context
preserv
linear
time
space
complex
taken
algorithm
add
new
symbol
newaddlett
oracl
creat
new
state
undefin
els
lr
lengthreppeatedsuffix
return
oracl
find
length
repeat
suffix
lengthreppeatedsuffix
return
return
lengthcommonsuffix
find
common
suffix
lengthcommonsuffix
return
els
return
exampl
current
dynam
algorithm
exampl
execut
current
dynam
algorithm
fig
present
chapter
sequenc
figur
current
dynam
previou
approach
model
follow
present
previou
approach
model
probabilist
choic
chang
attribut
note
improvis
probabilist
choic
discard
compat
hand
chang
pitch
durat
improvis
discard
suitabl
music
genr
music
genr
base
music
scale
requir
elabor
train
extens
probabilist
choic
idea
behind
extens
chang
valu
leav
state
ad
new
transit
leav
state
addit
choos
transit
improvis
phase
necessari
chang
valu
transit
leav
state
poss
big
problem
chang
valu
chang
complex
transit
leav
state
algorithm
linear
quadrat
time
reason
extens
discard
ad
new
transit
let
take
valu
rang
constant
regul
prioriti
new
transit
ad
figur
repres
process
ad
new
transit
figur
ad
new
transit
choos
transit
improvis
let
take
valu
rang
constant
regul
chang
probabl
choos
transit
process
chang
probabl
choos
transit
repres
figur
figur
choos
transit
improvis
pitch
variat
idea
find
scale
user
play
base
supposit
gener
new
pitch
belong
scale
two
problem
first
necessari
calcul
scale
user
play
second
necessari
rank
note
scale
give
higher
prioriti
note
scale
other
probabl
certain
music
scale
order
know
music
scale
improvis
learn
user
count
note
play
user
contain
scale
consid
five
type
scale
use
western
music
major
minor
pentaton
major
harmon
minor
harmon
scale
correspond
therefor
consid
differ
scale
goal
find
scale
user
play
instanc
fragment
happi
birthday
fig
analyz
possibl
scale
found
multipl
scale
result
show
tabl
differenti
major
major
harmon
minor
tri
rank
degre
scale
multipli
degre
scale
factor
partial
solv
problem
differenti
among
scale
valu
factor
calcul
would
requir
addit
train
specif
music
genr
reason
discard
develop
extens
scale
major
minor
major
harmon
minor
pentaton
major
formula
result
tabl
automat
find
scale
happi
birthday
fragment
addit
idea
compat
music
genr
base
music
scale
propos
durat
variat
order
preserv
style
learn
go
replac
note
durat
sequenc
note
alreadi
play
user
whose
total
durat
equal
durat
instanc
happi
birthday
fragment
replac
sequenc
alreadi
play
preserv
origin
durat
case
previou
prototyp
ntcc
interpret
develop
ntccrt
explor
combin
program
languag
common
lisp
concurr
model
thread
driven
program
first
problem
face
design
interpret
interfac
gecod
common
lisp
sinc
openmus
written
common
lisp
first
redesign
gecol
librari
work
gecod
current
version
gecod
gecol
opensourc
interfac
gecod
origin
develop
killian
sprote
unfortun
gecol
still
api
gecol
reason
use
requir
deep
knowledg
gecod
difficult
syntax
fix
inconveni
decid
upgrad
gelisp
librari
origin
develop
rueda
gecod
gecod
success
use
librari
solv
constraint
satisfact
problem
csp
comput
music
domain
librari
easi
use
could
foundat
new
version
ntccrt
thread
interpret
lisp
use
gecol
develop
prototyp
ntcc
interpret
lispwork
profession
use
lispwork
process
base
pthread
mac
similar
way
made
anoth
interpret
use
gecod
pthread
concurr
control
thread
prototyp
tell
agent
model
thread
ad
constraint
store
access
control
lock
hand
process
thread
wait
store
free
ask
condit
deduc
store
deduc
condit
execut
continu
els
keep
ask
fig
condit
process
repres
boolean
variabl
link
reifi
propag
fortun
gecod
provid
reifi
propag
constraint
use
multimedia
interact
equal
boolean
constraint
figur
thread
ntcc
interpret
use
lispwork
use
sinc
gecod
protect
access
store
lock
synchron
access
gecod
librari
support
concurr
access
variabl
function
howev
still
problem
time
want
ask
condit
deduc
store
calcul
fixpoint
propag
gecod
lazi
act
demand
drawback
thread
implement
lispwork
overhead
calcul
fixpoint
time
want
queri
condit
deduc
make
extens
use
fixpoint
would
ineffici
even
use
effici
lightweight
thread
librari
boost
http
interpret
lisp
discard
thread
model
found
concurr
model
give
better
perform
chose
program
implement
next
prototyp
model
good
ntcc
interpret
use
synchron
oper
synchron
made
ask
process
unless
use
constraint
entail
reader
may
see
comparison
prototyp
thread
prototyp
chapter
prototyp
work
simpl
way
event
queue
ntcc
process
process
repres
event
dispatch
handl
event
handler
event
check
boolean
variabl
repres
wait
condit
assign
assign
add
event
queue
els
check
valu
true
add
continu
event
event
queue
otherwis
action
taken
hand
handler
tell
event
add
constraint
store
final
handler
parallel
event
add
event
queue
fig
use
program
led
faster
easier
implement
ntcc
approach
present
howev
realiz
instead
creat
handler
tell
ask
parallel
dispatch
process
event
could
improv
interpret
perform
take
advantag
dispatch
event
queue
provid
gecod
schedul
propag
encod
ntcc
process
gecod
propag
figur
ntcc
interpret
use
program
gecol
applic
ran
ntccrt
section
present
applic
ran
ntccrt
besid
ccfomi
applic
specifi
use
graphic
interfac
provid
openmus
test
pure
data
use
extern
gener
ntccrt
detail
obtain
dine
philosoph
synchron
multipl
oper
easi
task
instanc
consid
problem
dine
philosoph
propos
edsger
dijkstra
consist
philosoph
sit
circular
tabl
chopstick
locat
philosoph
think
get
hungri
get
hungri
take
control
chopstick
immedi
left
right
eat
done
eat
restart
think
dine
philosoph
problem
mention
constraint
philosoph
talk
requir
chopstick
eat
furthermor
solut
problem
must
allow
deadlock
could
happen
philosoph
take
chopstick
wait
forev
chopstick
releas
addit
must
allow
starvat
could
happen
one
philosoph
never
abl
eat
propos
solut
problem
philosoph
use
ntcc
formal
synchron
made
reason
inform
entail
deduc
store
inform
deduc
use
unless
agent
way
simpl
model
problem
synchron
made
declar
recurs
definit
philosoph
repres
philosoph
live
forev
philosoph
three
differ
state
think
hungri
eat
philosoph
think
eat
state
choos
determinist
chang
next
state
remain
state
next
mean
choos
think
hungri
eat
think
hand
philosoph
hungri
state
wait
control
first
chopstick
left
even
number
right
odd
number
soon
control
first
chopstick
wait
control
second
chopstick
control
chopstick
chang
eat
state
next
time
unit
formal
definit
philosoph
next
tell
tell
next
tell
unless
next
tell
tell
tell
unless
next
tell
tell
next
tell
tell
tell
tell
tell
tell
tell
tell
tell
tell
next
philosoph
chopstick
process
choos
determinist
one
philosoph
wait
control
control
process
chopstick
unless
next
donext
tell
next
chosptick
final
system
model
philosoph
chopstick
run
parallel
philosoph
start
life
think
state
chopstick
free
system
philosoph
chopstick
implement
figur
show
program
philosoph
repres
bang
graphic
object
design
send
messag
user
click
receiv
messag
anoth
object
concurr
control
made
ntccrt
extern
philosoph
start
eat
ntccrt
extern
send
messag
bang
chang
color
chopstick
repres
commentari
simplic
figur
synchron
dine
philosoph
use
ntccrt
extern
signal
process
ntcc
use
past
audio
process
framework
work
valencia
rueda
show
model
formal
give
compact
precis
definit
audio
stream
system
argu
possibl
model
audio
system
prove
tempor
properti
use
tempor
logic
associ
ntcc
propos
associ
process
current
sampl
sequenti
stream
unfortun
practic
possibl
sinc
requir
execut
time
unit
per
second
process
audio
stream
addit
pose
problem
find
constraint
system
appropri
process
signal
anoth
approach
give
formal
semant
audio
process
visual
audio
process
languag
faust
faust
semant
base
algebra
block
diagram
give
formal
precis
mean
oper
program
faust
also
interfac
approach
differ
sinc
use
ntcc
program
extern
max
synchron
graphic
object
charg
audio
video
midi
process
instanc
ntcc
extern
decid
trigger
graphic
object
charg
appli
delay
filter
audio
stream
allow
graphic
object
appli
filter
audio
stream
delay
filter
finish
work
illustr
idea
consid
system
compos
collect
process
graphic
object
appli
filter
object
midi
audio
video
stream
process
work
object
anoth
process
work
done
process
activ
condit
input
true
system
variabl
repres
identifi
process
work
object
repres
object
finish
work
valu
updat
time
unit
inform
environ
repres
condit
necessari
launch
process
base
inform
receiv
environ
final
repres
set
process
wait
work
object
object
repres
idleobject
busyobject
definit
object
idl
non
determinist
choos
process
variabl
remain
busi
constraint
deduc
store
formal
definit
idleobject
next
busyobject
unless
next
idleobject
tell
busyobject
idleobject
unless
next
busyobject
process
work
object
repres
follow
definit
process
idl
deduc
base
inform
environ
idleprocess
waitprocess
unless
next
idleprocess
process
wait
inform
launch
deduc
store
control
object
go
busi
state
waitingprocess
bussyprocess
unless
next
waitingprocess
tell
process
busi
deduc
base
inform
environ
process
finish
work
object
associ
busyprocess
idleprocess
unless
next
busyprocess
system
model
situat
object
process
implement
extern
adapt
kind
object
process
repres
graphic
object
ntcc
trigger
execut
process
receiv
input
process
done
anoth
input
condit
execut
process
satisfi
system
idleobject
idleobject
idleprocess
idleprocess
idleprocess
idleprocess
implement
system
describ
openmus
use
graphic
box
provid
present
graphic
descript
process
idleprocess
busyprocess
waitingprocess
see
fig
figur
write
synchron
ntccrt
extern
openmus
find
path
graph
concurr
follow
describ
applic
use
ntccrt
find
concurr
path
graph
idea
one
ntccrt
process
edg
send
forward
signal
successor
back
signal
predecessor
receiv
back
signal
forward
signal
tell
store
path
add
set
finit
set
variabl
contain
successor
vertex
propag
finish
iter
result
set
find
differ
path
instanc
build
path
graph
get
variabl
formal
definit
repres
edg
graph
tell
tell
tell
tell
main
process
find
path
vertex
graph
repres
edg
set
pair
repres
graph
edg
main
process
call
concurr
send
forward
signal
process
form
back
signal
process
form
notic
send
receiv
signal
greatli
simplifi
use
tell
ask
ntcc
store
main
edg
tell
tell
exampl
follow
give
intuit
system
work
find
path
vertex
fig
start
send
forward
signal
process
form
back
signal
process
form
soon
receiv
back
signal
forward
signal
tell
store
path
tell
figur
exampl
find
path
graph
concurr
addit
reader
may
notic
path
vertex
figur
exampl
back
signal
sent
process
receiv
process
therefor
none
receiv
back
forward
signal
calcul
fixpoint
ask
constraint
system
valu
sinc
variabl
bound
infer
path
figur
exampl
find
path
graph
concurr
oper
semant
ntcc
pntcc
oper
semant
defin
state
program
execut
semant
call
way
dynam
see
system
sequenc
oper
occurr
oper
call
transit
transit
system
structur
set
configur
transit
relat
notat
defin
transit
configur
configur
transit
often
divid
intern
extern
depend
system
behavior
normal
extern
transit
denot
oper
semant
ntcc
follow
present
descript
given
rule
ob
say
observ
transit
label
obtain
perform
sequenc
intern
transit
initi
configur
final
configur
intern
evolut
possibl
residu
process
execut
next
time
interv
equival
futur
process
defin
obtain
remov
summat
trigger
activ
within
current
time
interv
local
inform
store
unfold
within
next
unless
express
unfold
specifi
evolut
across
time
interv
process
form
next
unless
next
follow
present
intern
reduct
present
observ
reduct
repres
relat
smallest
obey
form
rule
state
whenev
given
condit
obtain
cours
deriv
specifi
conclus
may
taken
grant
well
tell
sum
par
unl
loc
star
rep
str
ob
futur
function
let
partial
function
defin
sorri
ignor
case
case
oper
semant
pntcc
follow
present
descript
given
pntcc
observ
transit
assum
particular
intern
sequenc
lead
state
comput
possibl
obtain
remov
summat
trigger
activ
local
inform
store
unfold
within
next
unless
next
present
intern
reduct
present
observ
reduct
repres
tell
psum
par
unl
loc
rep
str
ob
futur
function
let
partial
function
defin
sorri
ignor
case
case
test
ccfomi
detail
detail
inform
test
found
http
test
model
find
path
graph
detail
detail
inform
test
found
http
