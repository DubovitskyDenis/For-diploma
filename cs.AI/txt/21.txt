geotexttagger
high-precision
location
tagging
textual
documents
using
natural
language
processing
approach
shawn
brunsting1
hans
sterck*2
remco
dolman3
teun
van
sprundel3
centre
computational
mathematics
university
waterloo
canada
school
mathematical
sciences
monash
university
australia
spotzi
canada
ltd
kitchener
canada
*hans.desterck
monash.edu
abstract
location
tagging
also
known
geotagging
geolocation
process
assigning
geographical
coordinates
input
data
paper
present
algorithm
location
tagging
textual
documents
approach
makes
use
previous
work
natural
language
processing
using
state-of-the-art
part-of-speech
tagger
named
entity
recognizer
find
blocks
text
may
refer
locations
knowledge
base
openstreatmap
used
find
list
possible
locations
blocks
text
finally
one
location
chosen
block
text
assigning
distance-based
scores
location
repeatedly
selecting
location
block
text
best
score
tested
geolocation
algorithm
wikipedia
articles
topics
well-defined
geographical
location
geotagged
articles
authors
classification
approaches
achieved
median
errors
low
however
maximum
accuracy
approaches
limited
class
size
future
work
may
yield
significant
improvement
algorithm
tags
location
block
text
identified
possible
location
reference
meaning
text
typically
assigned
multiple
tags
considered
tag
highest
distance-
based
score
achieved
10th
percentile
error
490
metres
median
error
kilometres
wikipedia
dataset
used
considered
five
location
tags
greatest
scores
found
articles
assigned
least
one
tag
within
8.5
kilometres
article
author-assigned
true
location
also
tested
approach
set
twitter
messages
tagged
location
message
sent
dataset
challenging
geotagged
wikipedia
articles
twitter
texts
shorter
tend
contain
unstructured
text
may
contain
information
location
message
sent
first
place
nevertheless
make
interesting
observations
potential
use
geolocation
algorithm
type
input
explain
use
spark
framework
data
analytics
collect
process
test
data
general
classification-based
approaches
location
tagging
may
reaching
upper
limit
accuracy
precision-focused
approach
high
accuracy
texts
shows
significant
potential
improvement
overall
introduction
paper
explores
problem
extracting
location
information
text
goal
assign
high
precision
geographical
coordinates
places
mentioned
texts
1/35
various
sources
section
discusses
background
information
previous
work
area
location
tagging
literature
also
referred
geotagging
geolocation
section
describes
detail
geolocation
algorithm
developed
approach
problem
test
algorithm
using
geotagged
wikipedia
articles
section
geotagged
twitter
messages
section
finally
summarize
results
discuss
future
work
section
appendix
lists
external
software
used
implementation
project
appendix
describes
wikipedia
test
data
section
obtained
appendix
describes
twitter
test
data
section
composed
provides
links
code
data
available
download
online
1.1
previous
work
using
classification
approaches
studies
location
tagging
formulate
classification
problem
use
various
machine
learning
approaches
solve
classification
problems
begin
defined
set
classes
location
tagging
classes
take
many
forms
including
cities
countries
areas
within
range
latitude
longitude
coordinates
goal
classification
problem
assign
class
ranked
list
likely
classes
text
note
problem
obviously
relevant
texts
indeed
talk
specific
location
set
locations
one
attempt
use
resulting
algorithms
geotag
text
example
several
papers
location
tagging
literature
use
test
data
sets
wikipedia
articles
topics
well-defined
geographical
location
wikipedia
authors
added
geographical
location
tag
article
geotagged
wikipedia
articles
geographical
coordinates
primary
location
tag
added
authors
considered
single
true
location
text
note
clearly
text
may
mention
multiple
locations
data
set
used
train
machine
learning
models
test
accuracy
respect
true
location
measure
wing
baldridge
created
classes
using
simple
geodesic
grids
varying
sizes
example
one
grids
divided
surface
earth
regions
regions
class
classification
problem
compared
different
models
various
grid
sizes
tested
models
using
geotagged
wikipedia
articles
measured
distance
article
true
location
location
predicted
model
best
model
achieved
median
distance
11.8
roller
realized
defining
classes
using
uniform
latitude
longitude
grid
sensitive
distribution
documents
across
earth
looked
building
adaptive
grid
attempts
define
classes
class
similar
number
training
documents
also
tested
models
using
geotagged
wikipedia
articles
found
median
error
11.0
improvement
previous
work
han
focused
location
tagging
twitter
messages
attempted
find
primary
home
location
user
city
tweets
occur
known
training/testing
data
set
assembling
tweets
single
document
used
input
models
classes
major
cities
along
surrounding
area
best
model
used
text
tweet
obtained
median
error
170
obtained
much
greater
accuracy
incorporated
additional
information
home
location
listed
user
profile
type
data
available
general
text
geolocation
one
major
challenges
twitter
messages
unstructured
nature
tweets
often
contain
spelling
errors
abbreviations
grammar
mistakes
make
difficult
interpret
furthermore
early
work
project
discovered
2/35
geotagged
tweets
tweets
contain
metadata
gps
coordinates
location
tweet
sent
contain
little
geographic
information
text
means
low
threshold
maximum
accuracy
expect
achieve
attempting
apply
geolocation
algorithm
text
tweets
attempting
establish
sent
based
text
contain
1.2
drawbacks
classification
approaches
thus
decided
formulating
problem
classification
problem
would
feasible
goal
obtain
high
precision
example
text
mentions
tower
city
toronto
want
return
coordinates
building
rather
coordinates
toronto
formulating
classification
problem
level
precision
would
ultimately
require
defining
class
every
named
location
world
furthermore
apply
machine
learning
approaches
would
need
large
training
set
ideally
multiple
sample
texts
class
obtaining
training
data
would
difficult
even
data
available
would
likely
computationally
infeasible
train
model
general
want
use
approach
relies
heavily
training
data
want
location
tagger
general
possible
tagger
trained
wikipedia
articles
might
show
worse
performance
given
types
text
news
articles
tweets
acquiring
good
training
data
representative
types
texts
want
geolocate
would
difficult
abandoned
classification
approaches
turned
towards
natural
language
processing
1.3
natural
language
processing
natural
language
processing
nlp
encompasses
tasks
related
under-
standing
human
language
paper
wish
understand
location
references
text
natural
apply
nlp
techniques
problem
part
speech
tagging
part-of-speech
pos
tagging
process
assigning
part-of-speech
tags
words
text
tagset
may
vary
language
type
text
typically
includes
tags
nouns
verbs
adjectives
assigning
tags
important
step
towards
understanding
text
many
nlp
tasks
stanford
natural
language
processing
group
provides
state-of-the-art
pos
tagger
based
research
toutanova
use
various
models
observe
features
words
text
capitalization
example
predict
likely
part-of-speech
tag
word
train
models
using
large
set
annotated
articles
wall
street
journal
software
two
main
types
models
one
types
called
left-3-words
model
tag
applied
word
model
influenced
tags
assigned
previous
words
sentence
type
model
known
bidirectional
model
tags
models
influenced
tags
sides
word
previous
words
makes
models
complex
slight
accuracy
improvement
left-3-words
models
cost
order
magnitude
longer
running
time
project
use
stanford
pos
tagger
one
pre-trained
left-3-words
models
see
also
appendix
geolocation
algorithm
uses
software
discussed
section
2.3.
named
entity
recognition
named
entity
recognizer
ner
finds
proper
nouns
text
determines
type
entity
noun
refers
valuable
tool
approach
location
tagging
primarily
looking
locations
named
3/35
entities
text
stanford
natural
language
processing
group
also
provides
ner
based
work
finkel
software
uses
conditional
random
field
model
identify
different
classes
named
entities
text
pre-trained
model
used
paper
attempts
identify
named
entity
location
person
organization
see
appendix
section
2.3
algorithm
use
entities
identified
locations
software
named
entity
disambiguation
completing
ner
task
often
ambiguity
example
ner
software
determines
text
mentions
location
called
london
refer
city
city
ontario
choosing
correct
interpretation
called
disambiguation
habib
explored
extraction
disambiguation
steps
named
entity
recognition
along
link
steps
discovered
feedback
loop
results
disambiguation
step
used
improve
extraction
step
occurs
disambiguation
step
help
identify
false
positives
words
identified
named
entity
extraction
step
true
named
entities
named
entities
refer
locations
called
toponyms
major
portion
habib
work
discusses
extraction
disambiguation
toponyms
semi-formal
text
disambiguated
toponymns
vacation
property
descriptions
determine
country
property
located
country-level
locations
provide
level
precision
desire
project
work
served
inspiration
many
steps
algorithm
present
section
generally
named
entity
disambiguation
active
topic
research
throughout
past
decade
see
e.g.
8â€“12
references
therein
example
aida
system
general
framework
collective
disambiguation
exploiting
prior
probability
entity
mentioned
similarity
context
mention
candidates
coherence
among
candidate
entities
mentions
together
aida
uses
knowledge
bases
dbpedia
yago
employs
graph-
based
algorithm
approximate
best
joint
mention-entity
mapping
compared
general
named
entity
disambiguation
frameworks
aida
contribution
paper
present
part
new
elements
broader
geolocation
algorithm
new
named
entity
disambiguation
approach
specifically
suited
disambiguating
potential
location
references
achieves
high
accuracy
relying
new
distance-based
scoring
functions
measure
coherence
candidate
locations
distance-based
scoring
functions
used
disambiguate
multiple
possible
interpretations
word
sequences
multiple
possible
locations
potential
location
reference
approach
uses
openstreetmap
knowledge
base
specific
geolocation
provides
high-precision
versatile
method
geolocation
texts
methods
given
segment
text
want
find
locations
mentioned
text
example
text
states
bob
drove
waterloo
toronto
want
find
names
waterloo
toronto
determine
locations
meant
words
waterloo
mean
city
ontario
iowa
belgium
somewhere
else
mention
toronto
refer
another
city
ontario
suggests
correct
answer
waterloo
ontario
type
reasoning
developed
geolocation
algorithm
formally
described
section
section
2.1
gives
high-level
overview
algorithm
section
2.2
defines
terminology
use
rest
paper
section
2.3
describes
names
like
waterloo
toronto
extracted
text
using
part-of-speech
tagging
4/35
named
entity
recognition
section
2.4
describes
discover
geographic
names
like
waterloo
refer
multiple
locations
e.g.
ontario
iowa
belgium
searching
knowledge
base
section
2.5
describes
disambiguate
possible
locations
name
e.g.
determine
waterloo
toronto
refer
cities
ontario
multiple
interpretations
word
sequences
finally
complete
geolocation
algorithm
summarized
section
2.6
2.1
overview
algorithm
gives
general
high-level
overview
steps
geolocation
algorithm
propose
paper
algorithm
simplified
overview
geolocation
algorithm
extract
potential
location
references
text
described
detail
section
2.3
search
potential
location
reference
knowledge
base
give
list
result
locations
possible
matches
reference
described
section
2.4
potential
location
reference
determine
knowledge
base
results
likely
refers
resolve
conflicting
interpretations
sequences
words
called
disambiguation
described
detail
section
2.5.
section
2.2
define
terminology
allow
write
algorithm
precisely
section
2.6
summarize
section
give
detailed
version
algorithm
2.2
terminology
continue
description
geolocation
algorithm
need
precisely
define
terminology
consider
example
following
short
text
let
shopping
conestoga
mall
waterloo
waterloo
lies
london
guelph.
text
talks
three
cities
province
ontario
canada
shopping
mall
one
three
cities
term
word
sequence
adjacent
words
text
sequence
words
occurs
multiple
times
text
every
occurrence
considered
different
term
algorithm
initially
consider
sequence
words
occurs
text
potential
location
reference
i.e.
initially
consider
terms
sequences
words
length
one
two
three
etc
using
part-of-speech
tagging
named
entity
recognition
set
rules
initial
full
set
terms
associated
locations
sentence
reduced
smaller
set
terms
judged
potential
location
references
reduced
term
set
called
text
example
term
set
would
conestoga
mall
conestoga
mall
waterloo
waterloo
london
guelph
location
sentence
also
attached
term
omit
show
simplicity
word
sequence
may
multiple
possible
interpretations
example
word
sequence
conestoga
mall
two-word
term
conestoga
mall
may
refer
location
alternatively
author
text
may
intended
either
separate
terms
conestoga
mall
refer
location
5/35
allow
disambiguation
step
decide
two
mutually
exclusive
interpretations
word
sequence
conestoga
mall
three
terms
conestoga
mall
conestoga
mall
initially
retained
term
set
say
word
sequence
conestoga
mall
term
conestoga
mall
conflicts
overlaps
terms
conestoga
mall
disambiguation
step
choose
one
mutually
exclusive
interpretations
eliminating
conflicting
terms
using
approach
employs
distance-based
scoring
functions
say
term
corresponds
phrase
every
phrase
recorded
text
set
unique
phrases
text
called
word
sequences
occur
multiple
times
text
occur
text
example
term
set
corresponding
phrase
set
would
conestoga
mall
conestoga
mall
waterloo
london
guelph
second
occurrence
waterloo
removed
note
|p|
|t|
result
single
geographical
location
listed
knowledge
base
phrase
seek
set
results
knowledge
base
term
let
tphr
phrase
associated
term
rtphr
set
results
phrase
corresponding
term
shorthand
also
use
instead
rtphr
terms
occur
multiple
times
text
assume
refer
potential
location
example
text
two
occurrences
waterloo
assume
terms
refer
location
however
terms
phrases
waterloo
ontario
waterloo
belgium
assumed
refer
location
different
phrases
therefore
disambiguation
step
attempt
determine
single
likely
location
phrase
using
approach
employs
distance-based
scoring
functions
give
overview
geolocation
algorithm
using
terminology
algorithm
re-writing
algorithm
using
terms
defined
algorithm
technical
overview
geolocation
algorithm
find
terms
text
potential
location
references
done
using
part-of-speech
tagging
named
entity
recognition
gives
sets
phrase
use
search
query
knowledge
base
results
query
set
reduce
set
remove
terms
conflict
update
set
accordingly
reflect
changes
phrase
match
single
result
done
assigning
distance-based
scores
result
every
term
selecting
results
greatest
score
greedy
iterative
fashion
2.3
location
extraction
extraction
phase
algorithm
uses
part-of-speech
pos
tagger
named
entity
recognizer
ner
stanford
described
section
1.3.
entire
text
tagged
models
based
output
taggers
algorithm
creates
set
terms
represents
potential
location
references
text
consider
development
approach
initially
guided
short
unstructured
texts
coming
classified
ads
rental
housing
found
relying
ner
tags
provide
sufficient
accuracy
indeed
ner
perfect
could
6/35
pos
tag
nns
nnp
nnps
pos
tag
description
coordinating
conjunction
cardinal
number
preposition
subordinating
conjunction
adjective
noun
singular
mass
noun
plural
proper
noun
singular
proper
noun
plural
grouping
conjunction
adjective
preposition
adjective
noun
noun
noun
noun
preposition
table
part
speech
tags
used
geolocation
algorithm
simply
use
ner
find
locations
text
step
algorithm
would
complete
instead
approach
supplements
ner
tags
pos
tagger
considers
potential
location
references
ones
provided
ner
alone
motivation
heuristic
algorithmic
choices
made
section
illustrated
example
end
section
tagging
text
pos
tagger
stanford
assigns
tags
word
text
full
list
possible
tags
given
algorithm
looks
subset
tags
relevant
problem
tags
grouped
together
considered
equivalent
algorithm
pos
tags
used
grouped
described
table
ner
tags
word
text
one
four
possibilities
location
person
organization
meaning
initially
extract
relevant
terms
see
words
location
tag
ner
considered
equivalent
words
noun
tag
pos
tagger
however
reducing
size
term
set
subsequent
step
give
preference
words
location
tags
ner
extracting
terms
word
text
tagged
pos
tagger
ner
build
set
terms
holds
potential
location
references
word
sequence
text
considered
potential
location
reference
satisfies
two
properties
words
sequence
must
tagged
noun
adjective
tag
table
location
tag
ner
sequence
must
contain
least
one
word
noun
tag
pos
tagger
location
tag
ner
sequences
adjectives
considered
details
properties
chosen
described
rest
section
note
remainder
section
noun
refers
word
tagged
location
ner
one
noun
tags
table
pos
tagger
adjectives
locations
new
york
multiple
words
name
word
tagged
individually
pos
tagger
ner
need
consider
multi-word
possibilities
building
multiple
nouns
occur
adjacent
text
know
nouns
refer
multiple
locations
one
location
add
possibilities
set
resolve
conflicts
section
2.5.
example
algorithm
discovers
phrase
new
york
city
text
three
words
tagged
noun
note
pos
actually
tags
new
noun
7/35
due
capitalization
algorithm
would
add
six
terms
set
new
york
city
new
york
york
city
new
york
city
development
geolocation
algorithm
discovered
location
references
contain
words
tagged
adjectives
example
given
text
georgian
college
pos
tagger
decides
georgian
adjective
college
noun
word
georgian
part
name
even
though
tagged
noun
algorithm
modified
consider
adjectives
part
multi-word
phrase
nouns
however
consider
phrases
contain
adjectives
otherwise
could
simply
add
adjectives
noun
group
table
georgian
college
example
college
georgian
college
added
also
text
contains
street
address
want
street
number
part
term
allow
greater
precision
finding
proper
location
numbers
treated
way
adjectives
reason
example
text
200
university
avenue
would
generate
five
terms
university
avenue
university
avenue
200
university
200
university
avenue
note
set
finalized
yet
terms
added
section
may
removed
efficiency
reasons
described
next
removing
terms
amount
time
required
knowledge
base
searches
section
2.4
grows
linearly
|p|
amount
time
required
disambigua-
tion
section
2.5
cubic
|t|
furthermore
including
many
terms
true
location
references
may
make
difficult
disambiguate
properly
therefore
advantageous
keep
size
small
first
step
reducing
check
whether
terms
contain
words
tagged
locations
ner
model
location
tags
word
term
keep
terms
contain
least
one
word
tagged
location
others
removed
set
idea
behind
ner
finds
words
locations
terms
words
best
bet
successful
disambiguation
geolocation
words
tagged
location
entire
text
geolocation
algorithm
must
rely
solely
results
pos
tagger
however
set
nouns
text
quite
large
still
wish
filter
case
location
tags
found
next
step
look
terms
occurred
prepositions
many
prepositions
describe
spatial
relationships
strong
indicators
term
refer
location
example
text
bob
travelled
waterloo
contains
preposition
case
preposition
indicates
waterloo
location
however
prepositions
describe
spatial
relationships
also
temporal
ones
example
bob
lived
five
years
uses
temporal
preposition
type
preposition
included
algorithm
implementation
used
paper
explicitly
ignored
word
preposition
observed
increase
accuracy
development
examples
classified
ads
prepositions
identified
pos
tagger
retained
future
work
could
refine
list
exclude
non-spatial
prepositions
text
contains
terms
occur
prepositions
words
tagged
location
terms
retained
others
discarded
term
considered
preposition
words
preposition
term
tagged
tags
table
reason
conjunctions
included
table
including
conjunctions
ensures
text
guests
travelled
waterloo
toronto
consider
waterloo
toronto
finally
text
contains
location
tags
terms
follow
prepositions
terms
removed
8/35
word
ner
tag
pos
tag
pos
tag
description
beautifull
clean
house
rent
walking
distance
rvh
georgian
college
vbg
determiner
noun
singular
mass
adjective
noun
singular
mass
preposition
subordinating
conjunction
noun
singular
mass
verb
gerund
present
participle
noun
singular
mass
noun
singular
mass
coordinating
conjunction
adjective
noun
singular
mass
table
ner
pos
tags
example
text
postal
codes
development
example
texts
contained
postal
codes
postal
codes
give
precise
location
information
regular
expressions
used
find
postal
codes
match
formats
used
canada
united
states
netherlands
netherlands
included
spotzi
partner
company
paper
branch
occurrences
postal
codes
added
set
already
set
due
previous
steps
occurs
filtering
remove
terms
described
example
demonstrate
extraction
step
works
walk
example
section
short
example
used
development
geolocation
algorithm
shows
many
cases
described
previous
sections
continue
using
example
section
2.5.
text
kijiji
classifieds
listing
consists
single
sentence
beautifull
clean
house
rent
walking
distance
rvh
georgian
college.
text
properly
structured
particular
spelling
error
improper
capitalization
makes
text
challenging
first
use
ner
pos
tagger
tag
words
text
full
list
tags
example
given
table
see
ner
assigns
location
tags
text
must
rely
solely
pos
tags
next
start
building
set
take
nouns
along
adjectives
adjacent
set
corresponds
beautifull
beautifull
clean
beautifull
clean
house
clean
house
house
rent
distance
rvh
georgian
college
college
start
reduce
set
terms
contain
words
tagged
location
terms
occur
prepositions
preposition
occurs
rvh
term
rvh
remains
similarly
georgian
college
college
considered
occur
preposition
separated
preposition
tags
table
terms
phrases
beautifull
beautifull
clean
beautifull
clean
house
clean
house
house
distance
discarded
occur
preposition
term
rent
occurs
preposition
described
section
2.3
assumed
spatial
preposition
rent
also
discarded
9/35
set
corresponds
final
set
rvh
georgian
college
college
set
used
next
step
geolocation
algorithm
2.4
searching
knowledge
base
generate
set
set
corresponds
next
step
search
knowledge
base
openstreetmap
used
knowledge
base
paper
openstreetmap
data
queried
using
tool
called
nominatim
https
//nominatim.openstreetmap.org/
openstreetmap
database
contains
mapping
data
entire
globe
including
roadways
cities
points
interest
data
created
corrected
large
community
contributors
freely
available
nominatim
open-
source
tool
allows
users
search
openstreetmap
data
using
clever
indexing
significant
amount
system
resources
nominatim
allows
queries
vast
openstreetmap
data
completed
seconds.1
nominatim
allows
number
parameters
specified
query
example
searches
limited
particular
region
country
one
also
specify
maximum
number
search
results
returned
query
paper
maximum
number
set
10.
nominatim
produce
result
phrase
discard
terms
correspond
phrase
number
results
use
results
disambiguation
step
step
algorithm
selects
phrase
correct
result
result
contains
latitude
longitude
coordinates
used
calculate
distances
results
described
section
2.5.
another
field
included
nominatim
search
result
called
impor-
tance
field
well-documented
reading
source
code
appears
number
different
factors
used
calculate
importance
factors
include
type
location
building
city
country
etc
pagerank
wikipedia
article
location
applicable
string
similarity
query
string
name
location
use
importance
field
tie-breaker
steps
disambiguation
algorithm
section
2.5.
also
used
nominatim
sort
results
nominatim
finds
results
query
return
important
results
example
continue
example
section
2.3.
last
saw
example
three
terms
corresponding
phrases
rvh
georgian
college
college
use
phrase
search
query
nominatim
however
example
limit
nominatim
return
maximum
three
results
phrase
instead
donated
servers
running
nominatim
free
light
use
usage
policy
prevent
users
overloading
server
usage
policy
gives
limit
one
query
per
second
geolocation
algorithm
requires
one
query
anyone
wants
use
extensively
set
nominatim
server
tests
section
use
freely
available
servers
delay
written
code
ensure
least
one
second
passed
query
sent
nominatim
meant
geolocation
algorithm
completed
much
slower
would
otherwise
saved
time
engineering
effort
required
set
nominatim
server
10/35
query
name
royal
rvh
georgian
college
victoria
regional
health
centre
georgian
college
georgian
college
college
college
college
college
results
address
latitude
longitude
201
georgian
drive
barrie
ontario
canada
georgian
drive
barrie
ontario
canada
raglan
street
collingwood
ontario
l9y3j4
canada
yonge
street
church-wellesley
village
toronto
ontario
m5b
2h4
canada
fairbanks
north
star
alaska
united
states
america
los
baËœnos
laguna
calabarzon
philippines
44.41
-79.66
44.41
-79.67
44.48
-80.19
43.66
-79.38
64.86
-147.80
14.16
121.24
table
example
nominatim
results
used
rest
paper
results
query
given
table
nominatim
found
one
result
rvh
two
georgian
college
three
college
phrase
college
would
results
increased
result
limit
2.5
disambiguation
section
describe
detail
novel
distance-based
disambiguation
procedure
works
begin
overview
approach
using
two
simple
examples
overview
distance-based
disambiguation
approach
consider
short
text
let
shopping
conestoga
mall
waterloo
waterloo
lies
london
guelph.
term
set
conestoga
mall
conestoga
mall
waterloo
waterloo
london
guelph
phrase
set
conestoga
mall
conestoga
mall
waterloo
london
guelph
disambiguation
phase
geolocation
algorithm
two
goals
first
serves
decide
mutually
exclusive
interpretations
word
sequences
i.e.
decides
terms
retain
terms
conflicting
overlapping
see
section
2.2
example
sequence
conestoga
mall
may
refer
single
location
called
conestoga
mall
alternatively
one
terms
conestoga
mall
may
refer
location
instead
disambiguation
step
select
one
conflicting
interpretations
second
phrase
use
disambiguation
step
select
one
results
result
set
processes
rely
physical
distances
result
locations
based
table
pairwise
11/35
waterloo
london
guelph
ontario
belgium
ontario
ontario
north
dakota
score
waterloo
328
6198
6096
6956
-6424
5797
1424
-103
london
6198
5797
328
5774
6655
-6102
102
1386
-181
guelph
6096
5774
102
1424
6956
6655
1386
-126
-2810
table
first
example
distance-based
disambiguation
sentence
waterloo
lies
london
guelph
total
distance
scoring
function
used
distances
computed
different
candidate
results
different
terms
text
example
tables
calculate
distance
two
results
nominatim
let
longitude
coordinates
let
latitude
coordinates
distance
calculated
6371
arccos
sin
sin
cos
cos
cos
equation
great
circle
distance
sphere
6371
mean
radius
earth
kilometres
let
first
consider
disambiguation
would
work
short
text
waterloo
lies
london
guelph
sentence
conflicting
interpretations
word
sequences
resolve
multiple
results
phrase
table
shows
mutual
distances
pairs
results
terms
term
set
waterloo
london
guelph
first
column
table
shows
first
result
waterloo
ontario
result
located
within
short
distance
ontario
results
london
guelph
course
fourth
column
shows
ontario
results
london
guelph
also
closeby
indicates
ontario
results
waterloo
london
guelph
coherent
choice
disambiguation
small
example
three
terms
two
results
easy
see
larger
problems
tens
terms
results
per
term
need
systematic
procedure
find
coherent
groups
results
use
following
systematic
approach
first
compute
result
every
term
except
term
result
shortest
distance
result
results
term
example
first
column
table
aterloo
ontario
london
=79
aterloo
ontario
guelph
=24
compute
every
result
every
term
scoring
function
value
scoring
function
measures
good
candidate
result
choice
disambiguation
simplest
scoring
function
consider
total
distance
scoring
function
given
t2âˆˆt
cid:54
scoring
function
computed
bottom
line
table
six
results
example
first
column
table
-103
total
distance
score
result
waterloo
ontario
term
waterloo
negative
sum
shortest
distances
result
waterloo
ontario
terms
london
guelph
approach
proceeds
selecting
result
overall
highest
score
closest
i.e.
smallest
sum
distances
first
disambiguation
result
example
means
result
waterloo
ontario
chosen
term
waterloo
results
waterloo
removed
table
except
result
chosen
process
repeats
scoring
functions
reduced
table
recomputed
result
next
largest
score
selected
disambiguate
next
term
manner
cid:80
12/35
ontario
results
waterloo
london
guelph
selected
practice
process
complex
see
simple
illustration
general
principle
next
consider
disambiguating
short
text
let
shopping
conestoga
mall
waterloo.
complicated
word
sequence
conestoga
mall
two
conflicting
interpretations
table
shows
mutual
distances
pairs
results
terms
term
set
waterloo
conestoga
mall
conestoga
mall
term
conestoga
mall
conflicts
overlaps
conestoga
mall
since
author
intended
locations
time
mutual
distances
computed
shortest
distances
computed
computing
scoring
functions
every
result
every
term
introduce
pair
terms
weights
used
reduce
bias
weights
calculating
scores
terms
conflict
multiple
mutually
exclusive
interpretations
need
considered
example
first
column
table
computing
scoring
function
result
waterloo
ontario
term
waterloo
add
shortest
distances
waterloo
ontario
terms
conestoga
mall
conestoga
mall
would
bias
score
since
one
two
distances
counted
given
mutually
exclusive
interpretations
word
sequence
conestoga
mall
since
correct
interpretation
chosen
yet
best
take
three
shortest
distances
account
take
weighted
average
three
distances
reduce
bias
procedure
compared
example
results
term
conestoga
mall
one
distance
scoring
function
computing
scoring
functions
results
term
e.g.
waterloo
define
weights
respect
terms
correspond
word
sequence
conflicting
interpretations
e.g.
conestoga
mall
way
sum
weights
equals
equal
weight
every
interpretation
two
interpretations
phrase
conestoga
mall
given
equal
weight
1/2
within
second
interpretation
conestoga
mall
terms
equal
weight
final
weights
1/4
mall
1/2
conestoga
mall
example
first
column
table
compute
scoring
function
result
waterloo
ontario
term
waterloo
using
weighted
distance
scoring
function
given
âˆ’279.5
result
waterloo
ontario
term
waterloo
1/4
conestoga
cid:80
resulting
t2âˆˆt
cid:54
scoring
functions
computed
terms
result
way
decide
first
disambiguation
result
greedy
fashion
highest
score
bottom
row
table
result
term
conestoga
mall
result
selected
term
simplest
algorithm
settles
time
interpretation
word
sequence
conestoga
mall
results
term
conestoga
mall
except
one
choose
removed
table
well
terms
conestoga
mall
conflict
finalizes
disambiguation
since
ontario
location
waterloo
one
closest
chosen
result
conestoga
mall
practice
weighting
procedure
significantly
complex
may
applied
modified
way
longer
sequences
words
may
larger
number
possible
interpretations
see
example
simple
illustration
general
principle
note
general
procedure
sequence
words
multiple
interpre-
tations
occurs
several
times
text
interpretation
determined
occurrence
separately
based
eliminating
overlapping
terms
approach
chosen
location
terms
text
overlap
adjacent
terms
important
disambiguating
mutually
exclusive
interpretations
contrast
phrase
occurs
several
times
text
single
location
result
selected
occurrences
phrase
13/35
14/35
term
new
york
city
terms
conflict
new
york
new
york
city
new
york
york
city
new
york
city
york
city
new
york
city
new
york
york
city
new
york
york
city
new
york
city
york
city
new
york
new
york
city
new
york
city
new
york
city
new
york
york
city
table
conflicting
terms
word
sequence
new
york
city
simplifies
implementation
follows
provide
complete
details
full
distance-based
disambiguation
procedure
multiple
scoring
functions
tested
described
giving
full
details
weights
mechanism
finally
two
algorithms
given
use
scores
perform
disambiguation
weights
weights
used
terms
set
conflict
terms
conflict
overlap
text
best
explained
detail
new
york
city
example
introduced
section
2.3.
example
extraction
step
finds
nouns
new
york
city
adjacent
text
six
terms
added
set
new
york
city
new
york
york
city
new
york
city
terms
york
new
york
conflict
text
could
meant
refer
location
called
york
different
location
called
new
york
terms
york
new
york
overlap
example
full
list
terms
conflict
given
term
provided
table
purpose
weights
define
section
properly
account
conflicting
terms
disambiguation
step
assigning
weights
conflicting
terms
allow
reduce
bias
scoring
functions
determine
interpretation
text
segment
correct
think
weight
probability
term
true
location
reference
text
given
true
location
reference
weights
defined
âˆ€t1
terms
conflict
weights
equal
remainder
section
describes
weights
calculated
terms
conflict
begin
definition
weight
case
two
terms
conflict
i.e.
overlap
text
âˆ€t1
cid:54
conflict
simply
expresses
conflicting
terms
refer
true
locations
time
means
distances
conflicting
terms
never
need
taken
account
scoring
functions
thinking
weights
probabilities
described
earlier
define
define
weight
cases
need
another
definition
conflicting
terms
appear
groups
define
group
term
smallest
set
terms
overlap
terms
i.e.
group
minimal
set
terms
terms
overlap
terms
group
group
note
iff
overlap
term
using
definition
conclude
terms
table
group
groups
disjoint
group
corresponds
segment
sequence
words
text
segments
disjoint
15/35
interpretation
terms
number
interpretation
new
york
city
new
york
city
new
york
city
new
york
city
terms
table
interpretations
new
york
city
weight
given
term
term
new
york
city
new
york
york
city
weight
weight
weight
weight
interp
interp
interp
interp
weight
1/12
1/12
1/12
1/4
1/8
1/8
1/4
1/8
1/8
1/4
1/4
1/4
5/24
1/12
5/24
1/8
1/8
1/4
terms
group
corresponding
segment
new
new
york
city
interp
total
table
weights
york
city
groups
one
term
multiple
interpretations
interpretation
group
maximal
subset
group
contains
terms
conflict
interpretation
cover
words
segment
text
must
contain
enough
terms
non-conflicting
terms
added
group.2
table
lists
four
interpretations
new
york
city
example
computing
distance-based
scores
candidate
results
term
every
group
cid:54
define
weights
respect
terms
group
every
group
weights
sum
one
element
conflict
since
cid:54
one
element
weights
defined
follows
let
number
interpretations
group
weight
1/q
let
number
terms
interpretation
weight
1/ni
interpretation
cid:88
interpretations
contain
new
york
city
example
weights
given
term
interpretation
included
last
column
table
table
continues
calculations
table
give
weights
case
term
new
york
city
group
example
table
tells
new
new
case
conflict
discussed
earlier
weight
weight
assume
text
therefore
need
calculate
weight
case
temporarily
remove
terms
conflict
change
groups
longer
longer
conflicts
finally
must
define
2in
new
york
city
example
interpretations
cover
words
segment
text
however
term
new
tagged
adjective
thus
missing
york
city
new
york
city
would
valid
interpretations
however
york
would
valid
since
term
city
still
added
16/35
terms
calculation
weights
proceeds
equation
example
suppose
want
calculate
new
new
york
new
new
york
city
terms
conflict
remove
terms
new
becomes
member
group
remaining
terms
two
interpretations
york
city
york
city
calculate
weights
find
new
york
new
new
york
city
city
new
new
scoring
functions
formulate
eight
different
candidate
scoring
functions
used
disambiguation
step
geolocation
algorithm
accuracy
obtained
different
scoring
functions
tested
section
note
scoring
functions
defined
greater
values
scoring
function
indicate
better
higher
score
first
scoring
function
consider
called
total
distance
cid:88
st1
t2âˆˆt
cid:54
term
result
rt1
function
simply
adds
minimum
distance
closest
result
term
note
term
tphr
phr
including
original
term
define
therefore
need
explicitly
ensure
cid:54
summation
equation
cid:54
consider
conflicting
however
explicitly
ensure
terms
total
distance
score
always
negative
values
close
indicate
desirable
scores
small
sum
minimal
distances
second
scoring
function
consider
called
weighted
distance
st1
cid:88
t2âˆˆt
equivalent
equation
except
multiplication
weight
reasoning
behind
weights
calculated
described
note
minus
sign
added
scoring
functions
ensure
greater
values
scoring
function
indicate
better
higher
score
closer
zero
scoring
functions
scoring
functions
may
sensitive
terms
extremely
far
away
others
sums
one
large
smallest
distance
may
drown
discriminative
power
smaller
smallest
distances
occur
example
location
extraction
step
step
algorithm
extracts
phrase
intended
refer
location
text
results
knowledge
base
location
extraction
step
perfect
common
occurrence
remaining
scoring
functions
attempt
deal
difficulty
next
two
scoring
functions
consider
called
inverse
cid:88
st1
phr
cid:54
=t2
phr
t2âˆˆt
cid:54
max
10âˆ’3
weighted
inverse
st1
cid:88
t2âˆˆt
phr
cid:54
=t2
phr
max
10âˆ’3
17/35
similar
equations
respectively
except
use
reciprocal
function
avoid
issues
division
zero
take
maximum
10âˆ’3
due
use
reciprocal
small
smallest
distances
increase
score
strongly
desired
large
smallest
distances
due
outliers
little
effect
next
consider
normalization
equation
attempt
make
scores
comparable
indeed
given
text
number
terms
sums
equation
quite
different
different
terms
weights
fully
compensate
may
bias
scores
example
example
table
st1
scoring
function
equation
one
term
conestoga
mall
two
terms
conestoga
mall
remedy
difficulty
consider
weighted
normalized
inverse
scoring
function
given
cid:80
t2âˆˆt
phr
cid:54
=t2
phr
cid:80
st1
cid:18
minr
cid:48
cid:19
1âˆˆrt1
max
cid:48
max
,10âˆ’3
,10âˆ’3
t2âˆˆt
phr
cid:54
=t2
phr
equation
constructed
multiplying
numerator
equation
minimum
distance
result
result
result
result
finally
divide
whole
expression
total
weight
terms
looked
means
score
always
score
means
consider
closest
pair
results
another
term
always
result
part
closest
pair
scoring
functions
skip
terms
phrase
however
phrase
appears
many
times
text
likely
important
might
helpful
give
bonus
scores
based
often
phrase
occurs
add
feature
equations
produce
scoring
functions
inverse
frequency
phr=t2
phr
t2âˆˆt
cid:88
ï£¶ï£·ï£·ï£·ï£·ï£·ï£·ï£¸
ï£¶ï£·ï£·ï£¸
cid:88
cid:19
cid:88
t2âˆˆt
phr=t2
phr
phr
cid:54
=t2
phr
t2âˆˆt
cid:54
cid:88
ï£«ï£¬ï£¬ï£¬ï£¬ï£¬ï£¬ï£­
ï£«ï£¬ï£¬ï£­
cid:88
cid:80
t2âˆˆt
t2âˆˆt
phr
cid:54
=t2
phr
cid:80
st1
max
10âˆ’3
weighted
inverse
frequency
st1
max
10âˆ’3
weighted
normalized
inverse
frequency
1âˆˆrt1
cid:48
max
,10âˆ’3
phr
cid:54
=t2
phr
cid:18
minr
cid:48
st1
t2âˆˆt
cid:54
=t2
t2âˆˆt
phr=t2
phr
equations
done
multiplying
original
expression
total
weight
terms
phrase
since
scoring
function
non-zero
weights
set
similarly
set
non-zero
weights
obtain
multiplicative
factor
equation
18/35
created
eight
different
scoring
functions
test
section
find
many
scoring
functions
perform
similarly
weighted
inverse
frequency
scoring
function
equation
turn
perform
best
wikipedia
tests
combined
two
disambiguation
algorithms
discussed
next
section
eight
scoring
functions
give
versions
geolocation
algorithm
compared
disambiguation
algorithms
present
two
versions
disambiguation
step
geolocation
algorithm
first
version
called
1-phase
disambiguation
algorithm
described
algorithm
algorithm
1-phase
disambiguation
algorithm
calculate
|rp|
âˆƒt1
âˆ€t1
using
equations
cid:54
calculate
end
using
one
scoring
functions
end
maximize
cid:54
t|w
cid:48
rtâˆ—
satisfy
|rt|
cid:48
end
end
end
update
reflect
changes
recalculate
âˆ€t1
step
step
repeats
still
terms
need
disambiguated
still
phrases
multiple
results
still
conflicting
i.e.
overlapping
terms
step
key
step
greedy
algorithm
finds
term
result
highest
score
stâˆ—
greedy
algorithm
selects
highest
score
considered
likely
coherent
match
terms
results
case
tie
importance
nominatim
assigned
results
used
tie-breaker
step
considers
terms
need
disambiguated
multiple
results
still
exist
terms
terms
still
overlap
least
one
term
step
finds
result
best
score
step
makes
result
considered
phrase
also
steps
remove
terms
conflict
settling
interpretation
contains
term
means
step
term
completely
disambiguated
algorithm
one
step
closer
disambiguating
terms
text
version
disambiguation
algorithm
called
2-phase
disambiguation
algorithm
described
algorithm
difference
1-phase
2-phase
versions
2-phase
algorithm
attempts
first
resolve
conflicting
terms
i.e.
first
settles
interpretation
choices
disambiguates
location
search
results
second
phase
instead
one
while-loop
algorithm
two
while-loops
corre-
sponding
two
phases
first
loop
steps
reduces
set
conflicting
terms
second
loop
steps
picks
location
19/35
search
result
remaining
term
2-phase
algorithm
cleanly
separates
disambiguation
interpretations
disambiguation
possible
location
results
weights
used
disambiguate
interpretations
since
weights
one
second
phase
location
results
disambiguated
second
phase
location
results
terms
remain
first
phase
still
considered
distance
functions
used
select
location
results
term
depend
actual
distances
biased
weights
ambiguities
coming
unresolved
interpretations
tests
section
investigate
whether
advantages
approach
âˆ€t1
using
equations
algorithm
2-phase
disambiguation
algorithm
calculate
âˆƒt1
calculate
cid:54
using
one
scoring
functions
end
end
maximize
satisfy
cid:48
t|w
cid:48
cid:54
end
end
|rp|
end
update
reflect
changes
recalculate
âˆ€t1
step
calculate
end
using
one
scoring
functions
end
maximize
rtâˆ—
satisfy
|rt|
end
2.6
full
geolocation
algorithm
step
algorithm
explained
detail
write
comprehensive
summary
full
geolocation
algorithm
given
algorithm
note
filtering
steps
4â€“18
obtain
relevant
term
set
modified
possibly
made
efficient
depending
type
document
one
wants
geolocate
however
filtering
steps
algorithm
organized
way
geolocation
algorithm
applied
broad
class
texts
including
wikipedia
articles
twitter
messages
kijiji
classified
ads
etc
end
algorithm
collection
terms
mentioned
text
along
single
location
scores
recalculated
results
using
scoring
function
used
disambiguation
note
weights
point
sorted
order
decreasing
score
provide
ranking
top
places
mentioned
text
done
section
20/35
compare
best
results
true
location
articles
algorithm
full
geolocation
algorithm
tag
input
text
using
pos
ner
taggers
4â€“6
ordered
list
words
text
every
ordered
sequence
adjacent
words
end
end
contains
least
one
word
tagged
ner
location
pos
noun
every
word
tagged
noun
adjective
number
location
term
made
words
end
contains
terms
words
tagged
ner
location
else
end
every
matches
canadian
american
dutch
postcode
format
contains
terms
occured
pos
prepositions
remove
terms
occur
prepositions
remove
terms
contain
words
tagged
location
end
represented
term
term
made
words
end
end
set
phrases
represented
every
search
results
knowledge
base
query
|rp|
every
tphr
end
run
algorithm
1-phase
algorithm
2-phase
disambiguation
return
set
non-conflicting
terms
one
result
every
end
end
end
results
wikipedia
test
data
section
describe
performance
geolocation
algorithm
eight
scoring
functions
disambiguation
algorithms
discussed
section
2.5
dataset
wikipedia
articles
21/35
terms
used
articles
fraction
articles
ner
location
tags
terms
pos
prepositions
initial
term
list
based
pos
nouns
5446
99.45
0.51
0.04
table
terms
used
disambiguating
wikipedia
test
articles
see
algorithm
steps
1â€“24
3.1
test
data
tested
geolocation
algorithm
subset
english
geotagged
wikipedia
articles
articles
topics
well-defined
geographical
location
authors
provided
latitude
longitude
coordinates
primary
true
location
article
describes
data
required
significant
amount
preprocessing
described
appendix
full
dataset
contained
920,176
geotagged
wikipedia
articles
tests
section
used
sample
5,976
articles
subset
used
due
time
resource
constraints
particular
one
query
per
second
limit
free
nominatim
servers
discussed
section
2.4
subset
sufficiently
large
thoroughly
test
capabilities
geolocation
algorithm
indicated
3.2
filtering
ner
pos
tags
section
2.3
described
filter
set
initial
terms
come
term
set
disambiguate
see
also
algorithm
steps
1â€“24
summary
filtering
steps
text
contains
ner
location
tags
use
terms
least
one
word
tag
steps
12-13
location
tags
keep
terms
occur
pos
prepositions
steps
15â€“17
also
terms
follow
prepositions
maintain
initial
term
list
based
pos
nouns
steps
4â€“11
ran
geolocation
algorithm
5,976
articles
articles
rejected
500
outright
different
text
parsers
used
ner
pos
taggers
produced
inconsistent
tokens.3
table
shows
often
filtering
methods
used
5,476
articles
considered
tests
articles
able
use
terms
ner
location
tags
rarely
geolocation
algorithm
need
fall
back
pos
prepositions
pos-noun-based
terms
surprising
wikipedia
articles
geotagged
authors
presumably
discuss
well-defined
location
thus
likely
contain
good
number
terms
ner
may
recognize
location
wikipedia
tests
mostly
investigate
performance
algorithm
cases
algorithm
relies
solely
terms
recognized
ner
locations
however
approach
algorithm
general
developed
also
able
handle
shorter
unstructured
texts
fewer
clear
ner
location
terms
relying
pos
prepositions
and/or
nouns
capabilities
approach
tested
section
3note
represent
limitation
approach
rather
minor
technical
issue
arises
data
sufficiently
cleaned
opensource
wikiextractor
program
used
pre-process
wikipedia
raw
data
dumps
see
appendix
happened
example
html
tags
like
properly
removed
principle
tokenizers
ner
pos
taggers
could
made
match
alternatively
efforts
could
made
clean
data
remaining
inconsistencies
could
reconciled
suitable
ad-hoc
fashion
chose
simply
reject
articles
produced
inconsistencies
large
number
articles
produced
consistent
ner
pos
tokens
many
needed
tests
22/35
figure
wikipedia
tests
error
disambiguation
algorithms
3.3
comparison
disambiguation
algorithms
next
step
determine
versions
geolocation
algorithm
accurate
eight
scoring
functions
two
disambiguation
algorithms
giving
total
versions
compare
geotagged
wikipedia
article
data
set
one
set
coordinates
considered
true
location
article
geolocation
algorithm
provided
final
output
list
geolocated
terms
one
likely
nominatim
result
means
needed
compare
list
multiple
locations
one
true
location
article
first
measured
error
calculating
distance
true
location
result
highest
distance-based
score
scores
calculated
using
scoring
function
disambiguation
algorithm
used
section
3.5
use
different
error
measurement
takes
multiple
ranked
outputs
account
articles
sorted
order
increasing
error
version
geolocation
algorithm
figure
plots
cumulative
distribution
error
obtained
articles
x-axis
indicating
fraction
articles
error
error
value
indicated
logarithmic
y-axis
example
graph
tells
versions
geolocation
algorithm
error
less
one
kilometre
least
articles
note
horizontal
axis
figure
reach
100
disambiguation
algorithms
terminated
execution
time
exceeded
100
seconds
87,616
disambiguation
attempts
algorithm
versions
times
5476
articles
cutoff
used
496
times
0.57
expected
graph
show
one
23/35
0.01
0.1
100
1000
10000
100000
0.00
0.03
0.06
0.10
0.13
0.16
0.19
0.23
0.26
0.29
0.32
0.35
0.39
0.42
0.45
0.48
0.51
0.55
0.58
0.61
0.64
0.68
0.71
0.74
0.77
0.80
0.84
0.87
0.90
0.93
0.96
error
frac
cles
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
figure
wikipedia
tests
error
disambiguation
algorithms
10th
percentile
figure
wikipedia
tests
error
disambiguation
algorithms
25th
percentile
two
algorithms
clearly
better
others
case
algorithms
showed
similar
results
appeared
clear
winner
instead
sliced
graph
10th
25th
50th
percentiles
shown
figures
respectively
confirmed
algorithm
clear
winner
however
1-phase
algorithm
weighted
inverse
frequency
scoring
function
equation
one
two
best
algorithms
three
figures
thus
chose
winning
algorithm
study
section
3.4
3.4
analysis
winning
algorithm
consider
test
results
weighted
inverse
frequency
scoring
function
equation
phase
disambiguation
algorithm
algorithm
detail
results
article
type
author-provided
location
tags
wikipedia
articles
type
associated
investigated
whether
types
difficult
algorithm
geolocate
others
nineteen
different
types
tags
observed
test
set
addition
null
missing
type
ten
24/35
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
weighted
distance
phase
weighted
normalized
inverse
phase
total
distance
phase
weighted
normalized
inverse
frequency
phase
inverse
phase
weighted
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
error
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
weighted
distance
phase
weighted
normalized
inverse
phase
weighted
normalized
inverse
phase
weighted
distance
phase
total
distance
phase
total
distance
phase
weighted
normalized
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
inverse
phase
weighted
inverse
phase
weighted
inverse
phase
inverse
phase
inverse
frequency
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
inverse
frequency
phase
error
total
distance
phase
inverse
phase
weighted
normalized
inverse
phase
weighted
inverse
frequency
phase
total
distance
phase
inverse
phase
weighted
normalized
inverse
phase
weighted
inverse
frequency
phase
error
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
error
figure
wikipedia
tests
error
disambiguation
algorithms
50th
percentile
types
including
null
type
occurred
least
times
5476
articles
tested
table
shows
median
error
50th
percentile
types
table
shows
airports
railway
stations
appear
easiest
geolocate
lowest
median
error
types
articles
likely
name
location
nearby
cities
serve
algorithm
expect
find
small
cluster
results
good
scores
resulting
easy
disambiguation
contrast
rivers
second-level
administrative
regions
districts
counties
etc
appear
difficult
locate
makes
sense
types
locations
spread
across
large
area
represented
single
point
wikipedia
true
location
use
single
points
associated
locations
openstreetmap
knowledge
base
compute
distances
single
points
pre-specified
way
wikipedia
author
assign
single
location
large
geographic
entity
like
state
province
even
essentially
one-dimensional
entity
like
river
expected
wikipedia
authors
assign
locations
way
consistent
openstreetmap
locations
types
large
geographic
entities
therefore
expected
large
deviations
occur
wikipedia
true
location
geolocation
algorithm
obtain
based
openstreetmap
deviations
type
fact
hardly
called
errors
example
article
river
algorithm
returns
location
beside
river
could
show
poor
accuracy
returned
point
far
centre
point
assigned
river
openstreetmap
one
possible
way
improve
future
work
consider
radius
geographic
objects
addition
centre
point
wikipedia
articles
openstreetmap
entities
tagged
centre
point
radius
pair
could
use
shortest
distances
discs
distance-based
scoring
functions
error
measures
essentially
one-
dimensional
entities
like
rivers
geometric
moments
could
considered
augment
location
description
improvements
daunting
task
since
required
data
readily
available
could
certainly
expected
dramatically
reduce
perceived
error
geolocation
algorithms
like
one
proposed
paper
geographic
entities
large
essentially
one-dimensional
confidence
estimation
valuable
addition
geolocation
algorithm
would
estimator
accuracy
algorithm
true
error
unknown
would
allow
assign
confidence
value
location
tag
figure
shows
25/35
100
weighted
normalized
inverse
frequency
phase
weighted
normalized
inverse
phase
weighted
distance
phase
total
distance
phase
inverse
phase
inverse
frequency
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
error
100
weighted
normalized
inverse
frequency
phase
weighted
normalized
inverse
phase
weighted
normalized
inverse
phase
weighted
normalized
inverse
frequency
phase
weighted
distance
phase
weighted
distance
phase
total
distance
phase
total
distance
phase
inverse
phase
weighted
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
inverse
frequency
phase
inverse
phase
weighted
inverse
frequency
phase
weighted
inverse
phase
error
article
type
articles
median
error
airport
railwaystation
waterbody
city
mountain
landmark
null
edu
river
adm2nd
178
2414
124
1109
970
187
105
110
187
295
table
10.
wikipedia
tests
accuracy
comparison
different
article
types
error
location
tagging
function
score
top
result
could
expected
would
clear
downward
trend
larger
scores
correlate
smaller
errors
would
give
simple
relationship
score
top
result
would
also
confidence
measure
however
results
indicate
relationship
shown
figure
three
main
clusters
instead
bottom
left
cluster
show
desired
trend
larger
scores
indicate
lower
error
however
simple
interpret
another
cluster
directly
horizontal
shape
third
cluster
right
spans
entire
y-axis
range
graph
cluster
shows
vertical
stratification
starting
around
1000
likely
artefact
maximum
imposed
denominator
equation
distances
less
metre
increased
metre
attempt
avoid
division
zero
every
time
restriction
imposed
score
increases
1000.
likely
major
cause
stratification
observed
around
integer
multiples
1000
figure
top
result
produced
geolocation
algorithm
correspond
true
location
wikipedia
article
error
easily
large
large
case
score
top
result
weighted
inverse
frequency
distance
function
large
top
result
close
results
may
produce
multiple-1000
stratification
right
cluster
figure
moderately
large
top
result
moderately
close
results
top
cluster
figure
large
geographical
entities
could
also
easily
lead
errors
appear
much
larger
reality
even
though
wikipedia
articles
may
single
location
tag
expected
often
contain
clusters
terms
referring
locations
close
single
location
tag
wikipedia
articles
typically
contain
large
number
words
describe
topics
broad
context
may
also
easily
lead
large
errors
geolocation
based
ner
pos
combined
distance-based
scoring
functions
geotagged
wikipedia
articles
results
indicated
figure
give
simple
answer
search
confidence
measure
confidence
measures
tried
similar
results
including
ratio
top
two
scores
well
score
multiplied
divided
number
terms
used
calculate
score
none
showed
clearer
relationship
yet
confidence
measure
geolocation
algorithm
may
difficult
obtain
one
highly
reliable
given
difficulty
geolocation
problem
fraction
wikipedia
articles
approach
works
well
likely
always
fraction
difficult
cases
work
well
example
replotted
error
location
tagging
function
score
top
result
using
weighted
distance
1-phase
version
algorithm
plot
shown
show
stratification
apparent
figure
26/35
figure
wikipedia
tests
error
versus
scores
weighted
inverse
frequency
phase
however
still
clear
relationship
score
error
future
work
includes
investigating
versions
although
given
similarities
unlikely
result
reliable
confidence
measure
3.5
analysis
top
results
previous
sections
used
distance
true
location
result
greatest
score
measurement
error
may
best
approach
algorithm
provides
information
list
multiple
locations
mentioned
text
far
used
one
locations
calculate
error
example
text
describes
river
mentions
cities
lie
along
geolocation
algorithm
would
produce
locations
cities
well
location
river
true
location
article
would
single
point
somewhere
along
river
one
cities
river
highest
score
result
set
city
happens
far
point
assigned
river
author
article
may
give
large
error
value
even
though
output
may
considered
accurate
may
make
sense
case
like
consider
group
locations
returned
geolocation
algorithm
therefore
redefined
error
measure
shortest
distance
true
location
five
locations
produced
geolocation
algorithm
greatest
scores
rather
top
location
greatest
score
figure
modified
version
figure
uses
top
error
measurement
see
curves
converge
closer
figure
meaning
algorithms
similar
case
also
see
significant
improvement
error
example
weighted
inverse
frequency
phase
algorithm
10th
percentile
error
490
metres
top
error
top
error
163
metres
similarly
error
25th
percentile
improved
4.70
0.87
finally
median
error
improved
8.5
new
error
measurement
makes
median
error
similar
observed
roller
using
classification
27/35
0.0001
0.001
0.01
0.1
100
1000
10000
100000
0.0001
0.01
100
10000
1000000
error
score
top
result
figure
wikipedia
tests
top
error
disambiguation
algorithms
approach
however
error
measure
access
true
answer
pick
top
result
closest
tell
might
significantly
improve
accuracy
using
more-informed
scoring
function
rank
final
results
left
future
work
recall
also
maximum
accuracy
classification-type
approaches
effectively
limited
class
size
accuracies
achieve
large
numbers
articles
e.g.
0.87
error
25th
percentile
attained
classification
approaches
results
twitter
test
data
turn
tests
twitter
data
evaluate
performance
geolocation
algorithm
consider
geotagged
tweets
i.e.
tweets
contain
geographic
location
sent
metadata
attempt
geolocate
tweets
concatenations
tweets
sent
user
solely
based
text
tweets
assess
fraction
tweets
concatenations
geolocated
algorithm
location
close
location
tweets
sent
consider
true
location
assessing
geolocation
algorithm
tweets
geolocating
tweets
inherently
challenging
tweets
short
unstructured
less
likely
contain
ner
locations
means
geolocation
algorithm
often
need
rely
pos
prepositions
nouns
see
algorithm
moreover
unlike
wikipedia
articles
well-defined
geographic
entities
specifically
geotagged
authors
contents
geotagged
28/35
0.01
0.1
100
1000
10000
100000
0.00
0.03
0.06
0.10
0.13
0.16
0.19
0.23
0.26
0.29
0.32
0.35
0.39
0.42
0.45
0.48
0.51
0.55
0.58
0.61
0.64
0.68
0.71
0.74
0.77
0.80
0.84
0.87
0.90
0.93
0.96
error
frac
cles
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
total
distance
phase
weighted
distance
phase
inverse
phase
weighted
inverse
phase
weighted
normalized
inverse
phase
inverse
frequency
phase
weighted
inverse
frequency
phase
weighted
normalized
inverse
frequency
phase
tweets
may
actually
location
tweet
sent
thus
expect
algorithm
geolocate
tweets
location
close
location
tweets
sent
fact
experiments
reported
estimate
upper
bound
fraction
geotagged
tweets
principle
geolocated
location
sent
based
information
tweet
text
regardless
limitations
tests
reported
interesting
way
assess
possible
applicability
approach
short
unstructured
text
messages
complement
wikipedia
results
discussed
section
4.1
test
data
compiled
twitter
dataset
containing
nearly
geotagged
tweets
canada
netherlands
australia
period
february
march
april
2015.
dataset
contains
tweets
3,764,507
unique
users
dataset
collected
using
twitter
api
via
spark
framework
data
analytics
explained
appendix
interesting
first
consider
fraction
geotagged
tweets
contain
words
sequences
words
interpreted
using
knowledge
base
locations
within
reasonable
distance
location
tweet
sent
particular
considered
sample
february
2015
tweets
collected
consisting
3,466,922
geotagged
tweets
larger
dataset
tweet
considered
word
sequences
words
pos
ner
used
considered
every
possible
sequence
less
consecutive
words
case-insensitive
search
locations
geonames
knowledge
base
http
//www.geonames.org
search
included
alternative
names
locations
one
name
measured
distance
match
coordinates
tweet
kept
shortest
distance
tweet
figure
shows
cumulative
plot
distance
tweet
coordinates
closest
mention
tweet
text
function
fraction
tweets
see
immediately
tweets
contain
location
references
tweet
text
close
tweet
coordinates
particular
find
82.5
tweets
contain
word
sequence
matches
location
geonames
2.2
tweets
mention
location
within
5.4
tweets
mention
location
within
100
8.3
tweets
mention
location
within
161
100
miles
shows
expect
high
accuracy
attempting
geolocate
tweets
comparing
location
tweet
sent
nevertheless
interesting
see
whether
approach
manages
correctly
geolocate
tweets
contain
relevant
location
information
text
note
used
geonames
instead
openstreetmap
particular
test
since
geonames
data
practical
format
current
purposes
general
points
made
depend
whether
one
uses
geonames
openstreetmap
4.2
results
since
expect
high
recall
accuracy
single
tweets
first
consider
concate-
nations
tweets
sent
user
may
useful
ner
locations
pos
nouns/prepositions
base
geolocation
first
set
tests
combined
every
user
text
user
tweets
one
text
user
set
user
latitude
longitude
mean
29/35
figure
twitter
tests
cumulative
plot
distance
coordinates
sample
geotagged
tweets
closest
mention
location
tweet
text
present
geonames
knowledge
base
function
fraction
tweets
latitude
longitude
user
tweets
dataset
considered
sample
882
users
find
following
results
10th
percentile
603
25th
percentile
2,222â€“2,247
note
report
range
different
methods
50th
percentile
6,646â€“6,665
note
expected
compares
poorly
wikipedia
results
figures
2â€“4
best
algorithm
produced
error
0.5
10th
percentile
5.5
25th
percentile
50th
percentile
however
roughly
line
geonames
analysis
showed
8.3
tweets
mention
location
within
161
interesting
consider
whether
geolocation
algorithm
found
ner
lo-
cations
rely
pos
prepostions
nouns
table
shows
ner
locations
encountered
1.47
combined
texts
stark
opposition
99.45
geotagged
wikipedia
articles
see
table
instead
geolocation
algorithm
rely
pos
nouns
48.07
texts
pos
prepositions
33.56
texts
also
9.30
combined
twitter
texts
terms
considered
nominatim
results
terms
term
list
7.60
texts
terms
found
algorithm
shows
geotagged
twitter
texts
even
combined
much
harder
geolocate
wikipedia
articles
describe
geographic
entities
completeness
briefly
report
test
results
single
tweets
considered
18,720
tweets
find
10th
percentile
error
range
1,042â€“1,043
range
different
methods
25th
percentile
range
3,406â€“3,414
50th
percentile
error
range
7,882â€“7,892
results
case
tweets
combined
user
reported
somewhat
better
expected
30/35
100
1000
10000
100000
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
distance
closest
men.on
frac.on
tweets
terms
used
articles
percent
articles
location
tags
terms
prepositions
initial
term
list
based
nouns
terms
nominatim
results
terms
296
424
1.47
33.56
48.07
9.30
7.60
table
11.
twitter
tests
terms
used
disambiguating
twitter
texts
combined
per
user
see
algorithm
steps
1â€“24
discussion
paper
presented
geolocation
algorithm
finding
precise
locations
named
text
uses
part-of-speech
tagging
named
entity
recognition
find
potential
location
references
uses
open-source
tool
nominatim
search
openstreetmap
database
obtain
list
possible
locations
unique
phrase
finally
conflicting
terms
resolved
one
location
chosen
phrase
algorithm
returns
list
non-conflicting
terms
location
chosen
sixteen
versions
algorithm
compared
similar
results
weighted
inverse
frequency
scoring
function
equation
1-phase
disambiguation
algorithm
algorithm
performed
consistently
near
top
subsequently
used
report
detailed
accuracy
results
location
highest
score
chosen
represent
overall
location
article
median
error
worse
11.0
reported
roller
classification
approach
many
articles
geolocated
much
higher
precision
achieved
classification
approaches
example
articles
geolocated
error
5.5
also
consider
closest
five
highest-scoring
results
median
error
reduces
8.5
implies
algorithm
designed
return
multiple
locations
includes
accurate
results
cases
note
future
work
final
sorting
results
may
improve
median
error
many
ways
geolocation
algorithm
improved
future
work
although
algorithm
developed
heuristically
good
starting
point
new
class
algorithms
high-precision
location
tagging
example
habib
demonstrated
feedback
loop
extraction
step
disambiguation
step
named
entity
recognition
results
disambiguation
step
used
improve
results
extraction
step
improve
results
disambiguation
step
concept
partially
used
paper
particular
extraction
step
gathered
possible
interpretations
disambiguation
step
refined
list
extracted
terms
resolving
conflicted
geolocation
algorithm
could
benefit
use
feedback
loop
disambiguation
algorithm
could
modified
discard
terms
extremely
low
scores
conflict
better
terms
terms
may
refer
real
locations
included
extraction
step
may
improve
accuracy
disambiguating
terms
text
geolocation
algorithm
applied
specific
type
text
algorithm
could
improved
using
part-of-speech
taggers
named
entity
recognizers
specifically
trained
target
style
text
example
stanford
pos
tagger
used
could
replaced
state-of-the-art
twitter
pos
tagger
developed
derczynski
geolocating
tweets
may
interesting
consider
applying
elements
approach
example
31/35
distance-based
scoring
general
named
entity
disambiguation
frameworks
aida
may
benefit
accuracy
frameworks
entities
disambiguated
include
locations
external
software
following
software
used
implementation
project
apache
spark
version
1.4.0.
based
work
available
http
//spark.apache.org/
nominatim
queried
using
api
described
http
//wiki.openstreetmap
org/wiki/nominatim
//nominatim.openstreetmap.org/
also
used
user
interface
https
php-stanford-nlp
october
2014
version
written
anthony
gentile
avail-
able
https
//github.com/agentile/php-stanford-nlp
used
php-
wrapper
access
stanford
pos
tagger
ner
stanford
log-linear
part-of-speech
tagger
version
3.5.2
april
2015
based
work
available
http
//nlp.stanford.edu/software/
tagger.shtml
multiple
pre-trained
models
available
software
project
used
model
titled
english-left3words-distsim
stanford
named
entity
recognizer
version
3.5.2
april
2015
based
work
available
http
//nlp.stanford.edu/software/crf-ner.shtml
multiple
pre-trained
models
available
software
project
used
model
titled
english.all.3class.distsim.crf
wikiextractor
june
2015
version
written
giuseppe
attardi
available
https
//github.com/attardi/wikiextractor
wikipedia
data
time
writing
data
dumps
english
wikipedia
could
obtained
https
//dumps.wikimedia.org/enwiki/
paper
used
articles
dump
english
wikipedia
june
2015
file
name
enwiki-20150602-pages-articles.xml.bz2
location
tags
also
obtained
june
2015
dump
available
separate
download
site
file
name
enwiki-20150602-geo
tags.sql.gz
full
dataset
contained
920,176
geotagged
wikipedia
articles
tests
used
sample
5,976
articles
raw
dump
file
processed
using
wikiextractor
https
//github.com/attardi/
wikiextractor
takes
xml
file
produces
raw
text
article
removing
special
formatting
annotations
images
tables
references
how-
ever
output
wikiextractor
contain
location
tags
join
data
set
location
tags
geo
tags
file
contains
location
tags
english
wikipedia
two
types
tags
primary
non-primary
primary
tags
apply
entire
article
non-primary
tags
apply
particular
mention
text
article
project
used
primary
tags.4
worth
noting
set
articles
different
one
created
wing
baldridge
also
used
roller
used
dump
english
wikipedia
september
2010
used
dump
june
2015.
dataset
contained
10,355,226
articles
including
non-geotagged
ones
contained
4,855,711.
expected
recent
data
would
contain
articles
opposite
observed
however
wing
baldridge
explicitly
32/35
two
data
sets
joined
using
apache
spark
scalable
cluster
computing
system
spark
highly
active
community
developers
users
spark
apis
made
easy
read
data
sets
match
location
tags
articles
output
clear
format
using
less
lines
scala
code
output
spark
program
directly
usable
geolocation
algorithm
implementation
twitter
data
twitter
provides
api
allow
applications
stream
fraction
publicly
available
tweets
https
//dev.twitter.com/streaming
application
receive
approximately
public
tweets
though
sample
tweets
received
adjusted
api
apache
spark
streaming
library
http
//spark.apache
org/streaming/
includes
wrapper
twitter
api
allows
tweets
processed
using
spark
spark
streaming
application
written
receive
stream
tweets
save
parquet
files
processing
program
run
several
months
obtain
dataset
used
section
note
twitter
api
allows
applications
specifically
request
geotagged
tweets
i.e.
tweets
contain
location
tweet
sent
part
tweet
metadata
spark
wrapper
twitter
implement
feature
spark
source
code
modified
paper
allow
requests
geotagged
tweets
within
specified
range
coordinates
specify
canada
netherlands
australia
without
sample
tweets
would
random
sample
public
tweets
twitter
would
specifically
composed
geotagged
tweets
requesting
geotagged
tweets
specific
regions
requested
sample
less
total
amount
public
tweets
meant
spark
streaming
application
collected
nearly
public
geotagged
tweets
areas
code
data
code
geolocation
algorithm
obtained
https
//github.com/
spotzi/geotagger
spark
programs
used
pre-process
wikipedia
data
collect
pre-process
twitter
data
obtained
https
//github.com/sjbrunst/
geotexttagger-data
wikipedia
twitter
data
used
tests
also
obtained
https
//github.com/sjbrunst/geotexttagger-data
references
wing
baldridge
simple
supervised
document
geolocation
geodesic
grids
proceedings
49th
annual
meeting
association
compu-
tational
linguistics
acl
human
language
technologies
hlt
stroudsburg
usa
2011.
955â€“964
available
http
//dl.acm.org/citation.cfm
id=2002472.2002593
roller
speriosu
rallapalli
wing
baldridge
supervised
text-based
geolocation
using
language
models
adaptive
grid
proceedings
remove
redirect
articles
giving
total
3,431,722
content-bearing
articles
paper
explicitly
remove
articles
none
observed
dataset
therefore
likely
automatically
excluded
download
processing
software
used
wing
baldridge
used
processing
software
extract
article
coordinates
obtained
488,269
geotagged
articles
used
set
coordinates
directly
available
wikipedia
33/35
2012
joint
conference
empirical
methods
natural
language
processing
computational
natural
language
learning
emnlp-conll
stroudsburg
usa
2012.
1500â€“1510
available
http
//dl.acm.org/citation.cfm
id=2390948.2391120
han
cook
baldwin
text-based
twitter
user
geolocation
prediction
journal
artificial
intelligence
research
2014
jan
:451â€“500
available
http
//dl.acm.org/citation.cfm
id=2655713.2655726
toutanova
manning
enriching
knowledge
sources
used
maximum
proceedings
2000
joint
sigdat
entropy
part-of-speech
tagger
conference
empirical
methods
natural
language
processing
emnlp
large
corpora
vlc
held
conjunction
38th
annual
meeting
association
computational
linguistics
stroudsburg
usa
2000.
63â€“70
available
http
//dx.doi.org/10.3115/1117794.1117802
toutanova
klein
manning
singer
feature-rich
part-of-speech
tagging
cyclic
dependency
network
proceedings
2003
conference
north
american
chapter
association
computational
linguistics
human
language
technology
hlt-naacl
stroudsburg
usa
2003.
173â€“180
available
http
//dx.doi.org/10.3115/1073445.1073478
finkel
grenager
manning
incorporating
non-local
information
information
extraction
systems
gibbs
sampling
proceedings
43nd
annual
meeting
association
computational
linguistics
acl
2005
stroudsburg
usa
2005.
363â€“370
available
http
//dx.doi.org/
10.3115/1219840.1219885
habib
morgan
named
entity
extraction
disambiguation
informal
text
missing
link
enschede
2014.
siks
dissertation
series
2014-20.
available
http
//doc.utwente.nl/90645/
milne
witten
learning
link
wikipedia
proceedings
17th
acm
conference
information
knowledge
management
acm
2008.
509â€“518
kulkarni
singh
ramakrishnan
chakrabarti
collective
annotation
wikipedia
entities
web
text
proceedings
15th
acm
sigkdd
international
conference
knowledge
discovery
data
mining
acm
2009.
457â€“466
10.
hoffart
yosef
bordino
fÂ¨urstenau
pinkal
spaniol
robust
disambiguation
named
entities
text
proceedings
conference
empirical
methods
natural
language
processing
association
computational
linguistics
2011.
782â€“792
11.
usbeck
ngomo
acn
rÂ¨oder
gerber
coelho
auer
agdistis-
graph-based
disambiguation
named
entities
using
linked
data
semantic
webâ€“iswc
2014.
springer
2014.
457â€“471
12.
moro
raganato
navigli
entity
linking
meets
word
sense
disambiguation
unified
approach
transactions
association
computational
linguistics
2014
2:231â€“244
13.
yosef
hoffart
bordino
spaniol
weikum
aida
online
tool
accurate
disambiguation
named
entities
text
tables
proceedings
vldb
endowment
2011
:1450â€“1453
34/35
14.
haklay
weber
openstreetmap
user-generated
street
maps
pervasive
computing
ieee
2008
:12â€“18
15.
santorini
part-of-speech
tagging
guidelines
penn
treebank
project
3rd
revision
philadelphia
usa
department
linguistics
university
pennsylvania
1990
16.
derczynski
ritter
clark
bontcheva
twitter
part-of-speech
tagging
overcoming
sparse
noisy
data
recent
advances
natural
language
processing
2013.
198â€“206
17.
zaharia
chowdhury
das
dave
mccauley
resilient
distributed
datasets
fault-tolerant
abstraction
in-memory
cluster
com-
puting
proceedings
9th
usenix
conference
networked
systems
design
implementation
nsdi
berkeley
usa
2012.
available
http
//dl.acm.org/citation.cfm
id=2228298.2228301
35/35
