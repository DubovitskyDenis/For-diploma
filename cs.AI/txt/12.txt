git4voc
git-based
versioning
collaborative
vocabulary
development
lavdim
halilaj
eis
department
university
bonn
bonn
germany
irl´an
grangel-gonz´alez
eis
department
university
bonn
bonn
germany
g¨okhan
coskun
eis
department
university
bonn
bonn
germany
halilaj
cs.uni-bonn.de
grangel
cs.uni-bonn.de
coskun
cs.uni-bonn.de
s¨oren
auer
eis
department
university
bonn
bonn
germany
auer
cs.uni-bonn.de
abstract—collaborative
vocabulary
development
context
data
integration
process
ﬁnding
consensus
experts
different
systems
domains
complexity
process
increased
number
involved
people
variety
systems
integrated
dynamics
domain
paper
advocate
realization
powerful
version
control
system
heart
problem
driven
idea
success
git
context
software
development
investigate
applicability
git
collaborative
vocabulary
development
even
though
vocabulary
development
software
development
much
similar-
ities
differences
still
important
differences
need
considered
within
development
successful
versioning
collaboration
system
vocabulary
development
therefore
paper
starts
presenting
challenges
faced
creation
vocabularies
collaboratively
discusses
distinction
software
development
based
insights
propose
git4voc
comprises
guidelines
git
adopted
vocabulary
development
finally
demonstrate
git
hooks
implemented
beyond
plain
functionality
git
realizing
vocabulary-speciﬁc
features
like
syntactic
validation
semantic
diffs
index
terms—version
control
system
collaborative
vocabulary
development
git
introduction
one
key
obstacles
wider
deployment
se-
mantic
technologies
lack
comprehensive
vocabularies
vocabulary
development
requires
signiﬁcant
investment
difﬁcult
make
single
person
organisation
look
current
vocabularies
e.g
lov1
observe
rather
simplistic
total
457
vocabularies
listed
lov
straightforward
query
lov
sparql
endpoint
tells
average
number
classes
vocabulary
whereas
average
number
properties
59.
omitting
four
vocabularies
highest
number
classes
properties
ﬁgures
decrease
classes
properties
average
also
observe
large
number
crucial
domains
superﬁcially
covered
existing
vocabularies
one
main
reasons
lack
vocabularies
also
lack
adequate
methodological
tool
support
time
problem
integrating
data
dif-
ferent
systems
receives
ever-increasing
attention
identifying
1http
//lov.okfn.org
main
terms
across
heterogeneous
data
sources
ﬁnding
consensus
developers
deﬁning
shared
vocabulary
effective
approach
tackle
problem
however
process
refer
collaborative
vocabulary
development
complex
problem
solved
fact
main
challenge
vocabulary
engineers
work
collaboratively
shared
objective
harmonic
efﬁcient
way
avoiding
misunderstandings
uncer-
tainty
ambiguity
quality
produced
vocabularies
another
challenge
tackled
well
identiﬁed
elaborated
important
aspects
vocabulary
development
reuse
vocabulary
structure
naming
conventions
multilinguality
documentation
validation
authoring
aspects
relevant
collaborative
point
view
well
taking
consideration
aspects
impact
quality
vocabulary
therefore
ﬁnding
suitable
collaboration
methodology
exacerbated
number
diversity
involved
stakeholders
well
complexity
domains
due
open
distributed
participatory
nature
web
solution
paramount
interest
semantic
web
community
approach
tackle
mentioned
problem
focus
supporting
collaborative
vocabulary
development
well-known
method
distributed
version
control
domain-agnostic
way
regard
chosen
git
following
two
reasons
one
hand
git
mature
version
control
system
supported
sophisticated
tools
broadly
used
software
development
projects
million
repositories2
hosted
github
open
source
commercial
projects
hand
existing
pop-
ular
vocabularies
like
schema.org3
description
project
doap
music
ontology5
publish
efforts
github
leverage
contribution
community
indicates
vocabulary
development
community
already
familiar
git
remainder
paper
structured
follows
section
present
comprehensive
list
requirements
2https
//github.com/blog/1724-10-million-repositories
3https
//github.com/schemaorg/schemaorg
4https
//github.com/edumbill/doap
5https
//github.com/motools/musicontology
aggregated
current
state
art
ongoing
work
mobivoc6
scorvoc7
section
iii
present
git4voc
comprises
guidelines
git
used
collaborative
vocabulary
development
git4voc
propose
utilize
git
hooks
mechanism
realize
vocabular-
speciﬁc
features
section
demonstrate
concrete
exam-
ple
hook
implementations
provide
overview
related
work
section
conclusion
outlook
future
work
presented
section
requirements
collaborative
vocabulary
development
collaborative
vocabulary
development
considered
related
broad
ﬁeld
software
development
fact
proposals
supporting
former
inspired
experiences
latter
however
vocabulary
totally
equal
software
code
development
vocabularies
raises
challenges
new
least
extend
raised
software
development
section
focus
requirements
critical
vocabularies
gathered
requirements
aggregating
insights
current
state
art
experiences
development
mobivoc8
scorvoc9
following
requirements
presented
detail
communication
support
collaborative
vocabulary
development
ﬁnding
consensus
members
team
order
share
ideas
ﬁnding
agreements
communication
among
contributors
essential
whole
life
cycle
especially
agile
development
sup-
porting
recording
discussions
changes
reasons
crucial
especially
important
case
heterogeneous
teams
experts
different
domains
critical
examples
communicated
within
team
introducing
new
elements
extending
modifying
subsumption
hierarchy
integration
external
resources
changing
underlying
semantic
expressivity
effec-
tive
communication
signiﬁcant
impact
quality
collaboration
outcome
provenance
information
collaborative
develop-
ment
capability
track
changes
made
contributors
important
feature
due
fact
change
vocabulary
reﬂects
understanding
authors
regarding
domain
case
disagreements
necessary
know
change
made
time
reason
different
roles
creating
vocabularies
purpose
realizing
data
integration
across
heterogeneous
independent
systems
involves
domain
experts
various
ﬁelds
different
levels
expertise
instance
large
projects
like
gene
ontology10
many
participants
curators
take
part
development
process
participants
6https
//github.com/vocol/mobivoc
7http
//purl.org/eis/vocab/scor
8https
//github.com/vocol/mobivoc
9http
//purl.org/eis/vocab/scor
10http
//www.geneontology.org/
add
comments
discuss
terms
core
team
allowed
edit
main
components
vocabulary
adding
modules
classes
properties
removing
terms
performing
refactoring
reason
need
deﬁnition
roles
along
permissions
workﬂow
independence
overall
ﬁeld
method-
ologies
workﬂows
collaborative
vocabulary
develop-
ment
changing
continuously
best
knowl-
edge
established
methodologies
workﬂows
broadly
applied
tools
supporting
collaboration
generic
able
adapt
highly
dynamic
con-
text
therefore
important
system
ﬂexible
enough
used
within
different
methodologies
workﬂows
quality
assurance
developing
vocabularies
includes
many
requirements
quality
assurance
syntax
semantic
correctness
well
application
best
practices
designing
vocabularies
quality
aspects
there-
fore
providing
tool
support
signiﬁcant
feature
prevent
contributors
making
errors
later
correcting
phases
might
lead
wasting
resources
terms
time
money
documentation
generation
mentioned
team
vocabulary
development
comprises
domain
experts
less
technical
expertise
knowledge
representation
engineering
tools
order
enable
contributing
development
process
providing
user
friendly
view
current
state
vocabulary
vital
therefore
automatic
documentation
generation
feature
necessary
deltas
among
versions
collaborative
development
vocabularies
respond
evolution
knowledge
domain
also
respect
evolution
connected
vocabularies
within
linked
data
cloud
order
avoid
semantic
inconsistencies
therefore
support
detecting
documenting
semantic
difference
versions
needed
enable
developers
understand
mentioned
evolutions
includes
modiﬁcation
addition
new
elements
i.e
classes
properties
well
removal
existing
terms
authors
well-known
vocabularies
skos11
schema.org12
publish
release
notes
containing
changed
among
different
versions
editor
agnostic
contrast
software
code
vocab-
ularies
abstract
artefacts
serialized
dif-
ferent
techniques
since
contributors
use
different
editors
style
syntax
different
ways
support
collaboration
must
editor
agnostic
syntax
independent
modularity
modularization
recognized
impor-
tant
step
collaborative
vocabulary
building
reusability
decrease
complexity
ownership
customization
beneﬁts
vocabulary
modularization
stud-
ies
report
universal
way
perform
process
choice
particular
technique
guided
application
speciﬁc
requirements
contrast
reports
show
module
mid-sized
vocabulary
contain
200
300
lines
code
especially
11http
//www.w3.org/2004/02/skos/history
12http
//schema.org/docs/releases.html
agile
development
process
large
vocabularies
many
contributors
paramount
importance
system
provides
means
support
modularization
activity
multilinguality
r10
order
wide
range
applicability
different
cultures
communities
vocabulary
terms
must
translated
various
languages
localization
internationalization
process
vocabularies
supported
system
labeling
versions
r11
release
versions
vocabularies
labeled
appropriately
ensures
users
humans
machines
always
possibility
use
speciﬁc
version
latest
one
iii
git4voc
section
present
git4voc
one
hand
propose
guidelines
git
used
collabo-
rative
vocabulary
development
project
hand
present
requirements
section
technically
implemented
git
hooks
additionally
terms
guidelines
analyzed
best
practices
collaborative
software
development
identiﬁed
following
aspects
critical
quality
vocabulary
management
generated
information
rights
management
branching
merging
automate
development
deployment
tasks
hooks
tool
independence
vocabulary
organization
structure
labeling
release
versions
next
subsections
show
detail
approach
responds
mentioned
requirements
management
generated
information
development
process
bunch
information
generated
contributors
capability
manage
information
within
entire
project
life-cycle
essen-
tial
fact
value
added
services
like
github
gitlab
bitbucket
enrich
git
functionality
powerful
information
management
features
instance
issues
great
way
tracking
communications
reporting
problems
well
bug
ﬁxes
announcing
version
releases
communities
like
schema.org
manage
discussions
using
github
mentioned
means
support
requirement
based
fact
propose
activities
gathered
table
documented
possible
name
issues
correspond
name
activities
another
important
requirement
collaborative
vocabulary
development
ability
view
history
changes
called
traceability
software
engineering
addresses
requirement
using
commands
git
log
git
diff
user
explore
history
commits
differences
commit
realized
based
best
commit
practices13
vocabulary
development
atomicity
commits
paramount
importance
13http
//www.git-tower.com/learn/git/ebook/command-line/appendix/best-practices
table
different
roles
primary
activities
roles
basic
activities
semantic
issues
structural
issues
vocabulary
eng
domain
expert
users
translators
rights
management
standalone
solutions
gitlab14
gitolite15
well
third-party
services
like
bitbucket16
github17
offer
ba-
sic
options
user
rights
managements
like
reading
writing
posting
adding
new
team
members
adding
tags
however
even
solutions
high
level
user
management
i.e
restricting
editing
speciﬁed
number
type
classes
properties
instances
achieved
git
order
address
requirement
explore
combination
branching
hooks
combination
branching
hooks
role
deﬁnition
users
ﬁne
grained
access
management
achieved
concretely
using
server-side
hooks
realizing
rights
managements
top
user
roles
possible
instance
implementation
pre-push
hook
check
user
role
permissions
deny
necessary
rights
according
activity
branch
set
table
shows
common
roles
permissions
respect
deﬁned
categories
activities
trusted
environment
right
management
also
realized
client-side
hooks
example
depicted
listing
user
denied
push
master
branch
branching
merging
git
ﬂexible
tool
addresses
requirement
using
git
teams
able
organize
work
types
workﬂows18
branching
strategies
affect
different
quality
collaborative
software
development
vocabulary
development
mostly
accepted
speciﬁc
type
software
development
therefore
considered
branching
strategy
affects
quality
vocabularies
well-known
projects
schema.org
use
branches
organize
work
order
design
branching
model
important
understand
possible
activities
team
perform
regard
collected
common
activities
collaborative
vocabulary
development
listed
table
aiming
producing
vocabulary
good
quality
entire
team
aware
activities
face
development
process
due
impact
14https
//gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/permissions/permissions.md
15https
//github.com/sitaramc/gitolite
16https
//conﬂuence.atlassian.com/display/bitbucket/add+users
+set+
permissions
+and+review+account+plans
17https
//help.github.com/articles/permission-levels-for-an-organization-repository
18https
//www.atlassian.com/git/tutorials/comparing-workﬂows/forking-workﬂow
table
common
activities
collaborative
vocabulary
engineering
activity
name
act1
simple
addition/deletion
complex
addition/deletion
act2
act3
modiﬁcation
act4
act5
alignment
reusing
act6
refactoring
common
metadata
external
metadata
translating
act7
act8
act9
act10
modularization
act11
partitioning
description
adding
new
deleting
existing
elements
like
classes
properties
adding
new
elements
interconnected
within
existing
class
properties
taxonomy
modifying
existing
elements
reusing
elements
linked
data
cloud
alignment
existing
elements
equivalents
cloud
changing
name
metadata
speciﬁc
element
connections
adding/removing/modifying
predeﬁne
rdfs
metadata
adding/removing/modifying
external
metadata
adding/removing/modifying
translation
terms
adding
new
modules
existing
vocabulary
partitioning
different
modules
existing
ele-
ments
example
adding
class
last
level
taxonomy
adding
object
property
super
property
two
existing
properties
modifying
domain
range
existing
object
property
deﬁning
new
local
concepts
using
external
resources
alignment
classes
instances
owl
equivalentclass
owl
sameas
renaming
class
connected
many
domain
range
relation
properties
need
renamed
everywhere
adding
metadata
class
rdfs
label
rdfs
comment
adding
metadata
class
skos
preflabel
title
using
rdfs
label
translate
elements
different
languages
creating
integrating
new
modules
due
new
requirements
vocabulary
grown
size
semantic
complexity
partitioning
existing
vocabulary
different
modules
hooks
distinguished
client-side
server-side
hooks
due
space
limitations
examples
article
showcase
client-side
hooks
order
address
requirements
implemented
following
three
important
tasks
collaborative
vocabulary
development
syntax
checking
assessing
vocabularies
best
design
practices
documentation
generation
figure
illustrates
examples
integrated
commit
process
modifying
local
vocabulary
adding
changes
stage
phase
next
step
commit
current
state
local
repository
initialization
commit
triggers
hook
named
pre-commit
listing
shows
implementation
hook
realizes
tasks
syntax
checking
best
practice
assessment
first
retrieves
modiﬁed
ﬁles
extensions
rdf
owl
ttl
checks
syntax
errors
using
rapper20
case
vocabularies
fail
pass
validation
process
commit
canceled
user
notiﬁed
message
shows
detailed
description
error
comprised
ﬁle
name
line
number
error
type
syntax
validation
passed
successfully
modiﬁed
ﬁles
posted
oops21
web
service
curl
command-line
http
client
service
assesses
vocabulary
ﬁles
certain
quality
metrics
result
descriptive
message
contains
recommendations
best
practices
vocabulary
development
errors
exist
pre-commit
hook
ﬁnished
commit
accepted
afterwards
post-commit
hook
called
listing
demonstrates
implementation
post-commit
hook
documentation
generation
human
friendly
format
script
uses
parrot22
external
tool
security
reasons
git
repository
services
allow
automatically
distribute
predeﬁned
hooks
cloning
phase
order
accomplish
task
repository
dedicated
folder
contains
implemented
hooks
ﬁrst
clone
hooks
need
copied
.git/hooks
directory
purpose
implemented
script
20http
//librdf.org/raptor/
21http
//oops-ws.oeg-upm.net/
22https
//bitbucket.org/fundacionctic/parrot/
fig
branching
model
vocabulary
development
overall
vocabulary
classiﬁed
activities
three
categories
basic
activities
act1
act7
act9
semantic
issues
act2
act3
act4
act5
act6
act8
structural
issues
act10
act11
led
branching
model
depicted
figure
designed
different
branches
handle
men-
tioned
categories
basic
activities
performed
develop
branch
second
category
propose
dedicated
branch
called
semantic
issues
case
third
category
branch
named
structural
issues
applied
bear
mind
restricting
ﬂexibility
git
regarding
branches
contrary
branches
used
complement
model
nevertheless
approach
branching
model
help
developers
branches
connected
speciﬁc
activities
collaborative
vocabulary
development
important
solution
built
top
best
practices
branching
software
development19
automate
development
deployment
tasks
hooks
despite
fact
git
many
implemented
features
allows
extending
functionality
using
so-called
hooks
mechanism
allows
running
scripts
speciﬁc
git
events
based
execution
place
two
types
19http
//nvie.com/posts/a-successful-git-branching-model
timedevelopv1.0.0v2.1.6v2.9.8v3.5.1v4.2.1semantic
issuesmastertagsstructural
issues
merge
tool
necessary
time
consuming
error
prone
task
could
lead
information
lose
order
avoid
mentioned
problems
propose
use
turtle
format
addresses
requirement
similar
approach
describes
pattern
express
data
github
storing
csv
ﬁles26
listing
presents
proposal
write
one
triple
per
line
listing
one
triple
per
line
prefix
rdf
www
org
/1999/02/22
f−s
x−ns
prefix
rdfs
www
org
f−schema
prefix
owl
www
org
owl
prefix
scor
org
vocab
prefix
www
org
sw−vocab−s
scor
process
rdf
type
owl
class
rdfs
comment
process
unique
activity
...
rdfs
label
process
rdfs
isdefinedby
scor
term_status
testing
scor
enable
rdfs
subclassof
rdfs
comment
rdfs
label
scor
process
enable
describes
...
enable
vocabulary
organization
structure
git
basic
functionalities
support
modularizing
code
vocabularies
therefore
order
address
requirement
propose
guidelines
organizing
vocabu-
lary
ﬁles
ﬁle
represents
module
considering
fact
line
represent
triple
based
insights
propose
ﬁles
contain
300
triples
highlight
three
possible
forms
organizing
ﬁles
cases
use
single
git
repository
store
ﬁles
complete
vocabulary
contained
one
single
ﬁle
vocabulary
small
e.g
contains
less
300
lines
code
represents
domain
divided
sub
domains
saved
within
one
single
ﬁle
number
contributors
relatively
small
domain
vocabulary
focused
organizing
one
single
ﬁle
might
possible
even
exceeds
300
lines
code
however
comprehensibility
exacerbated
splitting
different
ﬁles
considered
vocabulary
split
multiple
ﬁles
vocabulary
contains
300
lines
code
covers
complex
domain
organized
different
sub
domains
modules
regard
mapped
sub
domains
modules
sub
domains
small
enough
represented
different
ﬁles
within
par-
ent
folder
exists
patterns
vocabulary
modulariza-
tion
developed
mobivoc
based
pattern
modules
importing
module
case
module
vocabulary
modules
like
aircraft
fuel
saved
separate
ﬁles
ﬁle
represents
speciﬁc
sub
domain
following
approach
domain
experts
contribute
independently
vocabulary
development
according
26http
//blog.okfn.org/2013/07/02/git-and-github-for-data/
fig
client-side
hooks
workﬂow
needs
executed
cloning
repository
process
ﬁnished
predeﬁned
hooks
automatically
executed
commit
however
hooks
changed
e.g
use
different
validation
documentation
generation
tools
script
executed
apart
installing
hooks
script
also
used
download
install
tools
like
rapper
necessary
hooks
tools
placed
within
local
repository
ﬁle
.gitignore
used
prevent
pushed
remote
repository
git
show
semantic
diffs
versions
vocab-
ulary
owl2vcs
shows
deltas
among
different
versions
using
tool
hooks
generated
deltas
published
human
friendly
format
well
corresponds
requirement
tool
independence
collaborative
working
git
facilitated
us-
ing
vocabulary
editors
like
prot´eg´e23
topbraid
composer24
neon
toolkit25
different
algorithms
writing
ﬁles
might
arise
consistency
problems
case
contributors
using
editor
instance
one
contributor
use
prot´eg´e
whereas
another
one
uses
neon
toolkit
editing
ﬁle
simultaneously
saving
different
representations
ﬁle
created
consequence
git
recognizes
lot
changes
asks
conﬂict
resolution
due
fact
git
version
control
based
text
line
changing
detects
line
changed
previous
version
case
using
23http
//protege.stanford.edu/
24http
//www.topquadrant.com/tools/ide-topbraid-composer-maestro-edition/
25http
//neon-toolkit.org/wiki/main
page.html
commit
startlocal
syntax
validationcommit
donepre-commit
hookpost-commit
hooknoyeslocal
documentation
generationbest
design
practices
checkingoops
web
servicerappernoyesparrot
category
related
number
respective
position
changes
vocabulary
regarding
categories
commonly
reﬂected
increasing
numbers
instance
difference
releases
1.0.0
2.0.0
shows
structural
issue
changes
sti
implementation
developed
git4voc27
environment
collaborative
vocabulary
development
table
iii
provides
overview
previously
described
requirements
fulﬁlled
git4voc
solution
combines
git4voc
set
state-of-the-art
tools
like
rapper
oops
service
parrot
tool
exchangeable
easily
replaced
alternatives
provide
services
called
hooks
mechanism
following
hooks
presented
detail
listing
shows
example
predeﬁned
hooks
copied
.git/hooks
folder
cloning
repository
addition
shows
installing
tools
raptor
parrot
necessary
libraries
case
exist
listing
install
hooks
tools
/bin/sh
copy
modified
hooks
hooks
hooks/
.git/hooks/
done
create
directory
necessary
tools
tools
mkdir
tools
...
tools
install
raptor
raptor
curl
http
//download.librdf.org/source/raptor2-2.0.15
tar.gz
...
sudo
apt-get
install
libxml2-dev
libxslt1-dev
python-dev
sudo
apt-get
install
raptor2-utils
...
install
parrot
parrot-jar-with-dependencies.jar
curl
https
//github.com/vocol/vocol/raw/master/hooks/
tools/parrot-jar-with-dependencies.jar
...
pre-commit
hook
adapted
prevent
users
committing
master
branch
shown
listing
example
customized
restrict
committing
branches
well
low
level
rights
management
achieved
local
repository
changes
pushed
remote
repository
furthermore
reduce
efforts
needed
subsequent
corrections
integrated
tools
syntax
validation
checking
bad
modeling
practices
ﬁrst
rapper
tool
used
validates
turtle
ﬁle
syntactic
errors
second
used
oops
web
service
scan
vocabulary
ﬁles
bad
modeling
practices
27https
//github.com/vocol/vocol/tree/master/git4voc
fig
structure
mobivoc
ﬁeld
expertise
figure
depicts
structure
mobivoc
modules
vocabulary
modules
stored
ﬁles
folders
huge
vocabularies
comprises
complex
domains
splitting
ﬁles
sufﬁcient
would
lead
large
amount
ﬁles
within
single
folder
therefore
sub
domains
large
enough
split
ﬁles
represented
folders
folder
contains
ﬁles
represents
modules
case
folder
ﬁle
structure
reﬂect
complex
hierarchy
overall
domain
splitting
vocabulary
ﬁles
speciﬁc
pur-
poses
requirement
r10
addressed
well
achieved
creating
dedicated
ﬁles
translating
ﬁles
users
role
translators
contribute
translating
terms
required
language
labeling
release
versions
based
requirement
r11
proper
labeling
release
versions
vital
facilitates
re-usability
one
common
ways
realize
deploy
release
ver-
sion
different
ﬁles
however
could
lead
following
problems
identiﬁed
number
ﬁles
could
increase
rapidly
choosing
versions
creates
confusion
maintenance
needs
additional
resources
synchronizing
latest
version
dependent
applications
requires
ad-
ditional
effort
avoid
mentioned
problems
kept
versions
vocabularies
ﬁle
versions
separated
git
implemented
functionality
tagging
saved
master
branch
part
branching
model
illustrated
figure
possible
create
ﬁlter
tags
time
moreover
users
obtain
speciﬁc
version
vocabulary
giving
tag
name
therefore
released
version
vocabulary
must
version
number
based
scheme
mentioned
categories
activities
table
propose
tagging
different
versions
according
following
pattern
sti.sei.ba
sti
stands
structural
issues
sei
semantic
issues
baa
basic
activities
vocabularymodulesaircraftmobivocbike
sharingcharging
pointsenergyfilling
stationsfuellow
emission
zonemeans
transportmotor
vehicleparkingrelated
vehicle
table
iii
collaborative
requirements
git4voc
perspective
requirement
communication
support
provenance
information
different
roles
workﬂow
independence
modularity
r10
multilinguality
r11
labeling
versions
quality
assurance
documentation
generation
deltas
among
releases
editor
agnostic
supported
plain
git
means
issues
tracking
system
offered
hosting
platforms
github
gitlab
bitbucket
git
log
git
diff
functionality
extension
combination
branching
hooks
git
branching
merging
strategies
extended
combination
hooks
tools
like
rapper
jenariot
extended
combination
hooks
documentation
generation
tools
like
schemaorg
widoco
extended
combination
owl2vcs
external
tool
hooks
git
base
functionality
hierarchy
organization
vocabularies
modules
represented
ﬁles
hierarchy
organization
vocabularies
dedicated
ﬁles
used
multilinguality
git
tag
functionality
listing
pre-commit
hook
syntax
validation
check-
ing
bad
modeling
practices
/bin/bash
currentbranch=
git
symbolic-ref
head
files
exit
file
files
currentbranch
refs/heads/master
echo
allowed
commit
master
branch
exit
else
get
modified
files
ttl
extension
files=
git
diff
cached
name-only
diff-filter=acm
grep
.ttl
...
file
files
validate
file
using
rapper
res=
rapper
turtle
files
...
error
file
files
filecontent=
cat
files
request=
xml
...
res=
curl
post
request
content-
type
application/xml
http
//oops-ws.oeg-
upm.net/rest
...
done
succeed
echo
commit
succeeded
else
echo
commit
failed
exit
listing
shows
post-commit
hook
uses
parrot
create
human
friendly
representation
developed
vocabulary
generated
content
saved
single
html
ﬁle
consists
vocabulary
elements
user
able
navigate
entire
vocabulary
merely
selecting
element
name
moreover
order
create
dif-
ferent
representation
style
vocabulary
alternative
tools
widoco28
specgen29
dowl30
etc
c.f
commented
part
code
used
well
listing
post-commit
hook
documentation
generation
/bin/sh
files=
git
diff
cached
name-only
diff-filter=acm
grep
.ttl
28https
//github.com/dgarijo/widoco
29https
//github.com/specgen/specgen
30https
//github.com/ldodds/dowl
generate
documentation
using
parrot
java
-jar
path/parrot-jar-with-dependencies.jar
file
file
.html
generate
documentation
using
widoco
java
-jar
path/widoco-0.0.1-jar-with-dependencies
jar
-ontfile
file
-outfolder
/home/
...
done
echo
\documentation
generation
completed.\n
exit
related
work
collaborative
vocabulary
development
active
research
area
semantic
web
community
existing
ap-
proaches
like
webprot´eg´e
provides
collaborative
web
frontend
subset
functionality
prot´eg´e
owl
editor
aim
webprot´eg´e
lower
threshold
collaborative
ontology
development
neologism
vocabulary
publishing
platform
focus
ease
use
compatibility
linked
data
principles
neologism
fo-
cuses
vocabulary
publishing
less
collaboration
vocbench
open
source
web
application
editing
thesauri
complying
skos
skos-xl
standards
vocbench
focus
collaboration
supported
workﬂow
management
content
validation
publication
main
limitation
aforementioned
tools
lack
version
control
therefore
consider
approaches
focused
using
version
control
systems
collaborative
vocabulary
development
svont
extends
functionality
apache
subversion
svn
providing
possibility
versioning
owl
conform
lightweight
description
logic
svn
manipulates
deltas
ﬁles
therefore
svont
use
separate
server
create
conceptual
changes
versions
ontologies
changes
generated
result
diff
operation
modiﬁed
ontology
base
ontology
contentcvs
prot´eg´e
plugin
adapts
concepts
concurrent
versioning
enable
developers
work
parallel
moreover
fea-
tures
conﬂict
detection
resolution
checking
structure
semantic
ontology
versions
described
developers
rda
vocabularies31
adopt
rules
semver32
realize
meaningful
versioning
using
git
addi-
tionally
provides
general
notes
organizing
vocabulary
development
branches
describes
owl2vcs
toolset
designed
facilitate
version
control
owl
ontologies
using
version
control
systems
integrated
external
tool
git
mercurial
subversion
provide
algorithms
structural
diff
however
none
mentioned
approaches
cover
identiﬁed
requirements
c.f
section
collaborative
vocabulary
development
contrary
work
analyze
address
one
using
git
git4voc
extension
conclusion
future
work
paper
investigated
applicability
git
col-
laborative
vocabulary
development
deﬁned
collaborative
vocabulary
development
process
identifying
main
terms
across
heterogeneous
data
sources
ﬁnding
consen-
sus
developers
main
challenge
regard
realization
powerful
collaborative
environment
dis-
tributed
version
control
systems
enable
developers
around
world
work
collaboratively
complex
software
systems
since
software
vocabularies
analyzed
differences
detail
identifying
requirements
version
control
system
supports
collaborative
vocabulary
development
approach
extends
plain
git
functionality
utilizing
hooks
mechanism
combination
external
tools
address
requirements
presented
approach
easily
extensible
accommodate
additional
external
tools
regarding
future
work
going
extend
approach
full
implementation
server
side
hooks
tasks
like
deploying
speciﬁc
versions
vocabular-
ies
dedicated
server
generating
deferencable
uri
ontol-
ogy
partitioning
modularization
tasks
performed
fully
automated
way
also
plan
develop
integrate
tool
validates
vocabularies
conventions
provides
recommendations
solving
possible
issues
lead
convenience
less
error
prone
collaborative
vocabulary
development
environment
result
gener-
ated
artefacts
publicly
accessible
interested
parts
acknowledgments
work
supported
german
ministry
ed-
ucation
research
funded
project
lucid
european
commission
seventh
framework
program
fp7
grant
601043
http
//diachron-fp7.eu
references
grangel-gonz´alez
halilaj
coskun
auer
towards
vo-
cabulary
development
convention
7th
international
joint
confer-
ence
knowledge
discovery
knowledge
engineering
knowledge
management
vol
2015
334–343
31http
//www.rdaregistry.info
32http
//www.semver.org
kalliamvakou
damian
blincoe
singer
german
open
source-style
collaborative
development
practices
commercial
projects
using
github
37th
international
conference
software
engineering
icse15
2015
noy
chugh
liu
musen
framework
ontology
evolution
collaborative
environments
iswc
springer
2006
544–558
noy
tudorache
collaborative
ontology
development
semantic
web.
aaai
spring
symposium
symbiotic
relationships
semantic
web
knowledge
engineering
2008
63–68
seidenberg
rector
state
multi-user
ontology
engineering.
womo
citeseer
2007
tudorache
noy
falconer
musen
knowl-
edge
base
driven
user
interface
collaborative
ontology
development
16th
international
conference
intelligent
user
interfaces
acm
2011
411–414
simperl
luczak-r¨osch
collaborative
ontology
engineering
survey
knowledge
engineering
review
vol
101–
131
2014
suarez-figueroa
g´omez-p´erez
fernandez-lopez
neon
methodology
ontology
engineering
ontology
engi-
neering
networked
world
springer
2012
9–34
aquin
schlicht
stuckenschmidt
sabou
ontology
modularization
knowledge
selection
experiments
evaluations
database
expert
systems
applications
springer
2007
874–883
schlicht
stuckenschmidt
towards
structural
criteria
ontology
modularization
iswc
2006
workshop
modular
on-
tologies
citeseer
2006
gracia
montiel-ponsoda
cimiano
g´omez-p´erez
buite-
laar
mccrae
challenges
multilingual
web
data
journal
web
semantics
vol
63–71
2012
phillips
sillito
walker
branching
merging
investigation
current
version
control
practices
4th
international
workshop
cooperative
human
aspects
software
engineering
acm
2011
9–15
shihab
bird
zimmermann
effect
branching
strategies
software
quality
acm-ieee
international
symposium
empirical
software
engineering
measurement
esem
ieee
2012
301–310
gonc¸alves
parsia
sattler
ecco
hybrid
diff
tool
owl
ontologies.
owled
2012
abbes
scheuermann
meilender
aquin
charac-
terizing
modular
ontologies
7th
international
conference
formal
ontologies
information
systems
fois
2012
13–25
bedi
marwaha
versioning
owl
ontologies
using
temporal
tags
international
journal
computer
control
quantum
infor-
mation
engineering
2007
diane
hillmann
gordon
dunsire
versioning
vocabularies
linked
data
world
ifla
lion
2014
vocol
agile
methodology
environment
collaborative
vocabulary
development
zenodo
feb.
2015
online
available
http
//dx.doi.org/10.5281/zenodo.15023
palma
corcho
g´omez-p´erez
haase
holistic
approach
collaborative
ontology
development
based
change
man-
agement
journal
web
semantics
vol
299–314
2011
tudorache
nyulas
noy
musen
webprot´eg´e
collaborative
ontology
editor
knowledge
acquisition
tool
web
semantic
web
vol
2013
basca
corlosquet
cyganiak
fern´andez
schandl
neologism
easy
vocabulary
publishing
2008
stellato
rajbhandari
turbati
fiorelli
caracciolo
lorenzetti
keizer
pazienza
vocbench
web
application
collaborative
development
multilingual
thesauri
semantic
web
latest
advances
new
domains
springer
2015
38–53
luczak-r¨osch
coskun
paschke
rothe
tolksdorf
svont-version
control
owl
ontologies
concept
level.
jahrestagung
vol
176
79–84
2010
jim´enez-ruiz
grau
horrocks
llavori
con-
tentcvs
cvs-based
collaborative
ontology
engineering
tool.
swat4ls
citeseer
2009
zaikin
tuzovsky
owl2vcs
tools
distributed
ontology
development.
owled
citeseer
2013
