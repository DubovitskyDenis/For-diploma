large-scale
reasoning
owl
michael
ruster
university
koblenz-landau
campus
koblenz
introduction
recent
years
semantic
web
grown
size
importance
knowledge
stored
machine-readable
formats
like
rdfs
owl
many
applications
knowledge
extraction
reasoning
one
core
requirements
reasoning
knowledge
logically
derived
explicitly
present
data
due
complexity
amount
knowledge
semantic
web
easily
become
diﬃcult
task
bottlenecks
time
used
processing
query
well
memory
needed
reasoning
paper
outlines
common
approaches
eﬃcient
reasoning
large-scale
data
therefore
presents
techniques
implemented
reasoners
able
process
billions
109
triples
paper
focuses
owl
widely
used
knowledge
representation
ontology
language
semantic
web
rich
features
first
brief
introduction
semantic
web
given
section
common
properties
highlighted
may
inﬂuence
choice
language
selection
knowledge
representation
subsequently
section
give
overview
owl
sublanguages
choice
sublanguages
shortly
explained
based
requirements
modelling
knowledge
semantic
web
section
illustrates
two
main
techniques
large-scale
reasoning
diﬀerences
approaches
highlighted
furthermore
techniques
one
example
reasoner
presented
together
optimisation
strategies
implement
finally
section
summarises
paper
semantic
web
language
features
section
focuses
semantic
web
important
properties
thereby
introduces
various
important
terms
used
throughout
paper
furthermore
section
describes
two
diﬀerent
logics
use
modelling
semantic
web
data
semantic
web
purpose
extend
world
wide
web
encoding
information
machine-parseable
ways
result
possible
machines
easily
extract
web
page
meaning
semantic
web
built
using
various
technologies
like
ontologies
achieve
ontologies
conceptual
models
encoding
set
terms
relationships
enables
organisation
exchange
information
well
reasoning
formal
descriptions
ontologies
given
ontology
languages
ontology
languages
using
logics
express
knowledge
owl
built
around
description
logics
overview
given
section
statements
expressed
subject-predicate-object
structure
called
triples
statements
describe
taxonomy
domain
expressing
terminological
knowledge
called
tbox
ontology
likewise
statements
describing
assertions
instances
like
properties
relations
instances
called
abox
semantic
web
data
may
originate
many
diverse
ﬁelds
biology
medicine
journalism
like
new
york
times1
hence
knowledge
represented
heterogeneous
may
require
diﬀerent
statement
capabilities
ontology
language
richer
amount
features
may
also
mean
higher
complexity
reasoning
nevertheless
depending
domain
model
features
might
needed
example
generally
every
statement
either
true
false
modelling
uncertainty
imprecision
possible
e.g
classical
description
logic
statement
express
paper
almost
ﬁnished
solution
introduce
ﬁner
range
truth
values
done
e.g
fuzzy
logic
assigning
additional
truth
value
range
triple
similarly
reasoning
incomplete
conﬂicting
knowledge
prob-
lematic
instance
trying
calculate
transitive
closure
multiple
triples
common
example
expresses
birds
penguins
birds
penguins
form
exception
regarding
capability
ﬂight
birds
actually
able
defeasible
logic
allows
expressing
sentences
like
generally
birds
also
modelling
penguins
although
birds
logic
introduces
three
main
elements
strict
rules
model
knowledge
true
cases
like
swallows
birds
defeasible
rules
express
something
typically
holds
like
birds
defeated
defeasible
strict
rules
rules
assigned
priorities
determine
rule
may
defeat
another
one
undercutting
defeaters
formulate
possible
exceptions
defeasible
rules
with-
expressive
enough
allow
concrete
inference
example
injured
bird
might
able
would
allow
inference
injured
birds
unable
instead
highlights
might
exceptions
would
make
inference
impossible
fuzzy
logic
defeasible
logic
may
seem
similar
ﬁrst
indeed
diﬀerent
covington
notes
fuzzy
logic
allows
reasoning
certain
level
uncertainty
imprecision
whereas
defeasible
logic
ignores
degrees
truths
instead
expresses
rules
may
overridden
others
embody
interesting
concepts
semantic
web
fuzzy
logic
used
express
various
level
trust
certain
sources
example
article
renowned
newspaper
often
trustworthy
one
rather
unknown
personal
blogger
defeasible
logic
helps
modelling
conﬂicting
knowledge
http
//data.nytimes.com/
last
accessed
march
2015
11:00
owl
sublanguages
diﬀerent
way
example
information
blogger
defeated
one
published
newspaper
remains
unclear
much
credible
newspaper
compared
blogger
yet
information
newspaper
article
seen
truth
instead
information
closer
actual
truth
allows
modelling
incomplete
knowledge
knowledge
capturing
typical
states
defeated
speciﬁc
rules
hence
knowledge
changes
would
appear
expressed
defeasible
rules
defeasible
rules
could
immediately
added
without
entailing
processing
depends
ontology
developers
whether
see
need
logics
describe
data
contexts
useful
however
always
adds
complexity
reasoning
process
next
section
sublanguages
owl
discussed
illustrate
possible
choices
expressiveness
already
provided
owl
without
extensions
owl
sublanguages
section
gives
quick
introduction
owl
sublanguages
terms
features
purpose
section
illustrate
choice
ontology
language
important
decision
reasoning
big
data
purpose
reasoning
complexities
languages
given
important
properties
presented
thus
understood
languages
commonly
used
type
reasoning
web
ontology
language
short
owl
speciﬁcation
w3c
purpose
representing
knowledge
machine-parsable
ways
owl
web
ontology
language
guide
w3c
explains
owl
divided
three
sublanguages
owl
full
owl
lite
owl
sublanguages
divided
diﬀer
expressiveness
owl
full
feature-richest
seen
extension
rdf
includes
meta-modelling
capabilities
rdf
schema
short
rdfs
owl
lite
owl
hand
understood
extensions
subset
rdf
ontologies
created
using
owl
lite
subsets
built
owl
subsets
owl
full
ontologies
detailed
diﬀerences
taken
owl
semantics
speciﬁcation
rising
amount
features
complexity
reasoning
increases
well
reasoning
owl
lite
complete
exptime
owl
nexptime
owl
full
even
undecidable
revision
owl
called
owl
even
extends
feature
set
sublanguages
resulting
e.g
reasoning
complexity
2nexptime
owl
thus
especially
reasoning
billions
triples
important
decide
using
least
complex
sublanguage
oﬀers
needed
features
given
modelling
purpose
commonly
used
modelling
knowledge
keeping
reasoning
feasible
sublanguages
owl
also
referred
proﬁles
proﬁles
characterised
restricting
feature
set
hence
making
reasoning
owl
sublanguages
feasible
hereby
ontology
languages
also
become
simpler
implement
extend
easier
understand
w3c
distinguishes
three
owl
proﬁles
namely
owl
owl
owl
proﬁles
reduced
reasoning
complexity
low
ptime
owl
one
restrictions
proﬁles
share
axioms
deﬁne
subclass
inclusion
disallow
unions
classes
otherwise
reasoning
ontology
languages
would
become
np-hard
already
similarly
proﬁles
forbid
use
negations
universal
quantiﬁers
left-hand
side
concrete
restrictions
explained
owl
proﬁle
speciﬁcation
outside
paper
scope
however
kr¨otzsch
summarises
important
characteristics
follows
owl
designed
query
language
ease
information
retrieval
ontologies
database
hence
queries
may
extract
matching
data
together
facts
inferred
lspace
sublanguage
design
enables
query
rewriting
query
rewritten
e.g
sql
query
directly
executed
sql
database
technique
query
rewriting
discussed
detail
section
4.2
approach
presented
query
split
related
rules
eventually
may
return
instances
owl
often
applied
contexts
tbox
notably
smaller
abox
common
semantic
web
developed
scalable
solution
allows
querying
big
datasets
retaining
owl
expressiveness
owl
likewise
aimed
scenarios
big
aboxes
thus
used
e.g
biomedical
ontologies
like
systematized
nomenclature
medicine
clinical
terms2
short
snomed
gathers
information
human
diseases
restricted
proﬁle
therefore
least
expressive
besides
owl
proﬁles
owl
pd*
also
known
owl
horst
also
often
used
reasoning
huge
amounts
data
extension
rdfs
combined
subset
owl
result
becomes
expressive
rdfs
remaining
less
computationally
complex
owl
full
reasoning
owl
pd*
complexity
special
cases
urbani
describe
facto
standard
scalable
owl
rea-
soning
p.216
development
owl
partly
inﬂuenced
owl
pd*
thus
frequently
used
large-scale
reasoning
e.g
regardless
revision
owl
said
owl
lite
expressive
enough
modelling
knowledge
semantic
web
owl
owl
full
however
tractable
reasoning
huge
datasets
therefore
restricted
sublanguages
selected
knowledge
modelling
reasoning
semantic
web
owl
pd*
owl
languages
commonly
applied
task
often
using
materialisation
strategy
presented
later
section
4.1.
nevertheless
proﬁles
owl
also
used
reasoners
following
query
rewriting
strategy
explained
section
4.2
http
//www.ihtsdo.org/
last
accessed
march
2015
16:30
approaches
large-scale
owl
reasoning
approaches
large-scale
owl
reasoning
first
section
gives
overview
description
logics
focussing
one
concrete
language
example
description
logics
syntax
semantic
used
subsequently
presenting
two
inference
methods
forward
chaining
backward
chaining
later
sections
detail
implementations
methods
section
4.3
furthermore
give
overview
selection
owl
and/or
semantic
web
reasoners
description
logics
ﬁrst-order
logic
subset
allow
modelling
knowledge
foundation
owl
ontologies
common
example
description
logics
attributive
language
complements
short
alc
consists
concepts
individuals
roles
concept
e.g
human
building
individuals
seen
elements
concepts
e.g
peter
eiﬀeltower
function—also
called
interpretation—associates
individuals
concepts
example
peter
human
expresses
individual
peter
satisﬁes
human
concept
examples
roles
haschild
builtby
link
elements
alc
introduces
connectives
one
connective
concept
inclusion
cid:118
allows
expressing
one
concept
general
example
woman
cid:118
human
may
model
gender
neutral
concept
human
includes
women
like
set
theory
concepts
also
uniﬁed
e.g
woman
cid:116
man
cid:118
human
intersection
concepts
indicated
cid:117
included
analogously
also
top
concept
cid:62
universal
concept
thus
subsumes
others
likewise
bottom
concept
models
concept
nothingness
example
using
negation
connective
would
woman
cid:117
¬woman
cid:118
existential
universal
quantiﬁers—
respectively—
allow
expressing
knowledge
including
roles
example
building
built
humans
one
modelled
building
cid:118
∀builtby.human
similarly
modelling
parent
someone
child
expressed
parent
cid:118
∃haschild.
cid:62
given
introduction
alc
description
logics
general
incomplete
interested
reader
may
consult
schmidt-schauß
smolka
baader
respectively
forward
backward
chaining
diﬀer
direction
reasoning
reason-
ing
used
derive
implicit
knowledge
ontologies
applying
terminological
knowledge
explicitly
modelled
data
forward
chaining
data-driven
meaning
reasoning
start
existing
data
infer
new
knowledge
long
possible
given
two
example
class
subsumption
rules
equation
cid:118
cid:116
cid:118
forward
chaining
approach
searches
rules
matching
antecedents
assumes
true
consequents
equation
shows
example
data
may
express
approaches
large-scale
owl
reasoning
class
next
matched
antecedents
example
rules
hence
reasoned
class
cid:116
cid:116
backward
chaining
hand
goal-driven
divides
goal
smaller
subgoals
tries
resolve
matching
rules
true
consequents
assuming
true
antecedents
backward
chaining
reasons
data
matching
initial
goal
likewise
equation
illustrates
backward
chaining
application
assuming
class
cid:116
cid:116
following
sections
explain
approaches
used
semantic
web
reasoning
advantages
section
4.1
presents
common
way
use
forward
chaining
task
also
presenting
typical
programming
model
overview
implemented
reasoner
subsequently
section
4.2
discusses
application
backward
chaining
reasoning
billions
triples
analogously
main
properties
approaches
implementation
shown
4.1
materialisation
materialisation
forward
chaining
approach
idea
behind
compute
inferences
prior
reasoning
storing
later
querying
section
discussing
important
advantages
disadvantages
technique
common
programming
model
called
mapreduce
explained
furthermore
reasoner
using
mapreduce
presented
computing
inferences
ﬁrst
allows
fast
query
answering
comparable
lookups
database
hand
initial
materialisation
process
time
memory
consuming
example
owl
sameas
one
commonly
found
axioms
according
hogan
used
express
equivalent
individuals
reasoner
would
na¨ıvely
implemented
full
closure
would
corpus
containing
052
equivalent
individuals
hogan
prospected
092
434
704
triples
additional
two
billion
individuals
included
statements
another
downside
materialisation
must
done
anew
every
time
data
updated
due
nature
semantic
web
data
may
change
frequently
hence
regular
updates
necessary
ensure
recent
results
mapreduce
mapreduce
programming
model
developed
dean
ghemawat
google
inc.
goal
process
big
amounts
data
eﬃciently
tries
achieve
allowing
distributed
parallel
data
processing
thus
reducing
load
single
machines/cores
frequently
used
implementation
apache
hadoop3
mapreduce
also
https
//hadoop.apache.org/
last
accessed
march
2015
17:30
approaches
large-scale
owl
reasoning
used
reasoning
semantic
web
data
becomes
forward
chaining
approach
process
split
three
consecutive
steps
described
dean
ghemawat
map
ﬁrst
phase
describes
act
pre-processing
input
data
list
key-value
pairs
result
every
processed
key-value
pair
immediately
emitted
thus
process
may
parallelised
hence
speed
data
processing
method
signature
given
map
list
diﬀerent
indices
express
potentially
diﬀerent
datatypes
shuﬄe
collects
results
ﬁrst
phase
groups
key
hence
datatypes
remain
method
signature
given
shuffle
list
list
list
reduce
phase
values
key
processed
values
merged
together
returned
smaller
result
set
avoid
load
complete
data
memory
reduce
phase
given
iterator
values
list
returned
values
datatype
intermediate
values
returned
mapping
phase
signature
given
reduce
list
list
however
commonly
used
implementation
apache
hadoop
liberal
concerning
domain
return
values
following
method
signature
reduce
list
list
similar
map
phase
reduce
phase
generally
executable
parallel
fig
rule
rdf
type
rdfs
subclassof
rdf
type
ﬁgure
taken
modiﬁed
explicitly
include
shuﬄe
phase
mapreduce
example
process
figure
illustrates
mapreduce
application
ontological
rule
example
two
triples
rule
antecedent
share
common
variable
hence
selected
key
map
phase
pre-processing
shuﬄing
groups
results
key
reduce
phase
produces
output
drawn
intermediate
results
matched
consequent
approaches
large-scale
owl
reasoning
point
full
reasoning
process
may
already
ﬁnished
reason
inferred
knowledge
matches
part
rule
antecedent
anew
mapreduce
applied
reasoning
trivial
task
needs
one
run
illustrated
rule
figure
instead
multiple
diﬃculties
trying
implement
approach
way
relatively
light
space
time
consumption
presented
next
section
together
example
mapreduce
algorithm
webpie
example
implementation
mapreduce
urbani
employ
mapreduce
reasoner
web-scale
inference
engine
short
webpie
reasoning
owl
pd*
rules
authors
discuss
shown
problem
ﬁxed-point
iteration
expressing
mapreduce
process
must
repeated
new
triples
returned
results
additional
problem
duplicates
may
generated
apply
rules
multiple
times
besides
trying
generate
duplicates
possible
throughout
reduce
phase
additional
mapreduce
step
added
solely
matches
duplicates
removes
map
phase
step
iterates
triples
returns
triples
key
removes
duplicates
succeeding
shuﬄe
phase
reduce
phase
triples
emitted
inferred
distinguish
original
input
triples
general
urbani
try
execute
mapreduce
steps
possible
yet
processing
rules
together
others
either
possible
would
heavy
impact
performance
thus
authors
implement
various
mapreduce
steps
focus
certain
rules
one
discussed
example
algorithm
shown
listing
1.1.
calculates
subclass
relations
separated
map
reduce
method
shown
line
line
respectively
algorithm
operates
triples
either
rdf
type
rdfs
subclassof
predicate
depending
predicate
map
phase
uses
diﬀerent
ﬂags
keys—in
case
either
1—together
triple
subject
value
associated
key
input
triple
object
considering
example
input
triple
rdfs
subclassof
output
key
ﬂag
subject
value
reduce
method
ﬁrst
removes
duplicates
within
values
sake
simplicity
values
referred
classes
lines
tbox
triples
matching
classes
subject
loaded
memory
correspond
classes
superclasses
continuing
earlier
example
triple
rdfs
subclassof
tbox
results
added
list
superclasses
reduce
method
distinguishes
input
values
based
formerly
associated
predicate
original
triple
indicated
key
ﬂag
cases
method
iterates
superclasses
checks
currently
processed
superclass
already
contained
set
classes
prevent
duplicates
whenever
ensured
method
returns
new
triple
associated
key
key
irrelevant
scenario
pseudocode
reduce
method
approaches
large-scale
owl
reasoning
returns
null
triple
models
original
input
subject
either
type
matching
superclass
also
subclass
superclass
thus
inferred
triples
returned
respect
class
hierarchy
formerly
given
example
would
rdfs
subclassof
ype
map
key
key
key
key
emit
key
reduce
key
uniq
add
switch
key
case
emit
new
key
type
cid:45
cid:44
case
emit
new
key
cid:45
cid:44
listing
1.1.
algorithm
rdfs
subclass
reasoning
initially
presented
urbani
listing
features
corrected
simpliﬁed
version
including
changes
urbani
urbani
present
approaches
tackling
diﬃculties
faced
throughout
building
webpie
however
solutions
mostly
tightly
coupled
ruleset
owl
pd*
nevertheless
also
propose
two
generic
optimisation
strategies
tboxes
commonly
lot
smaller
aboxes
reasoning
data
semantic
web
tboxes
often
times
fully
loaded
memory
also
done
algorithm
shown
listing
1.1.
resulting
advantage
triples
instances
streamed
thus
directly
processed
urbani
note
possible
approaches
large-scale
owl
reasoning
rules
require
joins
multiple
instance
triples
antecedent
equation
shows
rule
owl
pd*
ruleset
owl
sameas
owl
sameas
owl
sameas
triples
antecedent
matching
instances
abox
must
looked
authors
propose
solution
concretely
aﬀected
owl
pd*
rules
however
also
describe
common
technique
reducing
overhead
created
rules
considering
owl
sameas
axiom
equation
input
modiﬁed
synonymous
instances
replaced
unique
identiﬁer
representing
entire
equivalence
class
e.g
result
required
space
computation
time
reduced
drastically
although
highlighted
bottlenecks
become
clear
applying
mapreduce
reasoning
billions
triples
complex
task
albeit
reoccurring
problems
shared
owl
sublanguages
many
optimisation
approaches
tailored
concrete
rules
therefore
lack
eﬃcient
universal
solutions
4.2
backward
chaining
backward
chaining
reasoning
done
runtime
query
posed
hence
prior
computation
needed
backward
chaining
two
advantages
materialisation
described
urbani
first
need
precomputation
due
runtime
reasoning
neither
generally
need
computing
full
closure
reasoning
solely
needs
done
far
required
answer
query
one
result
application
exclusively
using
backward
chaining
may
instantly
usable
without
prior
time-
space-consuming
computation
second
results
query
consider
recent
data
modiﬁcations
changes
happen
data
deletions
additions
instantly
retrievable
reasoning
done
query
rewriting
furthermore
means
changes
applied
data
computationally
memory-intense
recomputation
done
however
backward
chaining
also
faces
great
disadvantage
compared
materialisation
reasoning
must
done
every
new
query
answering
often
time-consuming
whereas
materialisation
query
matching
instances
may
directly
returned
fully
reasoned
knowledge
base
query
rewriting
using
backward
chaining
reasoning
ontologies
form
query
rewriting
used
concept
query
rewriting
reformulate
query
query
respects
ontology
terminological
axioms
retrieves
matching
instances
various
options
concerning
query
transformed
logical
rewriting
even
concrete
sql
query
rewriting
actively
used
context
ontology-based
data
access
short
obda
approaches
large-scale
owl
reasoning
obda
describes
idea
storing
aboxes
traditional
databases
like
relational
database
management
systems
allowing
use
ontologic
constraints
owl
often
preferred
language
designed
implicitly
obda
intended
purpose
obda
data
access
oﬀered
ontology
intermediate
layer
queries
independent
actual
data
storage
allows
uniﬁed
semantical
access
diﬀerent
data
sources
therefore
scalable
obda-enabled
reasoning
may
become
special
interest
semantic
web
reasoning
due
data
highly
diverse
despite
existing
potential
yet
reasoners
using
query
rewriting
scaling
billions
triples
especially
lack
reasoners
focus
implementing
concept
obda
pertain
scalability
thus
subsequent
section
presents
reasoner
build
around
obda
instead
uses
illustrative
query
rewriting
approach
supporting
reasoning
billions
triples
querypie
prevalently
used
programming
model
query
rewriting
like
mapreduce
materialisation
urbani
query
rewriting
owl
pd*
building
reasoning
tree
query
root
matching
data
leaves
backward
chaining
fashion
query—an
input
triple
pattern—is
matched
rule
consequents
antecedents
used
new
query
triples
figure
depicts
reasoning
tree
built
example
query
rdf
type
person
branches
containing
rules
connected
fig
example
reasoning
tree
rule
names
replaced
match
paper
equation
numbers
approaches
large-scale
owl
reasoning
logical
ors
whereas
triples
connected
ands
way
instances
leaves
may
returned
match
rule
parent
node
however
necessary
instance
triples
match
rules
branch
nodes
thus
matching
triples
may
returned
disregarding
rules
inferred
given
example
consequents
equations
match
input
query
rdf
type
rdfs
subclassof
rdf
type
rdfs
subpropertyof
antecedents
bound
accordingly
substituting
variables
possible
antecedent
equation
example
bound
person
allows
apply
equation
variables
antecedents
bound
reasoning
continued
rdf
type
owl
symmetricproperty
tree
building
ﬁnishes
branch
built
branch
built
deep
yet
rules
applicable
matching
instances
retrieved
knowledge
base
process
may
consume
lot
time
also
space
thus
urbani
propose
two
optimisation
strategies
precomputation
frequently
appearing
branches
tree-pruning
describes
early
discovery
branches
return
results
hence
stopping
follow
implementing
precomputation
eﬀectiveness
deﬁned
regular
selected
branches
appear
urbani
focus
optimisation
call
terminological
triple
patterns
deﬁne
triple
patterns
whose
object
predicate
term
rdfs
owl
vocabulary
operate
example
given
equation
rdfs
subpropertyof
rdf
type
due
commonly
smaller
tbox
semantic
web
data
terminological
triple
patterns
yet
aﬀect
many
queries
using
forward
chaining
precomputing
would
require
calculation
full
closure
backward
chaining
applied
selected
terminological
triple
patterns
tree
built
bottom
iterative
backward
chaining
illustrated
detail
advantage
exclusively
reasoning
runtime
lost
using
precom-
putation
however
still
much
faster
process
full
materialisation
especially
remains
fast
enough
allow
frequent
updates
typically
found
semantic
web
data
however
approach
hence
longer
classiﬁed
pure
query
rewriting
actually
hybrid
approach
approaches
large-scale
owl
reasoning
get
cid:45
cid:44
perform
add
add
knowledgebase
apply
applyru
return
listing
1.2.
reasoner
operates
precomputed
terminological
triple
patterns
given
urbani
small
modiﬁcations
match
paper
pseudocode
style
listing
1.2
shows
algorithm
pseudocode
used
urbani
reason
precomputing
completed
hence
call
termi-
nological
independent
reasoner
ﬁrst
step
rules
retrieved
whose
consequent
general
query
pattern
corresponds
or-levels
reasoning
tree
iterating
rules
rule
variables
subsequently
bound
matches
query
pattern
shown
line
second
loop
antecedents
rule
processed
corresponds
and-levels
reasoning
tree
terminological
independent
reasoner
recursively
called
construct
branch
due
precomputing
step
needed
currently
processed
antecedent
terminological
checked
line
next
lookup
knowledge
base
done
also
includes
already
computed
terminological
triple
patterns
every
branch
rule
computed
rule
applied
previously
computed
antecedents
end
applied
rules
returned
meaning
variables
bound
match
query
pattern
second
optimisation
strategy
tree-pruning
used
built
upon
formerly
precomputed
terminological
triple
patterns
whilst
backward
chaining
rules
whose
antecedent
matches
terminological
triple
patterns
prioritised
patterns
return
instances
rule
applied
speciﬁc
patterns
processing
branches
known
return
results
therefore
stopped
early
thus
lot
unnecessary
reasoning
prevented
next
section
selection
reasoners
using
forward
and/or
backward
chaining
presented
however
reasoners
using
backward
chaining
approaches
either
scale
well
partially
support
owl
sublanguage
approaches
large-scale
owl
reasoning
querypie
likely
ﬁrst
reasoner
scaling
billions
triples
reasoning
runtime
4.3
reasoners
besides
webpie
querypie
several
reasoners
using
forward
and/or
backward
chaining
section
gives
overview
selection
available
reasoners
owlim
semantic
repository
allowing
storage
reasoning
knowledge
bases
employing
full
materialisation
bishop
bojanov
state
owlim
capable
work
various
rulesets
including
owl
pd*
owl
well
owl
owlim
divided
free-for-use
swiftowlim
commercial
bigowlim
bishop
state
swiftowlim
developed
in-memory
reasoning
smaller
datasets
according
authors
bigowlim
hand
developed
reasoning
billions
triples
various
optimisations
needed
one
special
treatment
owl
sameas
axiom
bigowlim
uses
canonical
representation
equivalence
class
similar
webpie
approach
furthermore
employs
backward
chaining
approach
data
deletion
prevent
new
full
materialisation
according
bishop
use
allows
bigowlim
applicable
frequently
updated
data
typical
data
semantic
web
another
yet
non-commercial
reasoner
supporting
multiple
proﬁles
trowl
interface
multiple
reasoners
quill
pellet
besides
support
owl
owl
also
partial
support
tractable
reasoning
owl
using
reasoners
like
pellet
allows
full
owl
reasoning
support
reasoning
longer
polynomial
time
reasoning
owl
done
using
backward
chaining
namely
query
rewriting
owl
hand
reasoned
forward
chaining
manner
tachmazidis
presented
reasoner
employs
apache
hadoop
materialisation
knowledge
uses
rulesets
implementing
defeasible
logic
motivation
developing
reasoner
defeasible
logic
create
inconsistency-tolerant
reasoning
able
deal
data
poor
quality
although
reasoner
operate
owl
rdf
data
concept
may
high
relevance
semantic
web
data
diﬀerent
sources
likely
diﬀerent
quality
making
use
parallelisation
mapreduce
tachmazidis
able
build
reasoner
scaling
billions
triples
stoilos
developed
reasoner
extension
owl
pd*
supports
fuzzy
logic
allows
expressing
vagueness
already
described
section
work
also
uses
mapreduce
implementation
apache
hadoop
authors
followed
optimisation
strategies
webpie
adapted
whenever
necessary
support
fuzzy
logic
result
stoilos
claim
created
fuzzy
reasoner
performance
comparable
webpie
conclusion
virtuoso
universal
server4
web
server
triple
store
furthermore
owl
reasoner
allows
backward
well
forward
chaining
support
restricted
subset
owl
moreover
except
rdf
reasoner
implementation
seem
implementations
targeting
web-scale
triples
apache
jena5
framework
written
java
support
building
semantic
web
applications
included
owl
reasoner
supports
forward
backward
chaining
well
hybrid
two
however
throughout
research
paper
implementation
using
jena
reasoner
could
found
would
scale
allow
reasoning
billions
triples
another
reasoner
f-owl
primarily
uses
backward
chaining
authors
call
speed-up
strategy
tabling
approach
store
results
already
reasoned
triples
look
whenever
possible
result
ﬁrst
queries
processed
slowly
system
becomes
increasingly
faster
average
subsequent
queries
however
supports
owl
full
neither
complete
decidable
according
website6
f-owl
updated
since
2003.
additionally
according
authors
scale
thus
unsuitable
reasoning
billions
triples
conclusion
grand
challenge
large-scale
reasoning
eﬀectively
use
reduce
time
space
consumption
essentially
approaches
diﬀer
regular
reasoning
methods
yet
performance
optimisation
crucial
additionally
choice
ontology
language
may
heavy
impact
complexity
reasoning
owl
pd*
owl
commonly
used
forward
chaining
approaches
whereas
owl
mainly
used
backward
chaining
reasoners
furthermore
reasoning
semantic
web
extensions
languages
interest
example
using
defeasible
logic
may
allow
reasoning
data
poor
quality
diﬀerent
sources
likewise
obda
may
suitable
technology
working
reasoning
semantic
web
data
reasoning
big
knowledge
bases
modelled
owl
still
rarely
done
using
backward
chaining
instead
materialisation
common
approach
however
materialisation
alone
semantic
web
quickly
changing
nature
thus
future
research
consider
large-scale
reasoning
using
hybrid
approach
backward
forward
chaining
moreover
requirement
analysis
features
needed
properly
modelling
reasoning
semantic
web
data
could
helpful
due
diversity
data
prior
separation
topics
would
probably
beneﬁcial
http
//virtuoso.openlinksw.com/
last
accessed
march
22:00
https
//jena.apache.org/index.html
last
accessed
march
08:30
http
//fowl.sourceforge.net/
last
accessed
march
2015
22:00
bibliography
apache
software
foundation
apache
hadoop
2.6.0
mapreduce
tutorial
https
//hadoop.apache.org/docs/r2.6.0/hadoop-mapreduce-client/
hadoop-mapreduce-client-core/mapreducetutorial.html
nov
2014
accessed
jan
2015
20:30
baader
description
logic
handbook
theory
implementation
applications
cambridge
university
press
2003
http
//books.google
com/books
id=riseokw5i6sc
berners-lee
hendler
lassila
semantic
web
scientiﬁc
american
284
28–37
2001
http
//isel2918929391.googlecode.com/
svn-history/r347/trunk/rpc/slides/p01_thesemanticweb.pdf
bishop
bojanov
implementing
owl
owl
rule-sets
owlim
owled
vol
796
2011
http
//webont.com/owled/
2011/papers/owled2011_submission_3.pdf
bishop
kiryakov
ognyanoﬀ
peikov
tashev
velkov
owlim
family
scalable
semantic
repositories
semantic
web
33–
2011
http
//iospress.metapress.com/index/443n1l4245205818
pdf
cao
s.t.
nguyen
l.a.
sza
cid:32
las
web
ontology
rule
language
owl
computational
collective
intelligence
technologies
applications
254–264
springer
2011
http
//link.springer.com/
chapter/10.1007/978-3-642-23935-9_25
covington
m.a
defeasible
logic
embedded
microcontroller
applied
intelligence
259–264
2000
http
//link.springer.com/article/
10.1023/a:1026520227851
dean
ghemawat
mapreduce
simpliﬁed
data
processing
large
clusters
proceedings
6th
conference
symposium
opearting
systems
design
implementation
volume
osdi
vol
51.
usenix
association
san
francisco
2004
https
//dl.acm.org/citation
cfm
id=1251264
dentler
cornet
ten
teije
keizer
comparison
reasoners
large
ontologies
owl
proﬁle
semantic
web
71–87
2011
http
//iospress.metapress.com/index/n434780643m2n3u6.pdf
proc
ssws
2008
http
//www.csee.umbc.edu/courses/graduate/691/spring12/
03/papers/vosarticlewebscalerdf.pdf
erling
mikhailov
towards
web
scale
rdf
garc´ıa
a.j.
simari
g.r
defeasible
logic
programming
argumentative
approach
theory
practice
logic
programming
95–138
2004
http
//journals.cambridge.org/abstract_s1471068403001674
gottlob
orsi
pieris
ontological
queries
rewriting
op-
timization
extended
version
arxiv:1112.0343
dec
2011
http
//arxiv.org/abs/1112.0343
arxiv
1112.0343
bibliography
grau
b.c.
horrocks
motik
parsia
patel-schneider
sattler
owl
next
step
owl
web
semantics
science
services
agents
world
wide
web
309–322
2008
http
//www
sciencedirect.com/science/article/pii/s1570826808000413
hogan
delbru
umbrich
rdfs
owl
reasoning
linked
data
rdfs
owl
reasoning
linked
data
2013
http
//ir.library
nuigalway.ie/xmlui/handle/10379/4385
hogan
pan
j.z.
polleres
decker
saor
template
rule
op-
timisations
distributed
reasoning
billion
linked
data
triples
semantic
web–iswc
2010
337–353
springer
2010
http
//link.springer.com/chapter/10.1007/978-3-642-17746-0_22
hogan
zimmermann
umbrich
polleres
decker
scalable
distributed
methods
entity
matching
consolidation
disambigua-
tion
linked
data
corpora
web
semantics
science
services
agents
world
wide
web
76–110
2012
http
//www.sciencedirect
com/science/article/pii/s1570826811000813
horrocks
patel-schneider
reducing
owl
entailment
description
logic
satisﬁability
web
semantics
science
services
agents
world
wide
web
345–357
2004
http
//www.sciencedirect.com/
science/article/pii/s1570826804000095
ter
horst
h.j
completeness
decidability
complexity
entailment
rdf
schema
semantic
extension
involving
owl
vocabulary
web
semantics
science
services
agents
world
wide
web
79–115
2005
http
//www.sciencedirect.com/science/article/pii/
s1570826805000144
imprialou
stoilos
grau
b.c
benchmarking
ontology-based
query
rewriting
systems
aaai
2012
http
//www.image.ntua.gr/papers/
733.pdf
kikot
kontchakov
zakharyaschev
tractability
obda
owl
ceur
workshop
proceedings
2011
http
//eprints
bbk.ac.uk/6635/
kiryakov
ognyanov
manov
owlim–a
pragmatic
semantic
repository
owl
web
information
systems
engineering–wise
2005
workshops
182–192
springer
2005
http
//link.springer
com/chapter/10.1007/11581116_19
kr¨otzsch
owl
proﬁles
introduction
lightweight
ontology
languages
reasoning
web
semantic
technologies
advanced
query
answering
information
systems
applications
incl
internet/web
hci
vol
7487
112–183
springer-verlag
berlin
heidelberg
2012
http
//link.springer.com/chapter/10.1007/978-3-642-33158-9_4
liu
wang
large
scale
fuzzy
pd*
reasoning
using
mapreduce
semantic
web–iswc
2011
405–420
springer
2011
http
//link.springer.com/chapter/10.1007/978-3-642-25073-6_26
lukasiewicz
expressive
probabilistic
description
logics
artiﬁcial
intel-
ligence
172
6–7
852–883
apr
2008
http
//www.sciencedirect.com/
science/article/pii/s0004370207001877
bibliography
mcguinnes
d.l.
van
harmelen
owl
web
ontology
language
overview
w3c
recommendation
2004
http
//www.w3.org/tr/2004/
rec-owl-features-20040210/
motik
grau
b.c.
horrocks
fokoue
lutz
owl
web
ontology
language
proﬁles
second
edition
w3c
recommendation
2012
http
//www.w3.org/tr/2012/rec-owl2-profiles-20121211/
nute
defeasible
logic
web
knowledge
management
decision
sup-
port
151–169
springer
2003
http
//link.springer.com/chapter/
10.1007/3-540-36524-9_13
pan
j.z.
ren
jekjantuk
garcia
reasoning
fma
ontologies
trowl
ore.
107–113
2013
http
//www.cs.ox.ac.uk/
isg/conferences/ore2013/paper_18.pdf
patel-schneider
p.f.
hayes
horrocks
owl
web
ontology
language
semantics
abstract
syntax
w3c
recommendation
2004
http
www.w3.org/tr/2004/rec-owl-semantics-20040210/
schmidt-schauß
smolka
attributive
concept
descriptions
intelligence
1–26
1991
http
//www
complements
artiﬁcial
sciencedirect.com/science/article/pii/000437029190078x
shadbolt
hall
berners-lee
semantic
web
revisited
intelli-
gent
systems
ieee
96–101
2006
http
//ieeexplore.ieee.org/
xpls/abs_all.jsp
arnumber=1637364
shi
maly
zeil
scalable
backward
chaining-based
reasoner
semantic
web
international
journal
advances
intelligent
systems
23–38
2014
http
//www.thinkmind.org/index.php
view=
article
articleid=intsys_v7_n12_2014_3
smith
m.k.
welty
mcguinness
d.l
owl
web
ontology
lan-
guage
guide
w3c
recommendation
2004
http
//www.w3.org/tr/2004/
rec-owl-guide-20040210/
stoilos
stamou
g.b.
tzouvaras
pan
j.z.
horrocks
fuzzy
owl
uncertainty
semantic
web
owled
2005
http
//www
image.ntua.gr/papers/398.pdf
tachmazidis
antoniou
flouris
kotoulas
scalable
nonmono-
tonic
reasoning
rdf
data
using
mapreduce
proceedings
joint
workshop
scalable
high-performance
semantic
web
sys-
tems
75–90
2012
http
//planet-data.eu/sites/default/files/
publications/ssws
2bhpcsw12.pdf
tachmazidis
antoniou
flouris
kotoulas
mccluskey
t.l
large-scale
parallel
stratiﬁed
defeasible
reasoning
2012
http
//eprints
hud.ac.uk/15918
team
o.s.d
openlink
virtuoso
universal
server
documentation
tech
2014
http
//docs.openlinksw.com/virtuoso/rdfsparqlrule
rep.
html
thomas
pan
j.z.
ren
trowl
tractable
owl
reasoning
infrastructure
semantic
web
research
applications
431–435
springer
2010
http
//link.springer.com/chapter/10.1007/
978-3-642-13489-0_38
bibliography
urbani
scalable
distributed
rdfs/owl
reasoning
using
mapreduce
master
thesis
amsterdam
netherlands
2009
urbani
kotoulas
maassen
van
harmelen
bal
owl
reasoning
webpie
calculating
closure
100
billion
triples
semantic
web
research
applications
213–227
springer
2010
http
//link.springer.com/chapter/10.1007/978-3-642-13486-9_15
urbani
kotoulas
maassen
van
harmelen
bal
webpie
web-scale
parallel
inference
engine
using
mapreduce
web
semantics
science
services
agents
world
wide
web
59–75
2012
http
//www.sciencedirect.com/science/article/pii/s1570826811000345
urbani
kotoulas
oren
van
harmelen
scalable
distributed
reasoning
using
mapreduce
springer
2009
http
//link.springer.com/
chapter/10.1007/978-3-642-04930-9_40
urbani
piro
van
harmelen
bal
hybrid
reasoning
owl
semantic
web
423–447
jan
2014
http
//dx.doi.org/10.3233/
sw-130120
urbani
van
harmelen
schlobach
bal
querypie
backward
reasoning
owl
horst
large
knowledge
bases
semantic
web–iswc
2011
730–745
springer
2011
http
//link.springer
com/content/pdf/10.1007/978-3-642-25073-6_46.pdf
xiao
rezk
rodr´ıguez-muro
calvanese
rules
on-
tology
based
data
access
web
reasoning
rule
systems
157–172
springer
2014
http
//link.springer.com/chapter/10.1007/
978-3-319-11113-1_11
zadeh
l.a.
fuzzy
sets
information
control
338–
353
jun
1965
http
//www.sciencedirect.com/science/article/pii/
s001999586590241x
zou
finin
chen
f-owl
inference
engine
semantic
web
formal
approaches
agent-based
systems
238–248
springer
2005
http
//link.springer.com/chapter/10.1007/978-3-540-30960-4_16
