formal
veriﬁcation
autonomous
vehicle
platooning
maryam
kamali1
louise
dennis1
owen
mcaree1
michael
fisher2
sandor
veres2
1department
computer
science
university
liverool
2department
mechanical
engineering
university
shefﬁeld
february
2016
abstract
coordination
multiple
autonomous
vehicles
convoys
platoons
expected
highways
near
future
however
platoons
deployed
new
autonomous
behaviours
vehicles
platoons
must
certiﬁed
appropriate
representation
vehicle
platooning
multi-
agent
system
agent
captures
autonomous
decisions
carried
vehicle
order
ensure
autonomous
decision-making
agents
vehicle
platoons
never
violate
safety
requirements
use
formal
veriﬁcation
however
formal
veriﬁcation
technique
used
verify
agent
code
scale
full
system
global
veriﬁcation
technique
capture
essential
veriﬁcation
autonomous
behaviour
use
combination
two
approaches
mixed
strategy
allows
verify
safety
requirements
model
system
actual
agent
code
used
program
autonomous
vehicles
introduction
driverless
cars
regularly
appear
media
neither
driverless
fully
autonomous
legal
constraints
ensure
must
always
responsible
human
vehicle
however
although
fully
autonomous
road
vehicles
remain
fu-
turistic
automotive
industry
working
variously
called
road
trains
car
convoys
vehicle
platoons
vehicle
autonomously
follows
one
front
road
front
vehicle
platoon/convoy/train
driven
manually
technology
introduced
automotive
industry
order
improve
safety
efﬁciency
vehicles
congested
roads
especially
useful
vehicles
trucks/lorries
road
multi-lane
highway
platoons
vehicle
clearly
needs
communicate
others
least
one
immediately
front
one
immediately
behind
vehicle-to-vehicle
v2v
communication
used
lower
continuous
control
system
level
adjust
vehicle
position
lanes
spacing
vehicles
v2v
also
used
higher
levels
example
communicate
joining
requests
leaving
requests
commands
dissolving
platoon
traditional
approach
implement
software
vehicle
terms
hybrid
hierarchical
control
systems
analyse
using
hybrid
systems
techniques
however
behaviours
requirements
automotive
platoons
become
complex
move
towards
much
greater
autonomy
within
vehicle
although
human
vehicle
still
responsible
autonomous
control
deals
much
complex
negotiation
allow
vehicles
leave
join
etc
traditional
approaches
involve
hybrid
automata
continuous
aspects
encapsulated
within
discrete
states
discrete
behaviours
expressed
tran-
sitions
states
drawback
combining
discrete
decision-making
continuous
control
within
hybrid
automaton
difﬁcult
separate
two
high-level
decision-making
continuous
control
concerns
addition
repre-
sentation
high-level
decision-making
become
unnecessarily
complex
increasingly
common
within
autonomous
systems
use
hybrid
autonomous
systems
architecture
discrete
decision-making
component
sepa-
rated
continuous
control
system
behaviour
discrete
part
de-
scribed
much
detail
particular
agent
paradigm
used
style
architecture
using
agent
paradigm
improves
system
design
engineering
perspective
also
facilitates
system
analysis
veriﬁcation
in-
deed
use
architecture
actually
implementing
automotive
platoons
aim
analyse
system
veriﬁcation
safety
certiﬁcation
inevitable
concern
development
autonomous
road
vehicles
verifying
safety
reliability
automotive
platooning
cur-
rently
one
main
challenges
faced
automotive
industry
veriﬁcation
systems
challenging
due
complex
hybrid
nature
separating
discrete
continuous
concerns
potentially
allows
reason
decision-making
components
isolation
ensure
decision-making
compo-
nent
ever
deliberately
chooses
unsafe
state
however
use
agent
concept
alone
enough
purposes
since
still
make
autonomous
deci-
sions
opaque
way
order
able
reason
formally
verify
choices
system
makes
need
rational
agent
makes
decisions
explicit
representations
reasons
making
allowing
describe
autonomous
system
chooses
makes
particular
choices
belief-desire-intention
bdi
model
one
widely
used
conceptual
models
describing
rational
agents
actually
implementing
bdi-style
agent
characterised
beliefs
desires
intentions
beliefs
rep-
resent
agent
views
world
desires
represent
objectives
ac-
complished
intentions
set
tasks
currently
undertaken
agent
achieve
desires
bdi-style
agent
set
plans
determining
agent
acts
based
beliefs
goals
event
queue
events
perceptions
environment
internal
subgoals
stored
paper
use
gwen-
dolen
programming
language
developed
veriﬁable
bdi-style
programming
implement
agent-based
decision-making
automotive
platoon
captures
high-level
autonomous
decision-making
within
vehicle
part
safety
certiﬁcation
need
verify
agent
decisions
especially
combination
vehicles
autonomous
rational
agent
makes
decisions
actions
perform
etc
based
beliefs
goals
intentions
agent
holds
time
use
model-checking
approach
demonstrate
rational
agent
always
behaves
line
platoon
requirements
never
deliber-
ately
chooses
options
end
unsafe
states
verify
properties
rational
agent
code
using
ajpf
model-checker
one
model-checkers
able
cope
complex
properties
bdi
agents
unfortunately
two
drawbacks
using
ajpf
currently
ajpf
support
veriﬁcation
timed
behaviours
ajpf
resource
heavy
used
verify
whole
system
consequently
paper
use
combined
methodology
veriﬁcation
automotive
pla-
tooning
evaluate
timing
behaviour
use
timed-automata
abstraction
verify
system
using
uppaal
model-checker
evaluate
autonomous
decisions
apply
ajpf
individual
agents
together
abstraction
vehi-
cles/agents
furthermore
describe
two
approaches
modeling
i.e
bdi
models
timed-automata
combined
provide
appropriate
basis
veri-
fying
behaviour
individual
agents
whole
system
remainder
paper
organised
follows
section
automotive
platoon
platoon
requirements
presented
section
hybrid
agent
archi-
tecture
agent-based
decision-making
automotive
platoon
described
section
analysis
veriﬁcation
automotive
platoon
considered
finally
section
concluding
remarks
provided
future
work
discussed
automotive
platoons
automotive
platoon
enabling
road
vehicles
travel
group
led
vehi-
cle
driven
professional
driver
following
vehicles
i.e
members
platoon
controlled
autonomously
vehicles
equipped
low-level
longitudinal
controlling
speed
lateral
controlling
steering
control
sys-
tems
travel
platoon
pre-deﬁned
gaps
addition
v2v
com-
munication
also
connects
vehicles
agent
level
lead
vehicle
via
agent
effectively
carries
coordination
platoon
setting
parameters
creating
cer-
tiﬁcates
joining
leaving
etc
individual
vehicle
observes
environment
follows
incoming
commands
lead
agent
follows
outline
set
high-level
automotive
platoon
concepts
procedures
including
join
leave
platoon
addition
initial
requirements
procedures
development
safe
reliable
platooning
explained
derive
formal
properties
veriﬁed
joining
platoon
2.1
vehicle
join
platoon
either
end
middle
different
control
strategies
used
joining
procedure
follows
non-member
vehicle
sends
joining
request
platoon
leader
expressing
intended
position
platoon
vehicle
requested
join
rear
leader
sends
back
agree-
ment
provided
maximum
platoon
length
reached
platoon
currently
normal
operation
vehicle
requests
join
front
example
vehicle
maxi-
mum
platoon
length
reached
leader
sends
increase
space
command
vehicle
leader
informed
enough
spacing
created
approx
metres
sends
back
agreement
joining
vehicle
upon
receipt
agreement
joining
vehicle
changes
lane
changing
lane
manual
procedure
performed
driver
vehicle
correct
lane
automatic
speed
controller
enabled
approaches
preceding
vehicle
vehicle
close
enough
preceding
vehicle
less
metres
automatic
steering
controller
enabled
sends
acknowledgement
leader
ﬁnally
leader
sends
decrease
space
command
vehicle
leader
informed
spacing
back
normal
approximately
metres
replies
acknowledgement
order
ensure
safe
joining
operation
following
requirements
pre-
served
within
agent-based
decision-making
components
automotive
platoon
vehicle
must
initiate
joining
platoon
i.e.
changing
lane
received
conﬁrmation
leader
autonomous
control
enabled
joining
vehicle
must
approach
pre-
ceding
vehicle
correct
lane
automatic
steering
controller
must
enabled
joining
vehicle
sufﬁciently
close
preceding
vehicle
2.2
leaving
platoon
vehicle
request
leave
platoon
time
leaving
procedure
platoon
member
sends
leaving
request
leader
waits
authorisa-
tion
preceding
vehicle
upon
receipt
leave
authorisation
vehicle
increases
space
maximum
spacing
achieved
vehicle
switches
speed
steering
controller
manual
changes
lane
ﬁnally
vehicle
sends
acknowledgement
leader
two
following
requirements
necessary
order
meet
agent-based
decision-making
components
automotive
platoon
except
emergency
cases
vehicle
must
leave
platoon
without
autho-
risation
leader
authorised
leave
autonomous
control
disabled
maximum
allowable
platoon
spacing
achieved
agent-based
development
automotive
platoon
employ
hybrid
agent
architecture
based
vehicle
real-time
continuous
control
vehicle
managed
feedback
controllers
imple-
mented
matlab
observing
environment
sensory
input
called
physical
engine
physical
engine
turn
communicates
abstraction
agent
extracts
discrete
information
streams
continuous
data
passes
decision-making
agent
decision-making
agent
rational
agent
directs
physical
engine
passing
instructions
abstrac-
tion
agent
instructions
decision-making
agent
abstraction
agent
interpreted
meaningful
instructions
physical
engine
provide
complex
environment
necessary
effective
simulation
testing
use
automotive
simulator
torcs
implement
environment
compo-
nent
architecture
physical
engine
implemented
matlab
abstraction
decision-making
agents
programmed
gwendolen
pro-
gramming
language
interface
torcs
matlab/simulink
developed
provides
means
control
vehicles
matlab
simulink
listing
shows
gwendolen
code
decision-making
agent
joining
procedure
follower
vehicle
gwendolen
syntax
needed
example
summarised
fig
essentially
gwendolen
extension
prolog-style
declarative
programming
incorporating
explicit
representa-
tions
goals
beliefs
plans
example
ﬁrst
plan
listing
line
7-12
denotes
follower
agent
sets
goal
join
platoon
sends
request
leader
waits
agreement
belief
become
true
changing
lane
plan
listing
line
14-19
executed
follower
agent
agree-
ment
belief
iteration
follower
agent
selects
plan
based
goals
beliefs
gwendolen
agent
also
perform
deductive
reasoning
beliefs
ex-
pressed
reasoning
rules
joining
scenario
follower
agent
de-
duces
goal
join
platoon
achieved
believes
prescribed
joining
steps
performed
represented
platoon-ok
belief
automotive
simulation
environmentphysical
engine
matlab/simulink
abstractionagentdecisionmakingagent
torcs
matlab/simulink
gwendolen
gwendolen
perform
goal
achievement
goal
believe
disbelieve
on-hold
believe
plan
guard
condition
guard
condition
action
perform
achieve
trigger
guard
body
perf
adding
new
goal
perform
actions
adding
new
goal
continuously
attempting
plans
associated
goal
agent
acquired
belief
adding
new
belief
removing
belief
waiting
belief
true
trigger
addition
goal
belief
guard
gives
conditions
plan
executed
body
stack
actions
performed
checking
belief
perceivable
checking
goal
added
action
causing
execution
figure
gwendolen
syntax
essentially
decision-making
agent
activity
proceeds
sequence
follower
goal
successfully
join
platoon
initiates
changing
lane
believes
received
agreement
leader
follower
achieves
joining
goal
believes
right
lane
automatic
speed
steering
controller
enabled
changing
lane
performed
manually
driver
long
speed
steering
controllers
switched
automatic
driver
needs
control
speed
steering
reasoning
rul
name
n−ok
name
send
name
name
name
name
name
platoon_m
send
message
platoon_m
n−ok
listing
follower
vehicle
code
joining
platoon
described
gwendolen
achievement
goal
mean-
ing
agent
continuously
attempts
plans
given
listing
believes
platoon-ok
true
belief
platoon-ok
denotes
vehicle
right
lane
automatic
controllers
enabled
also
determines
leader
received
acknowledgement
vehicle
conﬁrming
success-
fully
joined
platoon
subsequently
agent
deduces
reasoning
rule
line
joining
goal
indeed
achieved
veriﬁcation
4.1
veriﬁcation
methodology
visualise
overall
system
agent
gwendolen
program
comms
component
simple
transfer
protocol
vehicle
represents
particular
vehicular
system
interact
typically
automotive
control
system
together
environmental
inter-
actions
validated
simulation
using
torcs
automotive
simulation
physical
vehicles
using
jaguar
outdoor
rover
vehicles
limits
modelling/veriﬁcation
going
formally
verify
vehicular
control
systems
leave
standard
mathematical
usually
analytic
techniques
control
systems
ﬁeld
control
components
example
involving
following
prescribed
path
avoiding
local
obstacles
keeping
distance
object
etc
well-established
standard
instead
verify
autonomous
decisions
vehicles
make
captured
within
vehicle
agent
agent
represents
autonomous
decision-maker
within
vehicle
corresponds
part
human
driver
decisions
decisions
involve
deciding
turn
stop
unexpected
situations
etc
case
autonomous
vehicle
convoys/platoons
agent
hence
vehicle
decisions
concern
join
convoy
leave
emergency
etc
begin
abstracting
vehicle
control
systems
environmental
interactions
representing
one
potentially
complex
depending
vehi-
cle/environment
interactions
automaton
also
use
automaton
describe
simple
transfer
protocol
vehicles
use
communication
cases
use
timed
automata
simpliﬁed
architecture
commsagentcommsagentcommsagent
least
principle
leads
overarching
formal
model
describing
agent
behaviour
agent
automaton
comprises
added
modal
dimen-
sions
least
belief
intention
thus
formal
structures
allow
fully
represent
system
quite
complex
combining
timed
relations
well
relations
belief
intention
dimensions
describe
formal
model
detail
note
fusion
timed
bdi
structures
cid:104
inv
cid:105
ﬁnite
set
locations
nite
set
actions
ﬁnite
set
clocks
set
timed
edges
locations
inv
function
associating
location
clock
constraint
set
agents
provides
belief
relation
corresponding
kd45
modal
logic
agent
locations
provides
intention
relation
agent
locations
2ap
labelling
function
essentially
capturing
propositions
true
location
set
atomic
propositions
logic
interpreted
structures
combines
syntax
timed
temporal
logic
example
♦≤5ﬁnish
syntax
modal
logics
belief
desire
intention
example
bxstarted
i.e
agent
believes
started
true
principle
though
complex
could
provide
convoy
requirements
logic
build
structures
form
convoy
implementation
develop
model-checking
approach
combination
however
several
reasons
choose
abstract
separate
timed/agent
strands
follows
certiﬁcation
important
verify
actual
agent
program
used
vehicle
derived
model
consequently
utilise
pro-
gram
model
checking
approach
assess
correctness
agent
pro-
gram
formal
veriﬁcation
agent
autonomous
decisions
use
ajpf
extension
java
pathfinder
jpf
program
model
checker
gwendolen
allows
veriﬁcation
belief/intention
properties
detailed
implementations
communications
proto-
col
vehicular
control
environmental
interaction
use
abstract
formal
model
describe
rather
actual
code
communicationsagentprogramcommunicationsvehicle
control
environmentagentprogramcommunicationsvehicle
control
environmenttimed
automatonagentautomatontimedautomatontimedautomatonagentautomatontimedautomatontimedautomaton
jpf
explicit-state
program-checker
relatively
slow
ajpf
builds
bdi
programming
layer
top
jpf
least
order
magnitude
slower
consequently
ajpf
realistically
used
veriﬁcation
whole
system
addition
ajpf
yet
real-time
capabilities
verifying
timing
aspects
within
ajpf
difﬁcult
appear
problematic
several
useful
simpliﬁcations
context
verifying
autonomous
behaviour
formal
veriﬁcation
carry
con-
cerns
interaction
beliefs
intentions
etc
within
agent
extend
agents
checking
beliefs
intentions
etc
lo-
calised
within
agent
requirements
checked
timed
bdi
formulae
quite
sepa-
rate
i.e
♦≤5ﬁnish
bxstarted
never
♦≤5bxstarted
bx♦≤5ﬁnish
overall
logic
fusion
since
explicit
timing
constraints
within
agent
program
agents
fast
internal
computation
allows
deal
dimensions
separately
given
overall
system
wish
check
reduce
two
problems
individual
agent
within
verify
agent
properties
i.e
agent
within
untimed
environment
over-approximation
verify
timing
properties
i.e
whole
system
agent
program
replaced
untimed
automaton
describing
solely
input-output
behaviour
abstracting
internal
bdi
reasoning
explain
detail
giving
relevant
theorems
timed
automaton
untimed
automaton
achieved
over-approximation
allows
verify
cid:48
cid:107
comms
cid:48
cid:107
using
ajpf
note
going
timed
automaton
untimed
one
example
replacing
be-
haviours
♦≤3receive
♦receive
provides
over-approximation
hence
example
comms
cid:48
implies
comms
necessarily
converse
agent
model
untimed
automaton
achieved
extracting
model
agent
program
behaviour
removing
belief/intention
aspects
timed
automaton
commsagentprogram
aitimedautomaton
viuntimed
automaton
comms
agentprogram
aiuntimedautomaton
abstract
formal
veriﬁcation
using
uppaal
carried
whole
system
agents
abstracted
way
prove
important
properties
abstractions
simplicity
assume
consists
two
agents/vehicles
result
easily
generalised
greater
numbers
agents/vehicles
theorem
let
cid:107
cid:107
comms12
cid:107
cid:107
cid:48
cid:48
cid:107
cid:48
cid:107
cid:107
comms12
cid:48
cid:107
cid:107
comms12
cid:48
cid:107
comms12
cid:107
cid:48
cid:107
proof
since
cid:48
comms12
cid:48
over-approximations
cid:107
cid:107
comms12
cid:48
implies
cid:107
cid:107
comms12
cid:48
know
cid:107
cid:48
similarly
gives
cid:107
cid:107
comms12
agent
properties
local
compose
give
cid:107
cid:107
comms12
cid:107
cid:107
cid:107
yet
cid:107
comms12
cid:107
cid:48
timed
behaviour
begin
know
cid:48
cid:48
give
exactly
timed
behaviours
consequently
cid:107
cid:107
comms12
cid:107
cid:107
two
together
give
theorem
cid:107
cid:107
comms12
cid:107
cid:107
cid:107
cid:48
proof
since
timing
behaviour
identical
cid:48
cid:107
cid:107
comms12
cid:107
cid:107
equivalent
cid:107
comms12
cid:107
cid:48
cid:107
cid:107
cid:48
cid:107
comms12
cid:107
cid:48
cid:107
individual
agent
veriﬁcation
using
ajpf
4.2
verify
agent
properties
use
ajpf
model
checker
agent
written
gwendolen
language
instance
verify
vehicle
never
believes
received
conﬁrmation
leader
never
initiates
joining
platoon
timed
automaton
commsagentprogram
aitimedautomaton
vitimed
automaton
commsuntimedautomaton
timedautomaton
viabstract
safety
property
corresponds
ﬁrst
requirement
joining
platoon
given
section
deﬁned
platoon_m
¬df3
perf
changing_lane
bf3
join_agr
stands
goal
agent
tries
achieve
stands
belief
agent
stands
action
agent
performs/does
standard
ltl
operators
meaning
always
future
meaning
unless
used
instance
agent
never
receives
join
agreement
platoon_m
join_agr
2¬d
perf
changing_lane
able
check
property
incoming
perceptions/communications
provided
supply
two
automata
comm
cid:48
representing
communication
to/from
agents
cid:48
representing
vehicle
responses
agent
actions
conﬁguration
able
carry
agent
veriﬁcation
around
hours
veriﬁed
range
safety
liveness
properties
provide
joining/leaving
examples
note
following
properties
also
simi-
larly
expressed
terms
weak
operator
however
denote
particular
instance
properties
sake
brevity
vehicle
ever
sends
join
request
leader
eventually
receives
join
agreement
already
correct
lane
initiates
joining
platoon
performing
changing
lane
platoon_m
changed_lane
itd
f3send
leader
tell
message
join_agr
perf
changing_lane
property
liveness
property
ensuring
eventually
using
ltl
operator
joining
procedure
initiates
changing
lane
control
system
condition
fulﬁlled
similarly
verify
properties
show
progress
eventually
speed
steering
controllers
switched
automatic
pre-conditions
hold
veriﬁed
properties
ensuring
safe
operation
platoon
follows
vehicle
never
believes
changed
lane
never
switches
automatic
speed
controller
platoon_m
changed_lane
perf
speed_controller
vehicle
never
believes
received
conﬁrmation
leader
never
switches
automatic
speed
controller
platoon_m
join_agr
perf
speed_controller
vehicle
never
believes
sufﬁciently
close
preceding
vehicle
never
switches
automatic
steering
controller
platoon_m
joining_distance
perf
steering_controller
vehicle
never
believes
received
conﬁrmation
leader
leave
platoon
i.e.
increasing
spacing
achieved
never
disables
autonomous
control
note
leader
sends
back
leave
agreement
follower3
received
acknowledgement
follower3
showing
spacing
increased
leave_platoon
leave_agr
perf
speed_controller
important
recall
perceptions
communications
coming
agent
represented
internal
beliefs
hence
proliferation
belief
operators
ajpf
program
model
checker
explores
possible
combinations
shared
beliefs
mes-
sages
even
relatively
low
number
perceptions
combinato-
rial
explosion
associated
exploring
possibilities
signiﬁcant
therefore
verifying
whole
multi-agent
platooning
system
using
ajpf
infeasible
verify
global
properties
multi-agent
platooning
use
complementary
approach
manually
generate
model
whole
system
timed-automata
use
uppaal
model
checker
establish
timed
correctness
multi-agent
pla-
tooning
following
review
relevant
timed-automata
highlight
global
safety
properties
vehicle
platooning
veriﬁed
using
uppaal
4.3
timed
automata
model
automotive
platoons
model
vehicle
platooning
uppaal
parallel
composition
identical
processes
describing
behaviour
individual
vehicle
platoon
along
extra
process
describing
behaviour
platoon
leader
leader
automaton
vehicle
processes
parallel
composition
two
timed
automata
vehicle
agent
agent
automaton
turn
comprises
comms
cid:48
given
section
4.1
components
vehicle
automaton
supplies
incoming
perceptions
agent
automaton
describes
sensor
models
action
execution
vehicle
automaton
receives
responds
action
commands
corresponding
agent
three
pairs
binary
channels
modelling
change-lane
set-space
join-distance
commands
responses
model
timing
behaviour
deﬁne
clock
vehicle
automaton
models
time
assessments
changing
lane
setting
space
joining
distance
actions
based
engineers
study
actions
change-lane
set-space
join-
distance
take
seconds
respectively
agent
automaton
models
abstracted
version
gwendolen
agent
excluding
internal
computations
agent
overall
structure
agent
con-
sists
regions
shown
fig
automaton
idle
region
con-
sists
one
location
agent
perform
action
moment
regions
join
leave
set-space
sw-steering
represent
sequence
necessary
communications
agents
vehicle
order
achieve
agent
goals
vehicle
part
platoon
leave
platoon
receive
messages
leader
set
spacing
switch
steering
controller
vehicle
part
platoon
join
platoon
agent
automaton
contains
two
binary
channels
join-r
leave-r
model
unicast
sending
join
leave
requests
leader
two
binary
channels
joined-suc
left-
suc
model
unicast
sending
join
leave
acknowledgements
leader
channels
used
model
message
passing
following
agents
leader
modelled
decision-making
agent
section
furthermore
agent
automaton
also
contains
channels
send
commands
vehicle
re-
ceive
acknowledgements
vehicle
agent
automaton
clock
process-
time
used
model
time
consumption
achieving
goals
next
deﬁne
leader
automaton
model
external
behaviour
leader
agent
fig
coordination
agents
handled
unicast
syn-
chronisation
channels
upon
receipt
joining
request
i.e.
join-r
sends
set
spacing
command
preceding
agent
requested
agent
wants
placed
leader
sends
joining
agreement
i.e.
join-agr-c
requested
agent
successfully
set
spacing
two
vehicles
requested
vehicle
placed
follower
synchronises
leader
via
join-agr-c
channel
leader
waits
acknowledgement
requested
agent
waits
upper
bound
time
setting
space
changing
lane
getting
close
enough
front
vehicle
upon
receipt
acknowledgement
leader
sends
conﬁr-
mation
agent
set
spacing
command
preceding
agent
decrease
space
front
vehicle
complete
joining
procedure
receive
acknowledgement
time
sends
set
spacing
command
preceding
agent
decrease
space
waits
spacing
acknowledgement
goes
back
idle
location
ready
next
request
leader
communicates
agents
synchronisation
channels
passes
messages
follower
channels
dedi-
cated
agreements
setting
space
switching
steering
controller
simplicity
assume
leader
handles
one
request
time
fig
uppaal
agent
automaton
fig
leader
automaton
4.4
multi-agent
platooning
veriﬁcation
using
uppaal
timed
automata
representations
platoon
carry
veri-
ﬁcation
properties
using
uppaal
simplicity
analyse
global
timing
properties
multi-agent
platoon
composed
simply
leader
three
ve-
hicles
three
corresponding
agents
assume
vehicles
always
set
spacing
joining
distance
time
i.e.
fail
change
lane
time
i.e.
less
following
ﬁrst
give
examples
global
properties
involving
coordination
leader
followers
second
evaluate
timing
requirements
safe
lower
upper
bounds
joining
leaving
activities
observed
veriﬁcation
properties
took
less
seconds
using
uppaal
agent
ever
receives
joining
agreement
leader
preceding
agent
increased
space
front
agent
property
formulated
agent
follows
represents
paths
a3.rdy_ch_lane
l.joining_vehicle.front
imply
a2.incr_spacing
a2.spacing_done
agent
rdy_ch_lane
location
i.e
agent
received
joining
agreement
variable
joining_vehicle.f
ront
indicates
identiﬁcation
preceding
agent
ﬂag
a2.incr_spacing
models
preceding
agent
received
increase
space
command
leader
ﬁnally
ﬂag
a2.spacing_done
models
whether
agent
successfully
increased
space
also
verify
property
agents
property
safety
requirement
ensuring
vehicle
initiates
changing
lane
sufﬁcient
spacing
provided
next
property
interest
whether
joining
request
always
ends
increasing
space
preceding
vehicle
express
property
use
leads
property
form
written
cid:32
states
whenever
satisﬁed
eventually
satisﬁed
properties
written
cid:57
cid:57
cid:75
uppaal
verify
property
show
whenever
agent
wait_
agr
location
i.e.
sent
joining
request
agent
preceding
vehicle
platoon
eventually
receive
increasing
space
command
perform
action
a3.wait_j_agr
l.joining_vehicle.front
cid:57
cid:57
cid:75
a2.incr_spacing
a2.spacing_done
ensure
spacing
always
decreases
joining
procedure
i.e.
platoon
returns
back
normal
state
verify
ever
leader
receives
joining
re-
quest
eventually
sends
decreasing
space
command
preceding
agent
unless
joined
agent
ﬁnal
one
platoon
a3.join_completed
l.joining_vehicle.front
imply
a2.incr_spacing
a2.spacing_done
given
required
time
vehicle
carry
set
spacing
joining
distance
changing
lane
tasks
interested
verifying
agent
accomplishes
joining
platoon
within
expected
interval
waiting
time
agreement
changing
lane
joining
distance
waiting
time
leader
conﬁrmation
represented
property
11.
a2.join_completed
imply
a2.process_time
a2.process_time
similarly
check
agent
leaves
platoon
within
expected
interval
waiting
time
agreement
changing
lane
waiting
time
leader
conﬁrmation
waiting
time
agreement
equal
time
needed
set
space
waiting
time
leader
conﬁrmation
zero
assume
switching
steering
controllers
immediate
a2.leave_completed
imply
a2.process_time
a2.process_time
concluding
remarks
veriﬁcation
safety
considerations
automotive
platooning
quite
complex
difﬁcult
several
reasons
non-trivial
hybrid
autonomous
systems
vehicle
mixing
feedback
controllers
agent
decision-making
strong
requirement
verify
actual
code
used
implemen-
tation
rather
extracting
formal
model
program
behaviour
leads
program
model-checking
resource
intensive
practical
systems
able
model
check
temporal
modal
properties
complex
bdi
agents
thus
led
ajpf
ajpf
resource
intensive
seen
hours
agent
prop-
erties
practically
used
verify
whole
system
properties
auto-
motive
platooning
especially
interacting
real
vehicles
need
verify
timed
properties
thus
perhaps
surprising
formal
veriﬁcation
never
reported
safety
veriﬁcation
platooning
contorl
level
investigated
exten-
sively
combined
veriﬁcation
approach
vehicle
platooning
proposed
system
behaviour
speciﬁed
csp
formal
methods
compo-
sitional
veriﬁcation
approach
vehicle
platooning
introduced
feedback
controllers
agent
decision-making
mixed
order
address
concerns
adopted
twin
strategy
use
ajpf
verify
individual
agent
properties
given
realistic
abstractions
environ-
mental
interactions
abstract
bdi
code
produce
abstract
agent
automaton
suitable
use
uppaal
veriﬁcation
allows
formally
verify
platoon
requirements
safety
considerations
sample
included
must
emphasised
agent
code
verify
actually
code
controls
vehicle
torcs
simulation
real
vehicle
developing
thus
long
environmental
abstractions
correct
sure
decisions
made
agent
future
work
clearly
much
future
work
tackle
obvious
one
continue
efforts
improve
efﬁciency
ajpf
maintaining
safe
platoon
case
recoverable
latency
dissolving
platoon
case
unrecoverable
latency
two
procedures
implemented
veriﬁed
agent
code
due
shortcoming
ajpf
adding
two
procedures
agent
grows
system
space
extent
ajpf
fails
verify
property
thus
investigating
agent
abstraction
level
goals
beliefs
intentions
order
use
ajpf
veriﬁcation
complex
agents
since
concerned
certiﬁcation
automotive
platooning
practice
aiming
extract
comprehensive
list
formal
properties
ofﬁcial
platoon
requirement
documents
related
also
process
porting
agent
architecture
real
vehicle
testing
platooning
algorithms
physical
well
simulation
contexts
finally
important
aspect
two
pronged
strategy
link
models
used
uppaal
programs
ajpf
uses
paper
generated
uppaal
models
hand
extracted
temporal
formulae
capture
non-timed
behaviour
veriﬁed
temporal
formulae
agent
code
least
shows
timed
automata
built
correspond
agent
code
execution
believe
automated
particular
plan
use
ajpf
framework
explore
agent
code
executions
automatically
build
automaton
uppaal
use
would
give
much
stronger
form
completeness
would
improve
efﬁciency
references
alur
courcoubetis
dill
model-checking
dense
real-time
information
computation
104:2–34
1993
bergenhem
huang
benmimoun
robinson
challenges
pla-
tooning
public
motorways
proc
17th
world
congress
intelligent
trans-
port
systems
pages
1–12
2010
colin
lanoix
kouchnarenko
souquières
using
csp
cid:107
com-
ponents
application
platoon
vehicles
formal
methods
industrial
critical
systems
pages
103–118
springer
2009
dennis
farwer
gwendolen
bdi
language
veriﬁable
agents
aisb
workshop
logic
simulation
interaction
reasoning
aisb
2008
dennis
fisher
lincoln
lisitsa
veres
declarative
abstractions
agent
based
hybrid
control
systems
declarative
agent
lan-
guages
technologies
viii
volume
6619
lncs
pages
96–111
springer
2011
dennis
fisher
webster
two-stage
agent
program
veriﬁcation
journal
logic
computation
2015.
press
dennis
fisher
webster
bordini
model
checking
agent
programming
languages
automated
software
engineering
:5–63
2012
el-zaher
j.-m.
contet
gruer
gechter
koukam
compositional
veriﬁcation
reactive
multi-agent
systems
applied
platoon
non
collision
veriﬁcation
stud
inform
univ.
:119–141
2012
finger
gabbay
combining
temporal
logic
systems
notre
dame
journal
formal
logic
:204–232
1996
fisher
dennis
webster
verifying
autonomous
systems
acm
communications
:84–93
2013
gabbay
kurucz
wolter
zakharyaschev
many-dimensional
modal
logics
theory
applications
number
148
studies
logic
foundations
mathematics
elsevier
science
2003
henzinger
theory
hybrid
automata
proc
11th
ieee
symposium
logic
computer
science
pages
278–
ieee
computer
society
1996
hilscher
linker
e.-r.
olderog
proving
safety
trafﬁc
manoeu-
vres
country
roads
liu
woodcock
zhu
editors
theories
programming
formal
methods
volume
8051
lncs
pages
196–212
springer
2013
jpf
swiss
army
knife
javat
veriﬁcation
http
//babelfish
arc.nasa.gov/trac/jpf/
accessed
26-january-2016
konur
fisher
schewe
combined
model
checking
temporal
probabilistic
real-time
logics
theoretical
computer
science
503:61–88
2013
kurucz
combining
modal
logics
van
benthem
blackburn
wolter
editors
handbook
modal
logic
volume
studies
logic
practical
reasoning
pages
869–924
elsevier
2007
lygeros
godbole
sastry
veriﬁed
hybrid
controllers
automated
vehicles
ieee
trans
automatic
control
:522–539
apr
1998
current
state
safe
legislation-
cooperative
dynamic
formation
energy-optimized
goods
transportation
platoons
companion-project.eu/wp-content/uploads/companion-d2.2-
current-state-of-the-eu-legislation.pdf
january-2016
accessed
26-
rao
decision
procedures
propositional
linear-time
belief-desire-
intention
logics
journal
logic
computation
:293–342
1998
rao
georgeff
abstract
architecture
rational
agents
proc
3rd
international
conference
principles
knowledge
representation
reasoning
pages
439–449
1992
shladover
path
history
major
milestones
ieee
transactions
intelligent
transportation
systems
:584–592
2007
sartre
project
sartre-project.eu
accessed
26-january-2016
torcs
open
racing
car
simulator
sourceforge.net/projects/torcs
accessed
04-august-2015
visser
havelund
brat
park
lerda
model
checking
pro-
grams
automated
software
eng.
:203–232
apr
2003
wille
röwenstrunk
debus
konvoi
electronically
coupled
human
factors
assistance
automation
pages
243–
truck
convoys
256
2008
wooldridge
introduction
multiagent
systems
john
wiley
sons
2002
wooldridge
rao
editors
foundations
rational
agency
applied
logic
series
kluwer
academic
publishers
mar
1999
