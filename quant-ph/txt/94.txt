automatic
synthesis
quantum
circuits
point
addition
ordinary
binary
elliptic
curves
parshuram
budhathoki
rainer
steinwandt
florida
atlantic
university
department
mathematical
sciences
pbudhath
rsteinwa
fau.edu
boca
raton
33431
abstract
implementing
group
arithmetic
cost-critical
task
designing
quantum
circuits
shor
algorithm
solve
discrete
logarithm
problem
introduce
tool
automatic
generation
addition
circuits
ordinary
binary
elliptic
curves
prominent
platform
group
digital
signatures
python
software
generates
circuit
descriptions
without
increasing
number
qubits
-depth
involve
less
number
-gates
best
previous
construction
software
also
optimizes
cnot
depth
f2-linear
operations
means
suitable
graph
colorings
introduction
ordinary
binary
elliptic
curves
algebraic
structure
great
cryptographic
signiﬁcance
binary
curves
suggested
digital
signature
standard
fall
class
cost
implementing
shor
quantum
algorithm
groups
explored
various
authors
optimizing
implementation
quantum
fourier
transform
quite
well
understood
task
minimizing
implementation
cost
scalar
multiplication
shor
algorithm
remains
design
challenge
approaches
kaye
zalka
maslov
rely
use
projective
coordinates
efﬁcient
circuits
adding
ﬁxed
classically
precomputed
points
right-to-left
variant
double-
and-add
algorithm
fact
generic
addition
ﬁxed
point
implemented
avoiding
handling
special
cases
addition
law
doubling
point
adding
point
inverse
identity
element
observed
sufﬁcient
represent
input
output
points
point
addition
circuit
projective
coordinates
amento
suggest
replace
ordinary
projective
coordinates
representation
used
higuchi
takagi
therewith
reducing
number
-gates1
needed
taking
number
-gates
cost
measure
far
efﬁcient
implementation
proposed
noted
alternative
constructions
reduce
design
complexity
dedicated
circuitry
doubling
point
available
scalar
multiplication
realized
invoking
two
types
addition
circuits—
rather
several
hundred
different
ones
dealing
cryptographically
signiﬁcant
parameters
doubling
circuits
impact
gate
count
however
happily
software
tool
presented
designing
addition
circuits
automated
making
derivation
hundred
addition
circuits
different
points
realistic
option
1as
common
distinguish
†-gates
statements
number
-gates
-depth
optimize
circuit
depth
suggest
tree-style
organization
scalar
multiplication
shor
algorithm
however
method
builds
general
addition
circuits
elliptic
curve
addition
circuits
two
variable
input
points
handle
cases
addition
law
complete
binary
edwards
curves
used
purpose
resulting
circuit
depth
compelling
number
-gates
number
qubits
much
worse
right-to-left
double
add
procedure
aiming
small
-gate
count
optimizing
quantum
circuits
generic
addition
ﬁxed
point
appears
preferrable
research
direction
paper
central
optimization
criteria
number
-gates
secondary
criteria
take
-depth
number
qubits
account
contribution
building
addition
formula
al-daoud
show
number
gates
best
available
circuit
add
ﬁxed
point
reduced
without
affecting
-depth
negatively
time
number
qubits
reduced
cost
depth
increase
working
curves
f2n
circuit
descriptions
derived
automatically
means
edge
colorings
certain
bipartite
graphs
ensured
involved
subcircuits
f2-linear
operations—such
multiplication
constant
squaring
computing
square
root—are
optimized
parameters
interest
latter
allow
substantial
savings
number
cnot
gates
compared
bounds
used
building
available
polynomial-basis
arithmetic
underlying
binary
ﬁeld
python
software
introduce
synthesizes
given
curve
curve
point
optimized
addition
circuit
outputs
circuit
.qc
ﬁle
ﬁle
processed
qcviewer
instance
generally
serve
input
automated
manual
post-processing
structure
paper
next
section
look
choice
suitable
polynomial-basis
rep-
resentation
underlying
ﬁnite
ﬁeld
show
edge
colorings
used
ﬁnd
efﬁcient
circuits
squaring
constant
multiplication
square
root
computation
section
combine
circuits
al-daoud
al.
addition
formula
ordinary
binary
elliptic
curves
derive
new
quantum
circuit
point
addition
improved
-gate
complexity
complementing
theoretical
discussion
discuss
concrete
examples
circuits
synthesized
software
quantum
circuits
f2n-arithmetic
binary
ﬁeld
f2n
represented
various
different
ways
resulting
potentially
different
quan-
tum
circuits
realize
arithmetic
use
normal
basis
considered
elliptic
curve
addition
small
-gate
complexity
polynomial
basis
representation
seems
preferrable
choice
see
discussion
section
polynomial
basis
representation
f2n
expressed
quotient
f2n
univariate
polynomial
ring
binary
coefﬁcients
f2n
irreducible
poly-
nomial
degree
ﬁxed
element
f2n
uniquely
represented
bit
vector
an−1
a1x
···
an−1xn−1
mod
bit
vector
natu-
rally
represented
qubits
|a0
cid:105
|an−1
cid:105
implement
point
addition
projective
representation
binary
elliptic
curve
rely
addition
multiplication
multiplication
non-zero
constant
squaring
underlying
ﬁnite
ﬁeld
quantum
circuits
tasks
available
addition
add
two
ﬁeld
elements
f2n
simply
use
cnot
gates
operate
parallel
cid:105
cid:55
−→|a
cid:105
alternatively
operands
remain
unchanged
implement
cid:105
|0n
cid:105
cid:55
−→|a
cid:105
cid:105
obvious
way
cnot
gates
depth
multiplication
optimizing
ﬁeld
multiplier
outside
scope
paper
subsequently
use
linear-depth
construction
maslov
method
one
multiply
two
elements
f2n
toffoli
gates
cnot
gates
certain
choices
including
trinomials
bound
improved
note
point
addition
circuit
developed
section
treats
underlying
f2n-multiplier
black
box
efﬁcient
ﬁeld
multipliers
become
available
integrating
synthesis
tool
straightforward
multiplication
non-zero
constant
squaring
operations
linear
argue
lup
decompositon
yields
circuit
depth
realized
cnot
gates
although
-gates
needed
operations
optimizing
step
worthwhile
binary
elliptic
curves
digital
signature
standard
163
accordingly
complete
scalar
multiplicaton
shor
algorithm
involves
several
hundred
addition
circuits
2.1
optimizing
f2-linear
operations
minimal
edge
colorings
multplication
constant
squaring
special
cases
ﬁnding
quantum
circuit
implementing
map
cid:80
n−1
cid:105
|0n
cid:105
cid:55
−→|a
cid:105
|b0
bn−1
cid:105
i=0
aixi
arbitrary
input
f2n
bn−1
an−1
non-singular
matrix
gln
obviously
vector-by-matrix
multiplication
implemented
one
cnot
gate
non-zero
entry
done
without
ancillae
qubits
using
total
weight
cnot
gates
minimize
circuit
depth
interpret
0≤i
biadjacency
matrix
bipartite
graph
namely
graph
associated
vertices
vertex
set
splitting
control
part
an−1
target
part
bn−1
cnot
corresponds
exactly
one
edge
edge
edge
coloring
graph
colors
immediately
yields
quantum
circuit
multiply
depth
d—all
cnot
gates
corresponding
edge
color
operate
disjoint
qubits
therewith
executed
parallel
minimal
possible
value
known
chromatic
index
graph
bipartite
graph
chromatic
index
equal
maximum
degree
vertex
equal
maximal
hamming
weight
rows
columns
efﬁcient
classical
algorithms
ﬁnding
minimal
edge
coloring
known
see
software
implementation
use
solution
pointdexter
ﬁnd
required
edge
colorings
proposition
2.1.
multiplication
matrix
gln
map
cid:105
cid:105
−→|u
cid:105
cid:105
arbitrary
input
vectors
implemented
weight
cnot
gates
ancillae-
free
circuit
depth
equal
maximal
hamming
weight
rows
colums
sufﬁcient
worst-case
bounds
implies
following
corollary
2.1.
multiplication
arbitrary
matrix
gln
implemented
cnot
gates
using
ancillae-free
circuit
depth
proof
proposition
2.1
sufﬁces
show
weight
n2−n+1
suppose
true
weight
must
contain
least
two
rows
entries
equal
rows
weight
results
matrix
weight
n2−
bring
weight
least
one
row
must
completed
all-one
row
thus
two
identical
rows
contradicts
gln
example
2.1
constant
multiplication
consider
f23
multiplying
arbitrary
polynomial
a1x
a2x2
interpreted
multiplying
coefﬁcient
vector
following
matrix
weight
matrix
obtain
subsequent
graph
six
vertices
six
edges
consequently
need
total
six
cnot
gates
accordance
matrix
containing
row
column
weight
three
graph
chromatic
index
yielding
quantum
circuit
shown
figure
ﬁrst
three
cnot
gates
executed
simultaneously
solid
edges
similarly
next
two
cnot
gates
applied
time
dashed
edges
ﬁnally
last
cnot
gate
applied
dotted
edge
figure
circuit
ancillae-free
multiplication
example
2.2
squaring
f128
let
choose
squaring
a1x
···
a6x6
expressed
multiplying
coefﬁcient
vector
matrix


a0a1a2b0b1b2a0a1a2b0b1b2
figure
ancillae-free
squaring
depth
matrix
non-zero
entries
maximal
row
column
weight
obtain
depth
circuit
shown
figure
corresponds
following
bipartite
graph
chromatic
index
example
2.3
ecdsa
squaring
digital
signature
standard
speciﬁes
ﬁve
different
ﬁelds
use
connection
binary
elliptic
curves
along
polynomial-basis
representation
ﬁelds
used
software
ﬁnd
depth
number
cnot
gates
needed
ancillae-free
squaring
operation
representations
corresponding
values
listed
table
last
two
examples
suggest
trinomials
attractive
choice
deriving
compact
ancillae-free
squaring
circuits
indeed
case
holds
true
computing
unique
square
root
element
f2n
latter
helpful
circuit
used
establish
theorem
2.2
involves
squarings
well
square
root
computation
uncomputing
quantify
beneﬁt
trinomial
basis
representation
ﬁrst
exploit
irreducibility
implies
irreducibility
xn−m
fact
4.75
may
choose
middle-term
a0a1a2a3a4a5a6b0b1b2b3b4b5b6a0a1a2a3a4a5a6b0b1b2b3b4b5b6
irreducible
polynomial
x163
x74
x233
x12
x283
x87
x409
x10
x571
depth
cnot
gates
415
386
722
656
1438
table
resource
count
ancillae-free
squaring
operation
binary
ﬁelds
degree
cid:98
n/2
cid:99
explicit
formulae
classical
implementation
rodr´ıguez-henr´ıquez
obtain
following
proposition
2.2.
let
f2n
cid:98
n/2
cid:99
map
cid:105
cid:105
cid:55
−→|a
cid:105
cid:105
variable
input
f2n
implemented
ancillae-free
quantum
circuit
depth
using
cnot
gates
cid:105
implemented
ancillae-free
quantum
circuit
moreover
map
cid:105
cid:105
cid:55
−→|a
cid:105
using
cnot
gates
proof
let
a1x
···
an−1xn−1
representative
f2n-element
explicit
expressions
computing
representations
an−1
given
coefﬁcient
obtained
obtained
sum
three
ais
similarly
coefﬁcient
sum
ﬁve
ais
justify
depth
bound
squaring
operation
let
a1x2
a2x4
···
an−1x2n−2
representative
degree
ﬁnd
coefﬁcients
ﬁnd
mod
representative
degree
less
mod
smallest
even
number
greater
equal
write
cid:124
cid:125
cid:124
cid:125
a1x2
···
η/2
−1xη−2
aη/2xη
···
an−1x2n−2
cid:0
aη/2xη−n
···
an−1xn−2
cid:1
cid:0
aη/2xη−n
···
an−1xn−2
cid:1
cid:124
cid:124
cid:125
cid:125
aη/2xη+m−n
···
an−1xm+n−2
aη/2xη−n
···
an−1xn−2
reduction
needed
cid:123
cid:122
cid:123
cid:122
cid:123
cid:122
cid:123
cid:122
b10
b11
reduction
needed
b10
compute
b10
depth
mod
.we
reduce
b11
polynomial
degree
way
reduction
steps
obtain
representative
degree
less
increases
circuit
depth
resulting
total
depth
mod
adding
ﬁxed
point
reduced
-gate
complexity
binary
elliptic
curves
proposed
digital
signature
standard
fall
class
so-called
ordinary
binary
elliptic
curves
general
curves
expressed
means
short
weierstraß
equation
f2n
cid:54
write
a2x2
ea2
f2n
f2n
a2x2
set
f2n-rational
points
curve
projective
point
often
referred
point
inﬁnity
serves
neutral
element
group
ea2
f2n
afﬁne
representation
ordinary
binary
elliptic
curve
group
law
summarized
following
algorithm
taken
ea2
f2n
ea2
f2n
return
data
points
ea2
f2n
result
point
return
return
else
y2/x2
else
−p2
cid:54
±p2
return
algorithm
adding
two
points
ordinary
binary
elliptic
curve
using
afﬁne
coordinates
kaye
zalka
argue
implement
shor
algorithm
sufﬁcient
provide
quantum
circuit
implements
generic
branch
cid:54
±p2
algorithm
ﬁxed
point
restrict
situation
avoid
costly
inversion
operation
one
usually
implements
point
addition
projective
representation
standard
projective
representation
f2n
afﬁne
point
satisﬁes
x/z
follow
different
convention
introduced
l´opez
dahab
also
used
addition
circuit
afﬁne
point
represented
projectively
x/z
/z2
accordingly
curve
given
equation
would
expressed
a2x
2z2
a6z4
identity
element
represented
based
addition
formula
higuchi
takagi
type
projective
representation
following
result
given
denote
number
gates
depth
needed
implement
f2n-multiplier
respectively
2as
cid:54
ea2
f2n
neutral
element
represented
denote
number
-gates
-depth
needed
implement
f2n-multiplier
respectively
proposition
3.1
proposition
3.2
let
ﬁxed
point
ea2
f2n
above-mentioned
variant
projective
coordinates
addition
|x1
cid:105
|y1
cid:105
|z1
cid:105
cid:105
cid:105
cid:105
cid:55
−→|x1
cid:105
|y1
cid:105
|z1
cid:105
|x3
cid:105
|y3
cid:105
|z3
cid:105
carried
quantum
circuit
satisfying
following
total
number
-gates
total
number
gates
13·
plus
12n2
latter
cnot
gates
-depth
overall
depth
plus
latter
cnot
gates
includes
cost
cleaning
ancillae
identity
equal
±p2
representation
sum
ﬁxed
point
above-mentioned
variant
projective
coordinates
best
knowledge
terms
-gate
complexity
currently
efﬁcient
quantum
circuit
published
generic
addition
ﬁxed
point
ordinary
binary
elliptic
curve
3.1
addition
circuit
based
formula
al-daoud
invoking
l´opez-dahab
coordinates
described
al-daoud
present
point
addition
for-
mula
seems
well
suited
quantum
circuit
aims
adding
ﬁxed
point
besides
requiring
four
general
multiplications
two
cases
constant
multiplication
squaring
operation
naturally
combined
single
matrix-vector
multiplication
speciﬁcally
let
ﬁxed
point
curve
given
equation
let
arbitrary
point
curve
given
input
quantum
circuit
assume
cid:54
cid:54
±p2
representation
sum
computed
follows
y2z2
a2c
x2z1
x2z3
formulation
taken
explicit-formulas
database
madd-2005-dl
see
also
chap-
ter
13.3.1.d
characterize
complexity
addition
circuit
appropriate
distinguish
resources
general
multiplication
squaring
matrix-vector
multiplications
manifested
proposition
2.2
table
certain
ﬁeld
representations
resource
count
squaring
opera-
tion
remarkably
modest
even
cryptographically
signiﬁcant
ﬁeld
sizes
sequel
write
number
cnot
gates
needed
implement
squaring
operation
underlying
representation
f2n
analogously
depth
circuit
num-
ber
qubits
needed
construction
depend
details
underlying
f2n-multiplier
quantify
number
qubits
assume
multiplication
f2n—i
function
cid:105
cid:105
cid:105
cid:55
→|a
cid:105
cid:105
cid:105
f2n
arbitrary—is
realized
cid:124
cid:123
cid:122
cid:125
input
cid:124
cid:123
cid:122
cid:125
output
cid:124
cid:123
cid:122
cid:125
ancillae
qubits
notation
obtain
following
figure
complete
circuit
adding
point
l´opez-dahab
coordinates
e1,1
ﬁxed
afﬁne
point
parsing
circuit
left
right
initial
gates
labeled
correspond
operations
steps
1–3
proof
theorem
3.1.
subsequent
three
gates
labeled
implement
parallel
squarings
step
followed
parallel
scalar
multiplications
step
three
cnot
gates
operating
disjoint
wires
implement
step
two
multipliers
step
realized
two
toffoli
gates
marked
sake
completeness
include
box
labelled
xyz
actually
identity
speciﬁc
example
value
step
step
corresponds
single
cnot
gate
subsequent
toffoli
gate
labelled
implements
step
starting
clean-up
part
circuit
cnot
step
used
followed
reversal
multiplier
step
step
results
three
cnot
gates
followed
reversal
scalar
multiplications
step
ia2
reversing
squaring
operations
step
implemented
two
gates
marked
executed
parallel
gate
marked
realizing
square
root
computation
step
14.
eventually
step
corresponds
gate
labelled
step
realized
singe
cnot
gate
ism
theorem
3.1.
let
ﬁxed
point
curve
ea2
f2n
using
l´opez-dahab
coordinates
addition
|x1
cid:105
|y1
cid:105
|z1
cid:105
cid:105
cid:105
cid:105
cid:55
−→|x1
cid:105
|y1
cid:105
|z1
cid:105
|x3
cid:105
|y3
cid:105
|z3
cid:105
point
carried
quantum
circuit
satisfying
following
total
number
-gates
5gt
total
number
gates
5gm
plus
5gs
10n2
latter
cnot
gates
-depth
4dt
overall
depth
3dm
max
plus
latter
cnot
gates
total
number
qubits
including
qubits
storing
input
11n
4am
includes
cost
clean
ancillae
representation
l´opez-dahab
coordinates
sum
proof
ﬁnd
proceed
follows
identity
equal
±p2
using
-cnot
gates
depth
compute
wires
originally
storing
store
x1y1z100000000smxmsssa2xmmxyzmimixia2isissrixismx1y1z10z30x3000y3
similarly
compute
using
cnot
gates
depth
storing
wires
originally
holding
multiplying
store
new
set
wires
initialized
cid:105
increases
depth
uses
gates
similarly
-depth
number
-gates
increased
respectively
square
obtain
parallel
depth
using
3gs
-cnot
gates
store
results
add
additional
cid:105
-initialized
qubits
wires
holding
used
store
compute
depth
using
1-cnot
gates
result
operation
added
directly
time
compute
using
another
cnot
gates
latter
result
stored
new
cid:105
-initialized
qubits
add
qubits
holding
cnot
gates
depth
sufﬁce
simultaneously
apply
cnot
gates
create
copy
cid:48
copy
cid:48
set
new
cid:105
-initialized
qubits
cid:48
available
enables
perform
next
two
multiplications
parallel
2gm
gates
increasing
depth
max
compute
parallel
add
result
onto
wires
value
cid:48
add
result
onto
wires
holding
cid:48
store
result
cid:105
-initialized
wires
value
number
-gates
2gt
step
increases
-depth
cnot
gates
depth
add
wires
storing
find
cid:48
cid:48
using
gates
increases
depth
units
result
added
wires
hold
step
increases
number
-gates
-depth
point
computed
left
cleaning
ancillae
restoring
input
values
10.
add
wires
holding
+x3
need
cnot
gates
increases
circuit
depth
11.
reversing
multiplication
a·c
cid:48
takes
depth
requires
gates
also
increases
-depth
number
-gates
accordingly
12.
reverse
cnot
operations
step
execute
depth
using
cnot
gates
13.
next
two
linear
operations
step
run
backwards
simultaneously
increasing
depth
adding
cnot
gates
total
gate
count
14.
squarings
run
backwards
simultaneously
using
2gs
gates
simultaneously
apply
square
root
computation
cancel
output
multiplier
step
square
root
computation
done
cnot
gates
see
overall
depth
step
15.
reversing
computation
takes
cnot
gates
completed
depth
16.
finally
reversing
computation
increases
gate
count
cnot
gates
depth
table
summarizes
resource
count
steps
column
number
qubits
count
qubits
used
top
qubits
necessary
represent
input
includes
bits
needed
store
result
exploiting
multipliers
parts
circuit
involving
-gates
table
immediately
obtain
bounds
claimed
2gm
max
2am
step
gates
3gs
depth
qubits
table
resource
bounds
step
circuit
proof
theorem
3.1.
remark
3.1.
proposition
3.1
give
explicit
count
number
qubits
proof
proposition
3.2
emphasizes
parallelization
step
1–3
latter
already
add
new
wires
qubits
input
step
executes
ﬁeld
multiplications
parallel
invoking
4am
ancillae
step
runs
three
multipliers
parallel
storing
result
new
wires
fair
conclude
total
number
qubits
larger
bound
11n
4am
established
theorem
3.1.
cryptographic
applications
common
choose
thereby
eliminating
need
implement
-gate
free
computation
also
worth
noting
resource
bounds
theorem
3.1
indeed
worst-case
bounds
proof
theorem
3.1
constructive
implemented
software
tool
given
ir-
reducible
polynomial
curve
point
ea2
generates
corresponding
quantum
circuit
generic
addition
programming
language
chose
python
resulting
quantum
circuits
stored
text
ﬁle
using
.qc
format
format
supports
grouping
gates
subcircuits
allowing
user
hide
details
ﬁeld
multiplier
viewing
circuit
qcviewer
figure
gives
example
complete
addition
circuit
using
curve
e1,1
ﬁxed
point
added
f2-multiplier
realized
toffoli
gate
requiring
ancillae
detailed
amy
toffoli
gate
decomposed
circuit
involving
total
gates
-gates
remaining
ones
cnot
hadamard
gates
done
-depth
overall
depth
means
software
also
experimented
larger
curves
larger
curves
detailed
gate
complexity
circuit
depends
much
complexity
underlying
f2n-multiplier
experiments
built
existing
python
code
brittanney
amento
produce
.qc
description
f2n-multiplier
software
treats
multiplier
basically
black
box
however
improved
quantum
circuits
f2n-multiplication
become
available
integrating
existing
code
problem
ﬁnal
example
take
look
square
root
computation
see
step
proof
theorem
3.1
binary
ﬁelds
digital
signature
standard
example
3.1
ecdsa
square
root
computation
table
lists
depth
gate
counts
ancillae-free
square
root
computation
binary
ﬁelds
seen
case
trinomial
basis
operation
implemented
quite
efﬁciently
irreducible
polynomial
x163
x74
x233
x12
x283
x87
x409
x10
x571
depth
104
273
cnot
gates
7399
591
11657
613
76172
table
resource
count
ancillae-free
square
root
computation
binary
ﬁelds
conclusion
presented
quantum
circuit
point
addition
reduces
important
cost
parameter
best
previous
solution—the
number
-gates
reduced
without
increasing
-depth
time
number
qubits
reduced
overall
depth
increases
linearly
view
savings
achieved
depth
increase
looks
acceptable
aiming
implementation
elliptic
curve
arithmetic
cryptanalytic
applications
ability
synthesize
optimized
point
addition
circuits
automatically
seems
helpful
also
hope
concrete
complexity
bounds
provided
along
capability
derive
actual
circuits
established
format
simpliﬁes
quantitative
comparisons
stimulates
follow-up
research
efﬁcient
implementations
acknowledgments
authors
thank
stephen
locke
helpful
discussions
graph
coloring
brit-
tanney
amento
kindly
allowing
use
python
code
generate
quantum
circuits
f2n-
multiplication
supported
nato
public
diplomacy
division
framework
science
peace
project
md.sfpp
984520.
references
essame
al-daoud
ramlan
mahmod
mohammad
rushdan
adem
kilicman
new
addition
formula
elliptic
curves
ieee
transactions
computers
:972–975
august
2002
brittanney
amento
martin
r¨otteler
rainer
steinwandt
efﬁcient
quantum
circuits
binary
elliptic
curve
arithmetic
reducing
-gate
complexity
quantum
information
computation
13:631–
644
july
2013
brittanney
amento
martin
r¨otteler
rainer
steinwandt
quantum
binary
ﬁeld
inversion
improved
circuit
depth
via
choice
basis
representation
quantum
information
computation
13:116–134
january
2013
matthew
amy
dmitri
maslov
michele
mosca
martin
roetteler
meet-in-the-middle
algo-
rithm
fast
synthesis
depth-optimal
quantum
circuits
ieee
transactions
computer-aided
design
integrated
circuits
systems
:818–830
june
2013.
preprint
version
see
matthew
amy
dmitri
maslov
michele
mosca
martin
roetteler
meet-in-the-middle
algo-
rithm
fast
synthesis
depth-optimal
quantum
circuits
arxiv
quant-ph/1206.0758v3
january
2013.
available
http
//arxiv.org/abs/1206.0758v3
st´ephane
beauregard
gilles
brassard
jos´e
fernandez
quantum
arithmetic
galois
fields
arxiv
quant-ph/0301163v1
january
2003.
available
http
//arxiv.org/abs/quant-ph/
0301163v1
daniel
bernstein
tanja
lange
explicit-formulas
database
http
//www
hyperelliptic.org/efd/index.html
daniel
bernstein
tanja
lange
reza
rezaeian
farashahi
binary
edwards
curves
elisabeth
oswald
pankaj
rohatgi
editors
cryptographic
hardware
embedded
systems
ches
2008
volume
5154
lecture
notes
computer
science
pages
244–265
international
association
cryptologic
research
springer
2008
henri
cohen
gerhard
frey
editors
handbook
elliptic
hyperelliptic
curve
cryptography
discrete
mathematics
applications
chapman
hall/crc
2006
richard
cole
kirstin
ost
stefan
schirra
edge-coloring
bipartite
multigraphs
log
time
combinatorica
:5–12
2001
institute
quantum
computing
qcviewer
http
//qcirc.iqc.uwaterloo.ca/index
php
n=projects.qcviewer
2013
python
software
foundation
python
programming
language
ofﬁcial
website
http
//www
python.org
2013
akira
higuchi
naofumi
takagi
fast
addition
algorithm
elliptic
curve
arithmetic
using
projective
coordinates
information
processing
letters
76:101–103
2000
phillip
kaye
christof
zalka
optimized
quantum
implementation
elliptic
curve
arithmetic
binary
ﬁelds
arxiv
quant-ph/0407095v1
july
2004.
available
http
//arxiv.org/abs/
quant-ph/0407095v1
julio
l´opez
ricardo
dahab
improved
algorithms
elliptic
curve
arithmetic
stafford
tavares
henk
meijer
editors
selected
areas
cryptography
sac
volume
1556
lecture
notes
computer
science
pages
201–212
springer
1999
dmitri
maslov
jimson
mathew
donny
cheung
dhiraj
pradhan
-depth
quantum
algorithm
elliptic
curve
discrete
logarithm
problem
quantum
information
computation
:610–621
2009.
preprint
version
see
dmitri
maslov
jimson
mathew
donny
cheung
dhiraj
pradhan
design
opti-
mization
quantum
polynomial-time
attack
elliptic
curve
cryptography
arxiv:0710.1093v2
february
2009.
available
http
//arxiv.org/abs/0710.1093v2
alfred
menezes
paul
van
oorschot
scott
vanstone
handbook
applied
cryptography
crc
press
august
2001.
sample
chapters
available
http
//cacr.uwaterloo.ca/hac/
national
institute
standards
technology
gaithersburg
20899-8900.
fips
pub
186-4.
federal
information
processing
standard
publication
digital
signature
standard
dss
july
2013.
available
http
//nvlpubs.nist.gov/nistpubs/fips/nist.fips.186-4.pdf
alain
pointdexter
edge-coloring
bipartite
graph
python
recipe
available
http
//code
activestate.com/recipes/498092-edge-coloring-of-a-bipartite-graph/
september
2013
francisco
rodr´ıguez-henr´ıquez
guillermo
morales-luna
julio
l´opez
low-complexity
bit-
parallel
square
root
computation
trinomials
ieee
transactions
computers
:472–480
april
2008.
preprint
version
see
francisco
rodr´ıguez-henr´ıquez
guillermo
morales-luna
julio
l´opez-hern´andez
low
com-
plexity
bit-parallel
square
root
computation
trinomials
cryptology
eprint
archive
report
2006/133
april
2006.
available
http
//eprint.iacr.org/2006/133
martin
r¨otteler
rainer
steinwandt
quantum
circuit
ﬁnd
discrete
logarithms
ordinary
binary
elliptic
curves
depth
log2
quantum
information
computation
accepted
appear
peter
shor
polynomial-time
algorithms
prime
factorization
discrete
logarithms
quantum
computer
siam
journal
computing
:1484–1509
1997
jerome
solinas
improved
algorithm
arithmetic
family
elliptic
curves
bur-
ton
kaliski
jr.
editor
advances
cryptology
crypto
volume
1294
lecture
notes
computer
science
pages
357–371
springer
1997
