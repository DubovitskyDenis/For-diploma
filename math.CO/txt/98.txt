testing
perfection
hard
noga
alon∗
jacob
fox†
abstract
graph
property
strongly
testable
every
ﬁxed
one-sided
ǫ-tester
whose
query
complexity
bounded
function
classifying
strongly
testable
graph
properties
ﬁrst
author
shapira
showed
hereditary
graph
property
family
perfect
graphs
strongly
testable
property
easily
testable
strongly
testable
query
complexity
bounded
polynomial
function
ǫ−1
otherwise
hard
one
main
results
shows
testing
perfectness
hard
proof
shows
testing
perfectness
least
hard
testing
triangle-freeness
hard
hand
show
induced
p3-freeness
easily
testable
settles
one
two
exceptional
graphs
complement
left
open
characterization
ﬁrst
author
shapira
graphs
induced
h-freeness
easily
testable
introduction
property
testing
active
area
computer
science
one
wishes
quickly
distinguish
objects
satisfy
property
objects
far
satisfying
property
study
notion
initiated
rubinﬁeld
sudan
subsequently
goldreich
goldwasser
ron
started
investigation
property
testers
combinatorial
objects
graph
property
testing
particular
attracted
great
deal
attention
property
family
undirected
graphs
closed
isomorphism
graph
vertices
ǫ-far
satisfying
one
must
add
delete
least
ǫn2
edges
order
turn
graph
satisfying
ǫ-tester
randomized
algorithm
given
ability
check
whether
edge
given
pair
vertices
distinguishes
probability
least
2/3
cases
satisﬁes
ǫ-far
satisfying
ǫ-tester
one-sided
whenever
satisﬁes
ǫ-tester
determines
probability
property
strongly-testable
every
ﬁxed
exists
one-sided
ǫ-tester
whose
query
complexity
bounded
function
independent
size
input
graph
call
property
easily
testable
strongly
testable
one-sided
ǫ-tester
whose
query
complexity
polynomial
ǫ−1
otherwise
hard
analogous
classical
complexity
∗sackler
school
mathematics
blavatnik
school
computer
science
tel
aviv
university
tel
aviv
69978
israel
institute
advanced
study
princeton
new
jersey
08540.
email
nogaa
tau.ac.il
research
supported
part
erc
advanced
grant
usa-israeli
bsf
grant
nsf
grant
dms-0835373
†department
mathematics
mit
cambridge
02139-4307.
email
fox
math.mit.edu
research
supported
simons
fellowship
nsf
grant
dms
1069197
theory
algorithm
whose
running
time
polynomial
input
size
considered
fast
otherwise
slow
call
hereditary
graph
property
extendable
ﬁnitely
many
graphs
family
larger
graph
family
containing
induced
subgraph
well-known
hereditary
graph
properties
extendable
mentioned
brieﬂy
proved
detail
universal
one-sided
ǫ-tester
extendable
hereditary
graph
properties
query
complexity
quadratic
minimum
possible
query
complexity
optimal
one-sided
ǫ-tester
indeed
samples
random
vertices
subgraph
induce
accepts
otherwise
rejects
query
complexity
tester
cid:0
least
accurate
tester
query
complexity
d/2
query
complexity
lower
bound
running
time
ǫ-tester
polynomial
time
recognition
algorithm
membership
running
time
polynomial
query
complexity
query
complexity
running
time
diﬀerent
notions
often
comparable
order
cid:1
graph
let
denote
property
h-free
i.e.
family
graphs
contain
subgraph
triangle
removal
lemma
ruzsa
szemer´edi
one
inﬂuential
applications
szemer´edi
regularity
lemma
states
every
graph
vertices
δn3
triangles
made
triangle-free
removing
ǫn2
edges
triangle
removal
lemma
equivalent
fact
pk3
strongly
testable
indeed
algorithm
samples
2δ−1
triples
vertices
uniformly
random
picked
according
triangle
removal
lemma
accepts
none
form
triangle
otherwise
rejects
triangle-free
graph
clearly
accepted
graph
ǫ-far
triangle-free
contains
least
δn3
triangles
probability
none
sampled
triples
forms
triangle
1/3
notice
query
complexity
depends
bound
triangle
removal
lemma
observed
ruzsa
szemer´edi
triangle
removal
lemma
gives
simple
proof
roth
theorem
every
dense
subset
integers
contains
3-term
arithmetic
progression
behrend
construction
gives
large
subset
ﬁrst
positive
integers
without
3-term
arithmetic
progression
follows
log
triangle
removal
lemma
implies
testing
triangle-freeness
hard
indeed
universal
algorithm
described
earlier
random
sample
vertices
expected
number
triangles
δd3
hence
universal
one-sided
ǫ-tester
triangle-freeness
1/3
δd3
equivalently
−1/3
discussed
earlier
query
complexity
one-sided
ǫ-tester
triangle-freeness
least
d/2
triangle
removal
lemma
extended
see
also
graph
removal
lemma
says
graph
vertices
every
graph
vertices
δnh
copies
made
h-free
removing
ǫn2
edges
graph
removal
lemma
similarly
implies
testing
h-freeness
strongly
testable
proof
uses
szemer´edi
regularity
lemma
gives
bound
query
complexity
tower
height
power
ǫ−1
somewhat
improved
recently
second
author
tower
height
logarithmic
ǫ−1
ﬁrst
author
showed
h-freeness
easily
testable
bipartite
graph
let
denote
property
induced
h-free
i.e.
family
graphs
contain
induced
subgraph
graph
removal
lemma
extended
ﬁrst
author
fischer
krivelevich
szegedy
induced
graph
removal
lemma
states
every
graph
vertices
graph
vertices
δnh
induced
copies
made
induced
h-free
adding
removing
ǫn2
edges
induced
graph
removal
lemma
equivalent
fact
graph
property
strongly
testable
proof
uses
strengthening
szemer´edi
regularity
lemma
gives
bound
query
complexity
wowzer
height
power
ǫ−1
one
higher
ackermann
hierarchy
tower
function
recently
improved
conlon
second
author
tower
function
length
path
number
edges
contains
let
denote
path
length
ﬁrst
author
shapira
showed
graph
paths
length
cycle
length
complements
testing
induced
h-freeness
hard
path
length
complements
induced
h-freeness
easily
testable
left
open
cases
path
length
cycle
length
equivalently
complement
settle
one
two
remaining
cases
theorem
1.1
induced
p3-freeness
easily
testable
well-known
result
seinsche
gives
simple
structure
theorem
induced
p3-free
graphs
graphs
also
known
cographs
generated
single
vertex
graph
complementation
disjoint
union
equivalent
statement
every
induced
p3-free
graph
complement
connected
quite
general
result
ﬁrst
author
shapira
states
every
hereditary
family
graphs
strongly
testable
asked
hereditary
graph
properties
easily
testable
particular
well-known
hereditary
families
graphs
including
perfect
graphs
comparability
graphs
note
chromatic
number
graph
least
clique
number
vertices
clique
must
receive
diﬀerent
colors
proper
coloring
graph
perfect
every
induced
subgraph
satisﬁes
clique
number
chromatic
number
equal
study
perfect
graphs
started
berge
partly
motivated
study
shannon
capacity
information
theory
lies
clique
number
chromatic
number
graph
perfect
graphs
form
relatively
large
class
graphs
several
fundamental
algorithmic
problems
known
np-
hard
general
graphs
graph
coloring
problem
maximum
clique
problem
maximum
independent
set
problem
solved
polynomial
time
see
also
signiﬁcant
connections
study
linear
integer
programming
see
e.g.
famous
conjecture
berge
proved
years
ago
chudnovsky
robertson
seymour
thomas
states
graph
perfect
contains
induced
odd
cycle
length
least
ﬁve
complement
one
proof
fact
establishes
stronger
structural
theorem
perfect
graphs
conjectured
conforti
cornu´ejols
vuˇskovi´c
says
every
perfect
graph
falls
one
basic
classes
admits
one
kinds
special
decompositions
shortly
afterwards
proof
perfect
graphs
recognized
polynomial
time
function
number
vertices
graph
discovered
chudnovsky
cornu´ejols
liu
seymour
vuˇskovi´c
another
well-studied
hereditary
family
graphs
comparability
graphs
comparability
graph
graph
connects
pairs
elements
comparable
partial
order
gallai
classiﬁed
graphs
forbidden
induced
subgraphs
dilworth
theorem
equivalent
statement
complement
comparability
graphs
perfect
comparability
graphs
recognized
polynomial
time
see
mcconnell
spinrad
every
cograph
comparability
graph
every
comparability
graph
perfect
graph
natural
suspect
structure
theorem
could
hint
polynomial
ǫ−1
tester
perfectness
similar
testing
cographs
however
show
testing
perfectness
essentially
requires
much
query
complexity
time
testing
triangle-freeness
hard
theorem
1.2
testing
perfectness
hard
indeed
theorem
3.1
shows
graph
vertices
14ǫ-far
triangle-free
random
sample
vertices
probability
least
1/2
triangle-free
construct
graph
vertices
ǫ/25-far
induced
c5-free
random
sample
vertices
comparability
graph
probability
least
1/2
since
every
comparability
graph
perfect
every
perfect
graph
induced
c5-free
testing
triangle-freeness
hard
implies
theorem
testing
perfectness
hard
testing
comparability
graphs
hard
theorem
1.3
testing
comparability
graphs
hard
next
section
show
induced
p3-freeness
easily
testable
section
show
testing
perfectness
least
hard
testing
triangle-freeness
hard
ﬁnish
concluding
remarks
throughout
paper
systematically
omit
ﬂoor
ceiling
signs
whenever
crucial
sake
clarity
presentation
also
make
serious
attempt
optimize
absolute
constants
statements
proofs
induced
p3-freeness
easily
testable
cut
graph
partition
nonempty
subsets
edges
complete
following
deﬁnition
natural
relaxation
cut
deﬁne
β-cut
graph
partition
nonempty
subsets
β|v1||v2|
|v1||v2|
graph
vertex
subset
let
denote
induced
subgraph
vertex
set
let
least
graph
vertices
β-cut
δn4
induced
copies
theorem
2.1
β/100
12.
proof
suppose
contradiction
graph
vertices
β-cut
less
δn4
induced
copies
β/100
12.
since
β-cut
contains
induced
hence
δn4
δ−1/4
100/β
since
δn4
induced
copies
random
sample
−1/4
105β−3
vertices
expectation
δr4
1/8
induced
copies
hence
probability
least
7/8
random
sample
vertices
contains
induced
randomly
sample
set
vertices
r/2
let
event
induced
p3-free
probability
event
least
7/8
since
β-cut
vertex
n−1
neighbors
less
1−β
n−1
neighbors
let
β/2
hoeﬀding
see
section
proved
hypergeometric
distribution
least
concentrated
corresponding
binomial
distribution
thus
azuma-hoeﬀding
inequality
see
e.g.
fact
vertex
neighbors
probability
particular
less
neighbors
β−α
s−1
s−1
β−α
s−1
e−β2s/16
16s
16s
let
similarly
probability
neighbors
event
every
vertex
least
neighbors
i.e.
induced
subgraph
minimum
degree
least
maximum
degree
union
bound
probability
event
least
let
set
vertices
complete
empty
degree
vertex
least
probability
given
vertex
random
subset
vertices
neighbors
nonneighbors
hence
given
vertex
probability
linearity
expectation
expected
size
let
event
16e−βsn
markov
inequality
probability
least
1/8
7/8
let
event
contains
vertex
linearity
expectation
t/n
2e−βst
therefore
event
occurs
probability
least
7/8
16s
7/8
probability
events
occur
least
7/8
1/8
3/4
events
occur
least
one
2α−1
cuts
consider
cut
suppose
complete
case
empty
treated
similarly
cut
consider
partition
vertices
satisﬁes
complete
complete
complete
complete
complete
note
contains
vertex
cut
extend
cut
events
occur
happens
probability
least
1/2
induced
p3-free
cut
vertex
complete
empty
case
one
cuts
extends
cut
hence
least
one
cut
vertex
corresponding
condition
occurrence
events
note
since
probability
happens
least
1/2
event
conditional
probability
occurs
given
occur
twice
probability
without
conditioning
complete
proof
claim
positive
probability
occur
yet
induced
subgraph
contains
induced
contradicting
apply
union
bound
cuts
show
positive
probability
cut
either
contains
vertex
hence
cut
extended
one
contains
vertex
vertex
nonadjacent
providing
induced
vertices
together
vertex
adjacent
vertex
adjacent
proceed
proof
claim
conditioning
cut
let
consider
two
possible
cases
case
|v0|
case
probability
contains
vertex
e−2/α
2−α−1−1
showing
even
conditioning
probability
event
smaller
2−α−1
case
|v0|
let
|v0|
|s1|
|v1|
|s2|
|v2|
assume
without
loss
generality
since
partition
β-cut
least
missing
edges
two
sets
since
addition
complete
complete
complete
missing
edges
thus
|v1||v2|
events
occur
case
every
vertex
complete
hence
hence
least
missing
edges
thus
number
missing
pairs
case
events
occur
least
let
event
contains
two
vertices
least
one
nonedges
given
least
edges
missing
probability
event
occurs
least
probability
least
one
t/2
random
pairs
vertices
contains
one
nonedges
probability
happen
β2n2/8
cid:0
cid:1
t/2
e−β2t/8
e−β2105/
8·2β3
e−105/
32α
2−α−1−1
hence
even
conditioning
probability
event
smaller
2−α−1
union
bound
follows
positive
probability
occur
yet
contains
induced
contradiction
completing
proof
let
least
graph
vertices
ǫ-far
induced
p3-free
δn4
induced
copies
theorem
2.2
ǫ/100
16.
proof
let
graph
vertices
ǫ-far
induced
p3-free
partition
two
parts
along
ǫ-cut
continue
reﬁning
parts
along
ǫ-cuts
subgraphs
induced
parts
part
ǫ-cut
let
resulting
partition
modify
edges
along
ǫ-cuts
turn
cuts
letting
resulting
graph
total
fraction
pairs
vertices
changed
making
least
ǫn2
cid:0
changed
resulting
graph
make
induced
p3-free
modify
edges
make
induced
p3-free
resulting
graph
induced
p3-free
|vi|
number
edge
modiﬁcations
made
obtain
induced
p3-free
graph
cid:1
ǫn2/2
edges
must
xi=1
cid:18
|vi|
cid:19
max
1≤i≤k
|vi|
ǫn2
contradiction
thus
one
parts
call
vertices
β-cut
therefore
induced
subgraph
hence
least
ǫ4n4
ǫ/100
12ǫ4n4
ǫ/100
16n4
induced
copies
completing
proof
consider
following
one-sided
ǫ-tester
induced
p3-freeness
let
ǫ/100
16.
algorithm
samples
2δ−1
quadruples
vertices
uniformly
random
accepts
none
form
induced
otherwise
rejects
induced
p3-free
graph
clearly
accepted
graph
far
induced
p3-free
contains
least
δn4
induced
theorem
2.2
probability
none
sampled
quadruples
forms
induced
1/3
note
query
complexity
algorithm
depends
linearly
δ−1
hence
polynomially
ǫ−1
completing
proof
theorem
1.1
testing
perfectness
ﬁrst
observe
couple
equivalent
versions
triangle
removal
lemma
triangle
edge
cover
number
graph
minimum
number
edges
cover
triangles
i.e.
minimum
number
edges
whose
deletion
makes
triangle-free
triangle
removal
lemma
thus
says
every
graph
vertices
δn3
triangles
satisﬁes
ǫn2
triangle
packing
number
graph
maximum
number
edge
disjoint
triangles
following
simple
bounds
hold
graphs
indeed
least
one
edge
edge-disjoint
triangles
needed
edge
cover
triangles
deleting
edges
maximum
collection
edge-disjoint
triangles
leaves
triangle-free
graph
remark
well
known
conjecture
tuza
states
upper
bound
improved
haxell
improved
upper
bound
factor
thus
constant
factor
change
triangle
removal
lemma
saying
graph
vertices
least
ǫn2
edge
disjoint
triangles
contains
least
δn3
triangles
suppose
constant
factor
change
tripartite
indeed
every
graph
tripartite
subgraph
contains
least
2/9
triangles
maximum
collection
edge-disjoint
triangles
seen
considering
uniform
random
tripartition
triangle
probability
2/9
one
vertex
part
expected
number
edge-disjoint
triangles
tripartition
2/9
total
tripartition
number
edge-disjoint
triangles
least
expected
number
may
thus
assume
tripartite
theorem
3.1
let
graph
vertices
14ǫ-far
triangle-free
random
sample
vertices
triangle-free
probability
least
1/2
graph
vertices
ǫ/25-far
induced
c5-free
random
sample
vertices
comparability
graph
probability
least
1/2
·14ǫn2
proof
remarks
contains
tripartite
subgraph
contains
least
ǫn2
ǫ/25
edge-disjoint
triangles
denote
three
parts
let
graph
vertices
partition
size
parts
next
specify
edges
various
parts
part
independent
set
edges
complete
bipartite
graph
edges
precisely
edges
finally
edges
precisely
nonedges
arbitrarily
order
maximum
collection
ǫn2
edge-disjoint
triangles
tripartite
graph
vertices
product
two
smallest
parts
n2/9
every
triangle
three
vertices
vertex
vertex
form
induced
next
show
implies
induced
copies
labeled
pair
intersects
one
vertex
fact
greedily
construct
satisfy
vertex
set
consists
vertices
together
vertex
vertex
suppose
already
constructed
satisfying
desired
properties
next
show
construct
desired
properties
note
tripartite
graph
number
edge-disjoint
triangles
containing
given
vertex
minimum
order
two
parts
containing
1||v
pair
|vh|
follows
nonempty
intersection
triangles
hence
vertices
least
one
share
vertex
common
delete
vertices
denote
resulting
subset
pick
induced
vertices
vertices
clear
construction
intersects
one
vertex
therefore
greedily
construct
desired
induced
copies
conclude
ǫ/25-far
induced
c5-free
hand
triples
vertices
linear
ordering
puts
vertices
adjacent
adjacent
adjacent
vertices
triangle
thus
sampling
vertices
uniformly
random
sample
vertices
uniformly
random
vertices
triangle-free
probability
least
1/2
hence
random
vertices
form
comparability
graph
probability
least
1/2
completes
proof
discussed
toward
end
introduction
theorem
3.1
implies
theorem
1.2
testing
per-
fectness
hard
theorem
1.3
testing
comparability
graphs
hard
partially
ordered
set
poset
directed
graph
vertex
set
loops
i.e.
pair
edge
antiparallel
edges
i.e.
edge
edge
transitive
i.e.
edge
edge
also
edge
fact
testing
posets
hard
least
hard
testing
triangle-freeness
follows
theorem
3.1
adding
directions
however
next
sketch
simpler
proof
let
tripartite
graph
vertices
parts
ǫ-far
triangle-free
consider
directed
graph
vertex
set
edge
edge
edge
edge
edge
edge
edges
least
one
pair
every
triangle
must
modiﬁed
turn
poset
ǫ-far
poset
also
subset
vertices
triangle-
free
induces
poset
implies
testing
posets
least
hard
testing
triangle-freeness
concluding
remarks
believe
comparing
number
queries
needed
test
various
properties
done
paper
comparing
testing
perfectness
triangle-freeness
could
interesting
direction
research
analogue
property
testing
powerful
technique
hardness
reductions
complexity
theory
one
general
class
hard
graph
properties
testing
compare
necessarily
induced
h-freeness
ﬁxed
odd
cycle
showed
testing
perfectness
hard
equivalent
showing
graph
ǫ-far
perfect
random
set
vertices
size
polynomial
ǫ−1
perfect
probability
least
1/2
still
leaves
possibility
getting
small
witness
graph
far
perfect
every
graph
ǫ-far
perfect
contain
induced
odd
cycle
complement
size
least
polynomial
ǫ−1
showed
testing
induced
p3-freeness
easy
step
toward
completing
classiﬁcation
graphs
induced
h-free
testing
easy
remains
determine
whether
induced
c4-freeness
easy
finally
interesting
characterize
easily
testable
graph
properties
properties
strongly
testable
follows
main
result
restrict
natural
properties
sense
properties
essentially
hereditary
among
hereditary
properties
properties
known
easily
testable
include
property
k-colorable
ﬁxed
shown
well
natural
extension
proved
mentioned
introduction
additional
easily
testable
hereditary
properties
freeness
bipartite
induced
h-freeness
path
vertices
complement
case
vertices
proved
section
hereditary
properties
easily
testable
h-freeness
nonbipartite
induced
freeness
graphs
besides
paths
vertices
complements
well
possibly
cycle
length
complement
perfectness
comparability
techniques
applied
provide
several
additional
examples
easily
testable
non-easily
testable
hereditary
properties
somewhat
artiﬁcial
familiar
graph
properties
list
known
results
suggest
conjectured
characterization
easily
testable
hereditary
graph
properties
moment
unable
formulate
conjecture
references
alon
testing
subgraphs
large
graphs
random
structures
algorithms
2002
359–370
alon
duke
lefmann
r¨odl
yuster
algorithmic
aspects
regularity
lemma
algorithms
1994
80–109
alon
fischer
krivelevich
szegedy
eﬃcient
testing
large
graphs
combina-
torica
2000
451–476
alon
shapira
characterization
easily
testable
induced
subgraphs
combin
probab
comput
2006
791–805
alon
shapira
characterization
natural
graph
properties
testable
one-
sided
error
siam
comput
2008
1703–1727
alon
spencer
probabilistic
method
3rd
ed.
wiley
2008
behrend
sets
integers
contain
three
terms
arithmetic
progression
proc
nat
acad
sci
1946
331–332
chudnovsky
cornu´ejols
liu
seymour
vuˇskovi´c
recognizing
berge
graphs
com-
binatorica
2005
143–187
chudnovsky
robertson
seymour
thomas
strong
perfect
graph
theorem
ann
math
164
2006
51–229
conlon
fox
bounds
graph
regularity
removal
lemmas
arxiv:1107.4829v1
math.co
dilworth
decomposition
theorem
partially
ordered
sets
ann
math
1950
161–166
fox
new
proof
graph
removal
lemma
ann
math
174
2011
561–579
gallai
transitiv
orientierbare
graphen
acta
math
acad
sci
hung
1967
25–66
goldreich
goldwasser
ron
property
testing
applications
learning
approximation
journal
acm
1998
653–750
goldreich
trevisan
three
theorems
regarding
testing
graph
properties
random
struct
algorithms
2003
23–57
gr¨otschel
lov´asz
schrijver
geometric
algorithms
combinatorial
op-
timization
springer-verlag
alexander
1988
haxell
packing
covering
triangles
graphs
discrete
math
195
1999
251–254
hoeﬀding
probability
inequalities
sums
bounded
random
variables
amer
statist
assoc
1963
13–30
mcconnell
spinrad
linear-time
transitive
orientation
proceedings
eighth
annual
acm-siam
symposium
discrete
algorithms
new
orleans
1997
19–25
acm
new
york
1997
ram´ırez-alfons´ın
editor
reed
editor
perfect
graphs
wiley
2001
roth
certain
sets
integers
london
math
soc
1953
104–109
rubinﬁeld
sudan
robust
characterization
polynomials
applications
program
testing
siam
computing
1996
252–271
ruzsa
szemer´edi
triple
systems
six
points
carrying
three
triangles
combinatorics
keszthely
1976
coll
math
soc
bolyai
volume
939–945
seinsche
property
class
n-colorable
graphs
combinatorial
theory
ser
1974
191–193
