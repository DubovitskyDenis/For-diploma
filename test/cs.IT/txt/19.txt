autocorrelation
lower
bound
2-adic
complexity
lsb
sequence
p-ary
m-sequence
yuhua
sun1,2,3
qiang
wang2
tongjiang
yan1,3
college
sciences
china
university
petroleum
qingdao
266555
shandong
china
school
mathematics
statistics
carleton
university
ottawa
ontario
k1s
5b6
canada
key
laboratory
network
security
cryptology
fujian
normal
university
fuzhou
fujian
350117
china
email
sunyuhua
163.com
wang
math.carleton.ca
yantoji
163.com
november
2018
abstract
modern
stream
cipher
many
algorithms
zuc
lte
encryption
algorithm
lte
integrity
algorithm
using
bit-component
sequences
p-ary
m-sequences
inputs
algorithms
therefore
analyzing
statistical
properties
example
autocorrelation
linear
complexity
2-adic
complexity
bit-component
sequences
p-ary
m-sequences
be-
coming
important
research
topic
paper
ﬁrst
derive
autocorrelation
properties
lsb
least
signiﬁcant
bit
sequences
p-ary
m-sequences
i.e.
convert
problem
com-
puting
autocorrelations
lsb
sequences
period
positive
problem
determining
autocorrelations
lsb
sequences
period
based
properties
computer
calculation
list
autocorrelation
distributions
lsb
sequences
p-ary
sequences
order
small
prime
31.
additionally
using
autocorrelation
distributions
method
inspired
give
lower
bounds
2-adic
complexities
lsb
sequences
results
show
main
parts
lower
bounds
2-adic
complexities
lsb
sequences
larger
period
sequences
therefore
bounds
large
enough
resist
analysis
raa
rational
approximation
algorithm
fcsr
feedback
carry
shift
register
especially
mersenne
prime
since
bit-component
sequences
p-ary
m-sequence
shift
equivalent
results
hold
bit-component
sequences
index
terms
p-ary
m-sequence
lsb
sequence
autocorrelation
2-adic
complexity
1the
work
supported
shandong
provincial
natural
science
foundation
china
zr2014fq005
fun-
damental
research
funds
central
universities
15cx02065a
15cx05060a
15cx08011a
15cx02056a
16cx02013a
16cx02009a
fujian
provincial
key
laboratory
network
security
cryp-
tology
research
fund
fujian
normal
university
no.15002
introduction
pseudo-random
sequences
good
correlation
large
linear
complexity
widely
applications
communication
systems
cryptography
due
ideal
correlation
property
good
performance
measures
highly
eﬃcient
implementation
maximal
length
linear
feedback
shift
reg-
ister
lfsr
sequences
i.e.
m-sequence
widely
used
designing
stream
ciphers
however
since
linear
complexity
sequences
relatively
low
analysis
berlekamp-massey
algorithm
bma
sequences
used
therefore
constructing
nonlinear
sequence
desirable
good
properties
becoming
important
topic
one
class
promising
nonlinear
sequence
generators
feedback
carry
shift
registers
fcsrs
originally
presented
klapper
goresky
1997
consequence
introduced
notion
2-adic
complexity
binary
periodic
sequence
i.e.
length
shortest
fcsr
generates
one
direct
result
notion
m-sequence
period
maximal
2-adic
com-
plexity
prime
fact
tian
proved
binary
m-sequences
maximal
2-adic
complexity
similar
bma
lfsrs
klapper
goresky
also
proposed
algorithm
called
rational
approximation
algorithm
raa
determine
2-adic
complexity
perspective
cryptography
security
obvious
desirable
sequence
must
high
linear
complexity
high
2-adic
complexity
namely
greater
equal
half
period
however
although
linear
complexity
many
classes
sequences
obtained
see
handful
papers
2-adic
complexity
tian
made
breakthrough
2-adic
complexity
binary
m-sequence
xiong
presented
new
method
circulant
matrix
compute
2-adic
complexities
binary
sequences
showed
known
sequences
ideal
2-level
autocorrelation
maximum
2-adic
complexity
moreover
several
classes
sequences
optimal
autocorrelation
also
maximum
complexity
recently
presented
simpler
method
obtain
results
xiong
using
detailed
autocorrelation
values
since
m-sequences
used
directly
stream
ciphers
due
low
linear
complexity
many
modern
stream
ciphers
zuc
lte
encryption
algorithm
lte
integrity
algorithm
designed
using
bit-component
sequences
see
deﬁnition
p-ary
m-sequences
inputs
remark
bit-component
sequences
easily
implemented
earlier
chan
games
shown
sequences
high
linear
complexities
however
2-adic
complexities
bit-component
sequences
p-ary
m-sequences
still
studied
far
know
paper
study
autocorrelation
2-adic
complexities
lsb
sequences
see
deﬁnition
p-ary
m-sequences
prime
ﬁrst
present
autocorrelation
properties
lsb
sequences
p-ary
m-sequences
suppose
lsb
sequence
p-ary
m-sequence
period
autocorrelation
properties
problem
computing
autocorrelation
value
acs
simpliﬁed
problem
computing
autocorrelation
acb
lsb
sequence
period
see
deﬁnition
p−3
mod
p−5
mod
consequence
give
explicit
formula
autocorrelation
distributions
lsb
sequences
p-ary
m-sequences
small
31.
another
consequence
result
give
lower
bounds
2-adic
complexities
lsb
sequences
results
show
main
parts
lower
bounds
2-adic
complexity
uniﬁed
form
i.e.
2-adic
complexity
large
enough
resist
raa
fcsrs
according
discussion
uniﬁed
form
also
present
open
problem
p−1
larger
lower
bound
2-adic
complexity
lsb
sequence
prime
p-ary
m-sequence
particularly
since
bit-component
sequences
p-ary
m-sequence
shift
equivalent
mersenne
prime
results
available
bit-component
sequences
method
determining
lower
bounds
2-adic
complexity
inspired
rest
paper
organized
follows
introduce
notations
well-known
results
section
autocorrelation
properties
lsb
sequences
p-ary
m-sequences
prime
well
autocorrelation
distributions
lsb
sequences
p-ary
m-sequences
small
prime
given
section
section
lower
bounds
2-adic
complexities
lsb
sequences
derived
preliminaries
section
introduce
notations
well-known
results
used
throughout
paper
unless
speciﬁed
let
positive
integer
binary
sequence
period
autocor-
relation
given
acs
xi=0
st+st+τ
let
=pn
i=0
sixi
write
i=0
si2i
gcd
2-adic
complexity
sequence
integer
⌊log2q⌋
i.e.
⌊log2
gcd
⌊x⌋
greatest
integer
less
equal
gcd
greatest
common
divisor
let
prime
positive
integer
primitive
element
fpn
p-ary
m-sequence
xp2
xpn−1
trace
function
fpn
element
pn−2
t=0
following
2-adic
expansion
at,0
at,1
at,2
k−1
2k−1
⌈log2p⌉
⌈x⌉
least
integer
larger
equal
identify
bit
string
at,0
at,1
at,2
k−1
length
element
call
i-th
element
i−1
i-th
bit-component
element
written
i.e.
identiﬁed
pk−1
2-adic
expansion
pk−1
2k−1
accordance
zuc
algorithm
deﬁnition
ﬁxed
sequence
i−1
pn−2
sequence
pn−2
bit
sequence
lsb
sequence
pn−2
fact
also
expressed
t=0
particularly
bit-component
sequence
at,0
pn−2
t=0
denote
pn−2
t=0
t=0
called
i-th
bit-component
called
least
signiﬁcant
t=0
at,0
pn−2
t=0
convenience
mod
deﬁnition
suppose
pn−1
p−1
primitive
element
sequence
p−2
j=0
period
deﬁned
mod
remark
note
fact
one
contributions
paper
convert
problem
computing
autocorrelation
acs
pn−2
computing
autocorrelation
acb
p−2
problem
mod
j=0
p−5
t=0
p−3
mod
deﬁnition
function
fpn
said
balanced
element
appears
one
less
time
nonzero
element
list
αpn−2
primitive
element
fpn
deﬁnition
let
function
fpn
function
called
diﬀerence-
balanced
balanced
fpn
remark
well
known
trace
function
fpn
diﬀerence-balanced
fact
linear
function
autocorrelation
properties
lsb
sequences
p-ary
sequences
section
derive
autocorrelation
properties
lsb
sequences
p-ary
m-sequence
give
autocorrelation
distributions
lsb
sequences
small
prime
3,5,7,11,17,31.
denote
p−1
t=0
at,0
t=0
unless
speciﬁed
lemma
let
′|τ
autocorrelation
value
acs
t=0
given
acs
pn−2
proof
recall
autocorrelation
function
t=0
deﬁned
acs
t=0
st+st+τ
ﬁxed
denote
t|st
st+τ
get
acs
|zn
|dτ
2|dτ
deﬁnition
know
|dτ
t|st
st+τ
t|tr
αt+τ
mod
αt+τ
mod
t|tr
αt+τ
mod
αt+τ
mod
t|tr
αt+τ
αt+τ
mod
t|tr
αt+τ
mod
x|tr
mod
mod
x|tr
mod
mod
x|tr
mod
x|tr
mod
following
determine
values
respectively
deﬁnition
obvious
st+τ
αt+τ
ﬁxed
satisfying
st+τ
without
loss
generality
suppose
αt+τ
i.e.
remark
know
trace
function
diﬀerence-balanced
satisfying
equation
number
namely
ﬁxed
pn−1
number
equation
exactly
sum
numbers
following
equation
systems
runs
note
fpn
n-dimensional
vector
space
ﬁxed
equation
system
equivalent
linear
equation
system
i.e.
′|τ
vectors
composed
coeﬃcients
unknowns
left
side
equations
linearly
independent
implies
pn−2
solutions
fpn
equation
system
therefore
determine
values
discussing
values
firstly
prove
value
equal
x|tr
mod
mod
=pn−2
mod
mod
=pn−2
note
addition
operated
odd
even
p−1
c+a
odd
odd
c+a
even
c+a
c+p−1
comparison
addition
operated
integer
set
furthermore
odd
number
p−1
even
number
therefore
ﬁxed
number
pairs
satisfying
condition
set
p−1
note
number
p−1
hence
holds
similarly
get
values
x|tr
mod
mod
=pn−2
mod
mod
=pn−2
values
x|tr
mod
=pn−2
mod
=pn−2
odd
pn−2
x|tr
mod
=pn−2
mod
=pn−2
even
pn−2
respectively
results
get
|dτ
pn−2
cid:18
cid:19
pn−2
autocorrelation
acs
pn−2
pn−2
pn−2
cid:4
lemma
′|τ
autocorrelation
lsb
sequence
pn−1
period
satisﬁes
following
relation
t=0
acs
acb
pn−1
sequence
p−2
j=0
deﬁned
deﬁnition
acb
autocorrelation
p−2
j=0
proof
first
note
primitive
element
fpn
introduced
pn−1
′|τ
p−1
know
therefore
similar
discussion
lemma
acs
|zn
|dτ
2|dτ
t|st
st+τ
also
get
st+τ
αt+τ
comes
|dτ
t|st
st+τ
x|tr
mod
=pn−1
mod
=pn−1
j|βj
βj+τ
mod
pn−1
|d′
j|βj
βj+τ
mod
holds
equation
exact
pn−1
solutions
ﬁxed
hence
acs
2|dτ
2pn−1|d′
2|d′
pn−1
recall
sequence
p−2
j=0
deﬁnition
deﬁned
mod
autocorre-
lation
p−2
j=0
given
acb
p−2
xj=0
result
follows
−bj+τ
|zp−1
|d′
2|d′
cid:4
results
lemmas
simpliﬁed
problem
computing
autocor-
relation
lsb
sequence
computing
autocorrelation
lsb
sequence
p−2
t=0
period
positive
integer
problem
j=0
next
present
autocorrelation
properties
sequence
p−2
j=0
lemma
symbols
following
results
p−3
acb
acb
mod
p−1
mod
p−3
get
acb
p−1
−acb
particularly
mod
acb
p−1
acb
p−1
proof
discussion
lemma
ﬁxed
autocorrelation
value
acb
depends
|dτ
number
pair
diﬀerent
lsb
see
eqs
p−3
runs
exactly
let
runs
β−τ
βp−1−τ
note
implies
|dτ
|dp−1−τ
get
acb
acb
similar
argument
let
′+l
get
′+l
′+l
−βl
βl+τ
p−1
βl+τ
p−1
βl+τ
p−1
implies
p−1
2|dτ
acb
p−1
−acb
particularly
mod
p−1
get
acb
p−1
−acb
p−1
implies
acb
p−1
note
p−1
pair
always
diﬀerent
lsb
cid:4
convenience
always
use
following
notations
mod
mod
acb
acb
i∈i
combining
results
give
following
theorem
theorem
let
positive
integer
odd
prime
p−1
primitive
element
fpn
t=0
deﬁned
p-ary
m-sequence
order
suppose
t=0
lsb
sequence
t=0
p−1
j=0
sequence
deﬁned
deﬁnition
2,3
3,5
2,6,7,8
2,6,7,11
acb
since
since
−12
−12
−14
−16
−10
−12
−22
−10
−14
−22
−12
−10
−14
−12
−32
−12
table
examples
acb
odd
primes
less
100
autocorrelation
t=0
expressed


acs
acb
pn−1
′|τ
acb
pn−1
p−1
pn−1
pn−1
pn−2
mod
pn−1
pn−1
otherwise
p−1
consequently
since
corresponding
autocorrelations
acs
given
directly
respectively
acs
−3n−1
3n−2
otherwise
5n−1
5n−1
5n−2
otherwise
acs
=

theorem
odd
prime
problem
determining
autocorrelation
values
lsb
sequence
problem
determining
autocorrelation
sequence
p−2
t=0
p-ary
m-sequence
t=0
period
converted
j=0
period
autocorrelation
p−2
j=0
period
reduced
problem
set
relatively
large
size
set
p−5
relatively
small
size
fact
determined
computer
also
present
corresponding
ordered
array
acb
p−3
odd
primes
smaller
100
table
observed
examples
autocorrelation
satisﬁes
p−1
p−1
acb
p−1
finding
complete
theoretical
result
autocorrelation
p−2
j=0
interesting
research
work
also
sincerely
invite
reader
participate
work
well-known
sequences
cyclic
shift
equivalent
property
autocorrelation
2-adic
complexity
fact
mersenne
prime
bit-component
sequences
p-ary
m-sequence
equivalent
lsb
sequence
following
fact
give
simple
proof
conclusion
therefore
know
results
paper
available
bit-component
sequences
p-ary
m-sequences
mersenne
prime
fact
let
prime
also
prime
recall
pn−2
order
i−1
pn−2
i-th
bit-component
sequence
pn−2
i-th
bit-component
sequence
i−1
pn−2
t=0
t=0
cyclic
shift
lsb
sequence
at,0
pn−2
t=0
t=0
t=0
p-ary
m-sequence
proof
element
exists
pn−1
p−1
ατ0
note
trace
function
fpn
linear
2at
2tr
αt+τ0
at+τ0
shows
2at
left
cyclic
shift
correspondingly
2at
mod
k−1
at,0
at,1
k−3
2k−2
k−2
2k−1
binary
string
2at
left
cyclic
shift
binary
string
therefore
know
mod
-th
bit-component
sequence
left
cyclic
shift
i-th
bit-
component
sequence
implies
bit-component
sequences
p-ary
m-sequence
cyclic
shift
equivalent
cid:4
paper
another
main
aim
ﬁnd
lower
bounds
2-adic
complexities
lsb
sequences
p-ary
m-sequences
method
determining
lower
bounds
2-adic
complexity
inspired
involve
autocorrelation
sequences
due
complexity
autocorrelation
p−2
j=0
give
uniform
proof
lower
bounds
2-adic
complexity
lsb
sequences
m-sequences
using
method
paper
therefore
take
examples
give
2-adic
complexity
property
lsb
sequences
m-sequences
course
primes
corresponding
results
obtained
similarly
needs
explained
diﬀerent
primitive
element
fpn
taken
diﬀerent
might
resulted
correspondingly
maybe
give
diﬀerent
order
autocorrelation
values
p−2
j=0
face
method
calculating
2-adic
complexity
paper
seems
diﬀerent
order
autocorrelation
values
p−2
j=0
might
result
diﬀerent
2-adic
complexity
since
autocorrelation
values
lsb
sequences
straightforward
results
diﬀerent
order
although
several
primitive
elements
corresponding
lsb
sequences
still
diﬀerent
order
autocorrelation
values
simple
calculation
see
smallest
odd
prime
smallest
mersenne
prime
autocorrelation
values
lsb
sequences
diﬀerent
orders
reason
take
ﬁnal
examples
list
autocorrelations
lower
bounds
2-adic
complexities
lsb
sequences
however
process
proof
even
though
autocorrelation
values
lsb
sequences
diﬀerent
order
2-adic
complexities
sequences
seem
much
inﬂuenced
besides
table
also
give
detailed
autocorrelation
distribution
lsb
sequence
following
corollary
conveniently
use
determining
lower
bound
2-adic
complexity
sequences
corollary
let
positive
integer
following
results
let
7−1
t=0
7-ary
m-sequence
period
suppose
t=0
lsb
sequence
t=0
p−3
acb
autocorrelation
t=0
given
acs
7n−1
−7n−1
7n−1
7n−2
otherwise


let
11n−1
11−1
t=0
11-ary
m-sequence
period
suppose
t=0
lsb
sequence
t=0
p−3
acb
autocorrelation
t=0
given
acs


−11n−1
11n−1
11n−1
11n−2
otherwise
let
17n
17−1
primitive
element
f17n
t=0
17-ary
m-sequence
period
determined
suppose
t=0
lsb
sequence
t=0
p−5
acb
autocorrelation
t=0
given
17n−1
17n−1
17n−1
−15
17n−1
17n−2
otherwise
acs


let
31n
31−1
primitive
element
f31n
t=0
31-ary
m-sequence
period
determined
suppose
t=0
lsb
sequence
t=0
p−3
acb
autocorrelation
t=0
given
31n−1
31n−1
31n−1
31n−1
31n−1
31n−1
−29
31n−1
15m
31n−2
otherwise
acs


lower
bounds
2-adic
complexities
six
classes
lsb
sequences
section
try
derive
lower
bound
2-adic
complexity
lsb
sequence
p-ary
m-sequence
odd
prime
unfortunately
due
complexity
autocorrelation
sequence
p−2
j=0
limited
research
level
give
uniﬁed
proof
problem
therefore
take
examples
calculate
lower
bound
2-adic
complexities
sequences
method
section
limited
examples
also
used
prove
lower
bounds
2-adic
complexity
lsb
sequence
p-ary
sequences
observing
examples
ﬁnd
lower
bounds
2-adic
complexities
sequences
expressed
uniﬁed
form
give
conjecture
lower
bound
2-adic
complexity
class
lsb
sequences
moreover
experimental
results
show
primes
conjecture
holds
larger
verify
limitations
existing
computer
facilities
recall
t=0
lsb
sequence
p-ary
m-sequence
order
p−1
t=0
stxt
describe
method
following
lemma
give
t=0
acs
autocorrelation
value
sequence
useful
lemmas
lemma
let
t=0
−2s
x−1
acs
x−1
xt=0
mod
proof
according
deﬁnition
x−1
sixi
xj=0
x−j
xi=0
sj+τ
+sj
mod
xj=0
acs
mod
si+sj
i−j
mod
mod
xi=0
xj=0
furthermore
xi=0
sixi
xi=0
2si
xt=0
combining
eqs
get
result
cid:4
lemma
let
notations
suppose
positive
integer
theorem
2−1
′∈i
acb
p−1
pn−1
mod
2−1
pn−2
mod
acb
autocorrelation
p−2
j=0
proof
prove
result
case
mod
case
similarly
proved
substituting
theorem
lemma
−2s
x−1
acs
x−1
xt=0
mod
p−3
′=1
cid:2
acb
pn−1
cid:3
cid:2
pn−1
cid:3
pn−2
6=m
′=1,2
···
p−2
p−3
p−3
′=1
cid:2
acb
pn−1
cid:3
p−1
′=1
cid:2
acb
pn−1
cid:3
p−1
′=1
cid:2
acb
pn−1
cid:3
p−1−τ
x−1
xt=0
p−3
mod
′=1
cid:2
acb
pn−1
pn−2
cid:3
cid:2
pn−1
pn−2
cid:3
pn−2
p−3
pn−2
p−3
p−3
p−3
′=1
cid:2
acb
pn−1
pn−2
cid:3
p−1
′=1
cid:2
acb
pn−1
pn−2
cid:3
p−1
′=1
cid:2
acb
pn−1
pn−2
cid:3
p−1−τ
x−1
xt=0
acb
′=1
′=1
p−3
p−3
acb
p−1
p−3
′=1
mod
acb
p−1
acb
p−1−τ
p−3
′=1
pn−2
cid:0
pn−2
x−1
cid:1
xt=0
mod
notice
p−1
substituting
−2s
2−1
2pacb
2pacb
p−1
p−3
′=1
p−3
′=1
p−3
p−3
′=1
2p
≡2
′=1
′=1
cid:16
acb
p−1
p−3
acb
acb
p−1
cid:17
pn−1
mod
pn−2
mod
pn−1
mod
−2s
2−1
≡2
p−3
′=1
p−3
′=1
p−1
pn−2
mod
pn−2
mod
results
follow
cid:4
lemma
let
odd
prime
positive
integer
p|2pn−1
p2|2pn−1
p2|2p−1
furthermore
mersenne
prime
2p−1
i.e.
pn−1
particularly
odd
p|2
pn−1
pn−1
pn−1
proof
note
1|pn
i.e.
2p−1
1|2pn−1
fermat
theorem
know
p|2p−1
p|2pn−1
moreover
euler
theorem
p−1
mod
euler
function
pn−1
pn−2
mod
implies
2pn−1
2p−1
mod
therefore
p2|2pn−1
p2|2p−1
furthermore
let
mersenne
prime
odd
prime
i.e.
2p−1
implies
2pn−1
discussion
suppose
odd
prime
p2|2p−1
cid:0
cid:1
implies
cid:0
cid:1
cid:16
p−1
p−1
cid:17
1|2
p−1
p−1
p−1
k+2
p−1
k+·
·+2k+1
p−1
2k−1−1
i.e.
mod
2k−1
gcd
cid:0
2k−1
cid:1
gcd
p−1
p−1
contradiction
particularly
odd
prime
k|2k−1
fermat
theorem
note
2k−1
p−1
pn−1
pn−1
1|2
pn−1
i.e.
p|2
pn−1
since
desired
result
follows
cid:4
p−1
lemma
let
notations
suppose
positive
integer
theorem
following
two
results
cid:17
gcd
cid:16
2−1
gcd
cid:16
pn−1
cid:16
′∈i
acb
p−1

gcd
cid:16
′∈i
acb
p−1

cid:17
cid:17
cid:17
ordp
p−1
odd
ordp
p−1
even
gcd
cid:16
2−1
cid:17
gcd
cid:0
pn−2
cid:1
gcd
cid:0
cid:1
mod
ordp
mod
ordp
acb
autocorrelation
p−2
j=0
ordp
multiplicative
order
mod-
ular
particularly
gcd
cid:0
2−1
cid:1
gcd
cid:0
2−1
cid:1
mod
otherwise
mersenne
prime
odd
cid:17
gcd
cid:16
2−1
gcd
cid:16
cid:16
′∈i
acb
p−1

gcd
cid:16
′∈i
acb
p−1

cid:17
cid:17
ordp
p−1
cid:17
odd
ordp
p−1
even
gcd
cid:16
2−1
cid:17
=
gcd
cid:0
cid:1
gcd
cid:0
cid:1
mod
ordp
mod
ordp
acb
autocorrelation
p−2
j=0
ordp
multiplicative
order
mod-
ular
proof
eqs
get
gcd
cid:16
2−1
cid:17
gcd
′∈i
acb
p−1
pn−1
gcd
cid:16
2−1
cid:17
gcd
pn−2
gcd
cid:0
pn−2
cid:1
note
2pi
mod
nonnegative
integer
fermat
theorem
pn−1
pn−2
pn−1
pn−2
2pn−1+pn−2+···+p+1
mod
p−1
p−1
mod
therefore
mod
ordp
mod
otherwise
mod
results
furthermore
fermat
theorem
2p−1
mod
p−1
mod
ordp
p−1
p−1
mod
ordp
p−1
therefore
get
mod
ordp
p−1
ordp
p−1
odd
even
results
particularly
theorem
gcd
gcd
gcd
gcd
ord3
ord3
p−1
eqs
become
gcd
cid:16
2−1
cid:17
gcd
3n−1
odd
even
gcd
cid:16
2−1
cid:17
gcd
3n−2
mod
mod
since
23−1
lemma
implies
i.e.
gcd
3n−1
odd
gcd
3n−2
even
therefore
holds
similarly
also
get
note
mersenne
prime
rest
proof
similar
discussion
cid:4
next
give
lower
bounds
2-adic
complexities
lsb
sequences
ternary
5-ary
7-ary
11-ary
17-ary
31-ary
m-sequences
respectively
4.1
2-adic
complexity
lsb
sequence
present
lower
bound
2-adic
complexity
lsb
sequence
ternary
m-sequence
theorem
let
positive
integer
lsb
sequence
ternary
m-sequence
order
2-adic
complexity
t=0
satisﬁes
p−1
t=0
proof
deﬁnition
2-adic
complexity
know
2-adic
complexity
3n−2
t=0
satisﬁes
⌊log2
gcd
⌊log2
gcd
2−1
⌈log2gcd
cid:0
2−1
cid:1
lemma
log2gcd
cid:0
2−1
cid:1
log23
result
follows
cid:4
4.2
2-adic
complexity
lsb
sequence
present
lower
bound
2-adic
complexity
lsb
sequence
5-ary
m-sequence
theorem
let
positive
integer
lsb
sequence
5-ary
m-sequence
order
2-adic
complexity
t=0
p−1
t=0
satisﬁes
mod
otherwise
consequently
2-adic
complexity
t=0
bounded
proof
proof
similar
theorem
except
using
lemma
cid:4
4.3
2-adic
complexity
lsb
sequence
following
give
lower
bound
lsb
sequence
7-ary
m-sequence
theorem
let
positive
integer
t=0
lsb
sequence
7-ary
m-sequence
order
gcd
cid:0
2−1
cid:1
22m
22m
22m
22m
mod
mod
mod
mod
mod
otherwise
therefore
lower
bound
2-adic
complexity
t=0
given
mod
mod
mod
mod
otherwise
mod
consequently
2-adic
complexity
t=0
satisﬁes
proof
result
corollary
know
acb
get
′∈i
acb
p−1
22m




note
mersenne
prime
ord7
p−1
gcd
cid:16
2−1
cid:17
gcd
cid:0
22m
23m
cid:1
gcd
cid:0
22m
23m
cid:1
easy
see
23m
22m
−2m
one
hand
since
22m
−2m
mod
get
gcd
22m
−2m
hand
since
22m
−2m
mod
22m
−2m
get
gcd
22m
22m
thus
proved
gcd
2−1
moreover
gcd
cid:16
2−1
cid:17
23m
23m
gcd
cid:0
cid:1
mod
mod
gcd
cid:0
cid:1
easy
verify
3|2m
2|m
2|n
therefore
get
gcd
cid:16
2−1
cid:17
22m
mod
22m
22m
22m
otherwise
mod
mod
mod
mod


combining
know
holds
note
log2
log23
log27
log221
log2
22m
2-adic
complexity
t=0
satisﬁes
gcd
2−1
result
follows


mod
mod
mod
mod
otherwise
mod
cid:4
4.4
2-adic
complexity
lsb
sequence
present
lower
bound
2-adic
complexity
lsb
sequence
11-ary
m-sequence
theorem
let
positive
integer
11n
p−1
10m
t=0
lsb
sequence
11-ary
m-sequence
order
gcd
cid:0
2−1
cid:1
=

24m
23m
22m
24m
23m
22m
24m
23m
22m
odd
even
mod
mod
therefore
lower
bound
2-adic
complexity
t=0
given
odd
even
mod
mod
10.
≥

consequently
2-adic
complexity
t=0
satisﬁes
proof
result
corollary
know
acb
11.
get
′∈i
acb
p−1
24m
23m
22m
note
ord11
p−1
gcd
cid:16
2−1
cid:17
=
gcd
cid:16
11n−1
cid:0
24m
23m
22m
cid:1
cid:17
gcd
cid:16
24m
23m
22m
cid:17
odd
even
ﬁrst
determine
value
gcd
cid:16
24m
23m
22m
cid:17
easy
see
25m
24m
23m
22m
one
hand
24m
23m
22m
mod
3|2m
odd
odd
9|2m
odd
3|m
11n−1
11n−1
≡pn−1
i=0
mod
odd
even
get
gcd
cid:0
24m
23m
22m
cid:1
odd
even
hand
24m
23m
22m
mod
24m
23m
22m
implies
gcd
24m
23m
22m
24m
23m
22m
combining
eqs
gcd
cid:16
2−1
cid:17
=
gcd
cid:16
11n−1
cid:17
odd
even
since
odd
odd
11|25m
odd
straightly
veriﬁed
112
210
implies
112
lemma
112
25m
thus
gcd
cid:0
11n−1
25m
cid:1
odd
obtain
gcd
cid:16
2−1
cid:17
odd
even
compute
value
gcd
2−1
gcd
cid:16
2−1
cid:17
=
gcd
cid:0
11n−2
cid:1
gcd
cid:0
cid:1
mod
mod
10.
note
5|2m
mod
11n−1
11n−2
xi=0
thus
n−1
mod
odd
even
5|2m
mod
moreover
proof
lemma
know
11|2m
10.
directly
veriﬁed
112
210
112
lemma
implies
112
eqs
get
gcd
cid:16
2−1
cid:17
=

24m
23m
22m
mod
24m
23m
22m
24m
23m
22m
odd
even
combining
eqs
know
holds
note
log
log233
log25
log255
log2
24m
23m
22m
10m
2-adic
complexity
t=0
satisﬁes
⌊log2
gcd
⌊log2
gcd
2−1
odd
even
mod
≥

cid:4
4.5
2-adic
complexity
lsb
sequence
present
lower
bound
2-adic
complexity
lsb
sequence
17-ary
m-sequence
theorem
let
positive
integer
17n
16m
primitive
element
f17n
t=0
lsb
sequence
17-ary
m-sequence
deﬁned
gcd
cid:0
2−1
cid:1
=
mod
mod
therefore
lower
bound
2-adic
complexity
t=0
given
mod
mod
consequently
2-adic
complexity
t=0
satisﬁes
proof
result
corollary
know
acb
17.
get
′∈i
acb
p−1
27m
25m
23m
note
ord17
p−1
gcd
cid:16
2−1
cid:17
gcd
cid:0
27m
25m
23m
28m
cid:1
euclid
algorithm
28m
27m
25m
23m
26m
24m
22m
27m
25m
23m
26m
24m
22m
22m
26m
24m
22m
24m
23m
22m
22m
22m
know
gcd
2−1
|gcd
×2m
+85
16×17
gcd
×2m
+85
16×17
17.
easy
know
gcd
gcd
latter
equality
lemma
therefore
gcd
2−1
gcd
cid:16
2−1
cid:17
=
gcd
cid:0
pn−2
cid:1
mod
mod
moreover
proof
lemma
know
17|2m
mod
directly
veriﬁed
172
216
172
lemma
implies
172
get
gcd
cid:16
2−1
cid:17
=
mod
mod
combining
eqs
know
holds
note
log2
log217
log2
27m
26m
25m
24m
23m
22m
16m
2-adic
complexity
t=0
satisﬁes
⌊log2
gcd
⌊log2
gcd
2−1
mod
mod
cid:4
4.6
2-adic
complexity
lsb
sequence
finally
give
lower
bound
bit-component
sequence
31-ary
m-sequence
needs
following
result
lemma
let
positive
integer
31n
30m
primitive
element
f31n
t=0
lsb
sequence
31-ary
m-sequence
deﬁned
gcd
2−1
odd
mod
mod
otherwise
=

gcd
2−1


mod
mod
mod
mod
mod
otherwise
proof
result
corollary
know
acb
31.
acb
p−1
′∈i
cid:0
5γ14
3γ13
γ12
γ11
3γ10
3γ5
3γ2
cid:1
convenience
denote
5γ14
3γ13
γ12
γ11
3γ10
3γ5
3γ2
15.
note
mersenne
prime
ord31
p−1
5|15
gcd
cid:16
2−1
cid:17
gcd
cid:16
cid:17
gcd
cid:0
γ15
cid:1
easy
see
γ15
following
using
euclidean
algorithm
prove
gcd
gcd
gcd
=

odd
mod
mod
otherwise
firstly
5γ6
2γ5
3γ4+γ3
γ3−2γ2
=γ2
2γ2
3γ2
2γ2
3γ2
3γ2
need
notice
gcd
lemma
see
gcd
gcd
|gcd
gcd
secondly
straight
computation
get
7γ4
mod
note
gcd
gcd
7γ4
7γ4
2γ3
2γ2
2γ3
2γ2
2γ2
2γ3
2γ2
2γ2
18γ
2γ2
18γ
31γ
implies
gcd
gcd
18γ
−31γ
thirdly
computed
γ2−γ−11
mod
γ3+1
note
γ3+1
γ+1
γ2−γ+1
therefore
discuss
values
gcd
−11
gcd
−11
γ2−γ
respectively
since
mod
gcd
gcd
note
3|γ
odd
odd
moreover
since
ord9
know
9|γ
mod
30+1
n−1
mod
9|γ
mod
30n−2
n−2
30n−1
next
know
gcd
gcd
gcd
mod
3|γ2
odd
odd
combining
discussion
get
gcd
=

odd
mod
mod
otherwise
gcd
odd
otherwise
order
determine
exact
value
gcd
need
ﬁnd
maximal
integer
3l|γ2
−11
odd
argument
obvious
3|γ2
−11
odd
odd
odd
less
generality
let
integer
ﬁnd
22m
mod
furthermore
since
ord27
ﬁnd
22m
mod
three
cases
take
3t1
3t1
3t1
respectively
therefore
discussion
know
holds
thus
combining
-eq
know
holds
furthermore
get
gcd
cid:16
2−1
cid:17
=
gcd
cid:0
cid:1
gcd
cid:0
cid:1
mod
mod
note
31n−1
31n−2
≡pn−1
i=0
mod
gcd
gcd
2gcd
2|n
follows
cid:4
present
lower
bound
2-adic
complexity
lsb
sequence
31-ary
m-sequence
theorem
let
positive
integer
31n
30m
primitive
element
f31n
t=0
lsb
sequence
31-ary
m-sequence
deﬁned
lower
bound
2-adic
complexity
t=0
given
mod
mod
mod
mod
mod
mod
mod
odd
mod
mod
odd
mod
mod


consequently
2-adic
complexity
t=0
satisﬁes
10.
remark
process
computing
lower
bounds
2-adic
complexities
six
classes
lsb
sequences
always
suppose
fact
testiﬁed
simply
calculation
lower
bounds
also
hold
remark
pointed
diﬀerent
primitive
element
maybe
lead
diﬀerent
order
autocorrelation
values
sequence
deﬁnition
perhaps
result
diﬀerent
lower
bound
2-adic
complexity
point
also
observed
lemma
fact
take
sequence
p−2
j=0
based
example
calculated
computer
primitive
elements
11,13,21,22
f31
primitive
elements
3,12,17,24
f31
however
claim
main
part
i.e.
nonconstant
part
lower
bound
2-adic
complexity
bit-component
sequence
31-ary
m-sequence
remains
unchanged
explain
conclusion
simply
without
loss
generality
let
another
primitive
element
f31
j1=0
sequence
deﬁned
deﬁnition
gcd
suppose
p−2
j1=0
bdj
mod
p−1
p−2
p−2
know
j=0
implies
need
determine
gcd
ﬁnd
lower
bound
2-adic
complexity
bit-component
sequence
31-ary
m-sequence
deﬁned
primitive
element
fpn
satisfying
lemma
furthermore
gcd
|gcd
similar
discussion
lemma
diﬃcult
know
gcd
also
constant
remark
order
resist
raa
2-adic
complexity
binary
sequence
larger
half
period
results
theorems
2-7
obvious
lower
bounds
adic
complexity
lsb
sequences
bit-component
sequences
mersenne
prime
ternary
5-ary
7-ary
11-ary
17-ary
31-ary
m-sequences
large
enough
achieve
requirement
fact
diﬃcult
ﬁnd
discussions
main
parts
six
lower
bounds
uniﬁed
form
i.e.
p−1
also
get
similar
lower
bound
2-adic
complexity
lsb
sequences
p-ary
m-sequences
similar
method
odd
prime
therefore
give
following
conjecture
conjecture
let
odd
prime
positive
integer
t=0
lsb
sequence
p+1
p-ary
m-sequence
order
2-adic
complexity
t=0
p−1
larger
relation
constant
number
nothing
lower
bounded
references
andrew
klapper
mark
goresky
feedback
shift
registers
2-adic
span
combiners
memory.
journal
cryptology
vol
111-147
1997
tian
tian
wenfeng
2-adic
complexity
binary
m-sequences.
ieee
trans
inf
theory
vol
450-454
2010
rainer
rueppel
linear
complexity
random
sequences.
advances
cryptology-
eurocrypt
167-188
1986
cunsheng
ding
tor
helleseth
weijuan
linear
complexity
legendre
se-
quences.
ieee
trans
inf
theory
vol
693-698
1998
etzion
linear
complexity
bruijn
sequences-old
new
results.
ieee
trans
inf
theory
vol
693-698
1999
helleseth
mathiassen
maas
segers
linear
complexity
sidel
nikov
sequences.
international
symposium
information
theory
122
2004
hao
chen
reducing
computation
linear
complexities
periodic
sequences
ieee
trans
inf
theory
vol
no.12
5537-5539
2006
wang
xiaoni
linear
complexity
binary
sequences
optimal
autocorrela-
tion.
ieee
trans
inf
theory
vol
6388-6397
2010
nian
xiaohu
tang
linear
complexity
binary
sequences
period
optimal
autocorrelation/magnitude.
ieee
trans
inf
theory
vol
7597-7604
2011
liqin
qin
yue
minhong
wang
linear
complexity
whiteman
generalized
cyclo-
tomic
sequences
period
pm+1qn+1.
ieee
trans
inf
theory
vol
5534-5543
2012
young-sik
kim
ji-woong
jang
sang-hyo
kim
jong-seon
linear
complexity
quaternary
sequences
constructed
binary
legendre
sequences.
2012
international
symposium
informa-
tion
theory
applications
611-614
2012
hai
xiong
longjiang
chao
shaojing
linear
complexity
binary
sequences
interleaved
structure.
iet
communications
vol
1688-1696
2013
qiuyan
wang
yupeng
jiang
dongdai
lin
linear
complexity
binary
generalized
cyclotomic
sequences
journal
complexity
vol
731-740
2015
edemskiy
palvinskiy
linear
complexity
binary
sequences
length
optimal
three-level
autocorrelation.
information
processing
letters
vol
116
153-156
2016
hai
xiong
longjiang
chao
new
method
compute
2-adic
complexity
binary
sequences.
ieee
trans
inf
theory
vol
2399-2406
2014
hai
xiong
longjiang
chao
2-adic
complexity
binary
sequences
interleaved
struc-
ture.
finite
fields
applications
vol
14-28
2015
honggang
comments
new
method
compute
2-adic
complexity
binary
sequences
ieee
trans
inf
theory
vol
5803-5804
2014
etsl/sage
speciﬁcation
speciﬁcation
3gpp
conﬁdentiality
integrity
algorithms
128-
eea3
128-ela3
document
zuc
speciﬁcation
version
1.6
2011
etsl/sage
speciﬁcation
speciﬁcation
3gpp
conﬁdentiality
integrity
algorithms
128-
eea3
128-eia3
document
128-eea3
128-eia3
speciﬁcation
version
1.6
2011
agnes
hui
chan
richard
games
linear
span
binary
sequences
obtained
finite
geometries
advances
cryptology-crypto
lncs
263
405-417
1987
