graph
isomorphism
condition
equivalence
reaction
systems
daniela
genova
hendrik
jan
hoogeboom
nataˇsa
jonoska
abstract
consider
global
dynamics
reaction
systems
introduced
ehrenfeucht
rozenberg
dynamics
represented
directed
graph
so-called
transition
graph
two
reaction
systems
considered
equivalent
corresponding
transition
graphs
isomorphic
introduce
notion
skeleton
one-out
graph
uniquely
deﬁnes
directed
graph
provide
necessary
suﬃcient
conditions
two
skeletons
deﬁne
isomorphic
graphs
provides
necessary
suﬃcient
condition
two
reactions
systems
equivalent
well
characterization
directed
graphs
correspond
global
dynamics
reaction
systems
keywords
directed
graphs
graph
isomorphism
graphs
posets
dynamics
reaction
systems
equivalence
reaction
systems
introduction
determining
whether
two
graphs
isomorphic
one
archetypical
problems
graph
theory
plays
important
role
many
applications
network
analysis
problems
although
signiﬁcant
advances
problem
past
year
problem
remains
diﬃcult
side
often
network
analysis
graphs
partitioned
called
modules
vertex
module
adjacent
set
vertices
outside
module
modules
directed
graphs
deﬁned
sets
vertices
incoming
outgoing
edges
vertices
outside
module
shown
modular
decompositions
performed
linear
time
paper
consider
variation
notion
i.e.
consider
vertices
incoming
edges
call
vertices
companions
vertices
precisely
belong
region
venn
diagram
constructed
family
out-sets
out-set
set
vertices
incoming
edges
starting
deﬁne
skeleton
graph
one-out
graph
set
set
vertices
non-zero
in-degree
representatives
family
out-sets
skeleton
deﬁnes
uniquely
directed
graph
characterize
skeletons
isomorphic
graphs
skeletons
isomorphic
graphs
called
companion
skeletons
particular
skeleton
edges
swapped
companion
vertices
produce
companion
skeletons
observation
allows
characterizations
reaction
systems
described
exhibit
global
dynamical
behavior
formal
description
biochemical
interactions
within
conﬁned
region
bounded
porous
membrane
interact
environment
introduced
see
overview
theory
formal
model
called
reaction
systems
based
idea
reaction
depends
presence
compound
enzymes
facilitators
absence
control
substance
inhibits
process
assumed
reaction
enabled
region
contains
enabling
ingredients
none
inhibitors
addition
ingredients
present
system
model
allows
presence
suﬃcient
enable
reactions
participate
formally
reaction
modeled
triple
sets
reactants
date
august
2018.
work
supported
part
nsf
grant
ccf-1526485
nih
grant
r01
gm109459
inhibitors
results
reaction
system
represents
set
triples
step
system
produces
resulting
elements
according
set
reactants
enabled
assumed
universal
set
elements
enter
system
outside
environment
interact
reactants
given
time
several
studies
addressed
question
dynamics
system
step
step
changes
states
system
reachability
convergence
ﬁxed
points
cycles
7,8
observed
complexity
deciding
existence
certain
dynamical
properties
falls
within
pspace
reachability
np-completness
ﬁxed
points
ﬁxed
point
attractors
studies
however
changes
dynamics
inclusion
new
elements
entering
outside
environment
considered
call
condition
outside
involvement
within
system
0-context
reaction
system
paper
study
relationship
dynamics
0-context
reaction
systems
global
dynamics
reaction
system
depends
environmental
context
observe
quite
diﬀerent
dynamical
properties
0-context
reaction
systems
produce
equivalent
global
dynamics
represent
dynamics
reaction
system
directed
graph
vertex
state
system
represented
set
elements
present
system
given
time
directed
edge
vertex
terminates
vertex
representing
new
state
system
reactions
enabled
origin
possible
additions
outside
environment
performed
way
graph
0-context
reaction
system
one-out
graph
skeleton
subgraph
graph
full
dynamics
system
characterize
graphs
representing
global
dynamics
reaction
systems
show
two
reaction
systems
equivalent
0-context
graphs
companion
skeletons
subsets
companions
denote
power
set
set
denoted
number
elements
ﬁnite
set
denoted
|a|
called
size
given
function
natural
equivalence
deﬁned
denoted
kerf
i.e.
kerf
equivalence
class
kerf
denoted
ﬁnite
set
let
family
subsets
say
family
sets
domain
elements
appear
region
venn
diagram
companions
respect
formally
let
subfamily
containing
sets
include
complement
subfamily
sets
contain
call
neighborhood
deﬁnition
2.1.
let
ﬁnite
set
family
subsets
two
elements
companions
respect
write
denote
equivalence
class
set
called
companion
set
thus
equivalence
class
every
element
set
companions
relative
intersection
sets
include
minus
union
remaining
sets
i.e
equivalence
based
neighborhoods
elements
respect
family
also
used
authors
study
activity
regions
set
neurons
convexity
regions
considered
special
case
i.e.
case
outer
region
denoted
venn
diagram
convention
converse
also
holds
non-empty
intersection
sets
minus
union
remaining
sets
forms
equivalence
class
precisely
non-empty
p\s
coincides
assuming
implies
every
every
hence
conversely
precisely
hence
thus
therefore
every
equivalence
class
characterized
subset
neighborhood
general
every
deﬁnes
equivalence
class
i.e.
might
empty
case
corresponding
region
venn
diagram
empty
family
sets
denote
smallest
family
sets
contains
closed
intersection
say
intersection
closure
say
intersection
closed
note
example
2.1.
consider
ﬁnite
set
family
subsets
given
thus
family
deﬁnes
following
companion
sets
nonempty
region
corresponding
venn
diagram
companion
set
sections
follow
use
correspondence
families
sets
sizes
sets
well
intersections
deﬁnition
2.2.
let
two
families
sets
domains
respectively
i.e
faithful
correspondence
bijection
satisﬁes
|x|
note
domains
diﬀer
size
i.e
neither
included
resp
shown
lemma
2.3
faithful
correspondences
preserve
size
sets
intersections
also
sizes
companion
sets
deﬁned
families
true
sizes
domains
equal
since
otherwise
outer
regions
diﬀer
size
lemma
2.3.
let
faithful
correspondence
exists
bijection
whose
extension
coincides
moreover
extension
bijectively
maps
companion
sets
companion
sets
respecting
size
proof
observe
equivalence
classes
∼o1
companion
sets
precisely
non-empty
sets
family
similarly
holds
precisely
set
show
corresponding
equivalence
classes
companion
sets
size
established
required
bijection
respects
equivalences
naturally
constructed
consider
images
sets
let
latter
equality
holds
bijection
ranges
subsets
ranges
equivalence
classes
ranges
equivalence
classes
argue
|cp|
takes
care
cases
deﬁnes
empty
set
instead
equivalence
class
corresponding
image
void
first
observe
pc|
pc|
equality
follows
ﬁrst
second
requirement
deﬁnition
2.2
except
special
case
consequently
inclusion-exclusion
principle
states
express
size
union
sets
sums
sizes
intersections
|sm
i=1
yi|
p∅⊂i⊆
|i|+1|ti∈i
yi|
apply
sets
obtain
pc|
corresponding
companion
sets
number
elements
construct
bijection
respects
companions
cid:3
directed
graphs
companion
skeletons
directed
graph
pair
sets
ﬁnite
set
whose
elements
called
vertices
set
edges
also
write
resp
denote
set
vertices
resp
edges
edge
say
initial
vertex
terminal
vertex
vertex
deﬁne
ing
set
vertices
initial
edges
whose
terminal
vertex
i.e.
ing
similarly
out-set
outg
set
vertices
terminal
edges
whose
initial
vertex
outg
|outg
vertices
say
1-out
graph
out-family
deﬁned
outg
drop
subscript
ing
outg
whenever
graph
understood
context
following
observation
main
motivation
considering
notion
companions
lemma
3.1.
let
directed
graph
let
ing
ing
proof
observe
edge
outg
thus
two
nodes
incoming
edges
out-sets
thus
companions
respect
i.e.
cid:3
case
graph
number
elements
exceed
number
vertices
therefore
case
always
assume
indexed
subset
i.e.
given
representation
element
called
representative
set
representatives
assume
representatives
unique
i.e.
formally
representatives
ﬁxed
bijection
clearly
choice
represen-
tative
set
depends
function
changing
map
renaming
sets
convention
order
ease
notation
understood
drop
subscript
simply
denote
set
representatives
also
context
always
assume
subset
index
set
family
uniquely
determines
set
let
directed
graph
outg
every
vertex
i.e.
without
isolated
vertices
let
set
representatives
deﬁne
outg
consider
one-out
graph
choice
representative
outg
outg
outg
induces
following
deﬁnition
rest
section
assume
ﬁxed
ﬁnite
deﬁnition
3.2.
triple
called
skeleton
set
family
subsets
indexed
|o|
surjection
graph
deﬁned
skeleton
graph
graph
uniquely
determined
skeleton
directly
deﬁnition
outgσ
moreover
every
directed
graph
skeleton
suﬃcient
take
set
representatives
outg
remark
3.3.
note
every
representative
i.e.
representative
every
set
inside
set
one-out
graph
deﬁned
skeleton
isomorphic
subgraph
element
set
seems
natural
requirement
representatives
unfortunately
always
possible
instance
graph
four
vertices
four
out-sets
three
element
domain
like
out-sets
contain
representatives
skeleton
subgraph
figure
example
3.1
top
one-out
graphs
corresponding
skeletons
graph
representative
indicated
red
representative
blue
bottom
graph
graphs
subgraphs
example
3.1.
consider
collection
sup-
pose
graph
consider
three
skeletons
o′′
o′′
representatives
deﬁned
follows
o′′
o′′
three
one-out
graphs
depicted
fig
top
three
skeletons
deﬁne
graph
whose
edges
i.e.
property
representative
representative
one-out
graphs
subgraphs
see
fig
however
property
subgraph
vertex
out-set
cid:3
given
two
skeletons
interested
conditions
graphs
isomorphic
observe
structures
may
quite
diﬀerent
seen
example
3.1
yet
may
isomorphic
utilize
following
deﬁnition
deﬁnition
3.4.
two
skeletons
set
set
called
companions
bijection
extends
faithful
correspondence
note
bijection
faithful
correspondence
relationship
skeleton
companions
equivalence
relation
skeletons
first
see
pair
skeletons
graph
companions
lemma
3.5.
two
skeletons
companions
proof
deﬁnition
outgσ
hence
outg
thus
identity
map
extends
mapping
faithful
correspondence
satisfying
cid:3
let
two
companion
skeletons
corresponding
faithful
correspondence
deﬁnition
3.4.
let
set
companions
corresponding
i.e.
lemma
2.3
set
companions
corresponding
following
lemma
lemma
3.6.
every
proof
show
therefore
implying
due
symmetry
argument
working
η−1
instead
bijection
|x|
cid:3
correspondence
two
companion
skeletons
deﬁnition
3.4
take
care
internal
symmetry
within
set
simple
case
appears
swaps
two
companion
vertices
reﬂected
swap
outgoing
edges
corresponding
skeletons
let
skeleton
consider
two
companions
respect
along
edges
consider
function
equal
except
images
swapped
skeleton
companion
bijection
note
since
companions
lemma
3.1
nodes
incoming
edges
hence
also
gσx
swapping
out-edges
means
outgoing
edges
interchanged
gσx
comparing
hence
two
graphs
isomorphic
via
isomorphism
swaps
vertices
call
gσx
result
companion
edge
swapping
example
3.2.
consider
skeleton
example
3.1
one-out
graph
depicted
fig
top-left
repeated
fig
pair
companions
deﬁned
out-sets
means
possibility
companion
edge
swapping
exchange
outgoing
edges
happen
mapped
respectively
edge
swapping
yields
one-out
graph
gf2,3
shown
fig
skeleton
gf2,3
gν2,3
figure
companion
skeletons
related
edge
swapping
graph
gν2
fig
isomorphic
ν2,3
f2,3
diﬀers
one-out
graph
set
representatives
out-sets
graphs
gν2,3
see
fig
bottom
fig
right
isomorphic
cid:3
fig
illustrates
case
distinct
identity
permutes
elements
within
given
companion
set
respect
family
lemma
3.6
every
companion
set
number
elements
map
element
number
elements
map
fig
shows
example
companion
set
oy1
py1
must
say
oy1
oy1
oy1
case
isomorphic
obtained
multiple
edge
swapping
companion
edge
swapping
special
case
following
general
result
theorem
3.7.
two
directed
graphs
isomorphic
companion
skeletons
set
set
figure
functions
companion
skeletons
lemma
3.6
proof
let
isomorphism
natural
way
also
faithful
correspondence
extension
write
let
set
representatives
deﬁne
outg
skeleton
let
set
ψ−1
ψ−1
words
observe
skeleton
companion
deﬁnition
set
representatives
setting
moreover
faithful
correspondence
finally
see
edge
outg′
isomorphism
ψ−1
outg
ψ−1
ψ−1
ψ−1
ψ−1
deﬁnition
conversely
suppose
companion
skeletons
let
deﬁnition
3.4
bijection
extending
faithful
correspondence
claim
generates
isomorphism
fix
lemma
3.6
every
companion
set
respect
let
companion
set
contains
companion
set
respect
contains
denote
therefore
bijection
observe
companion
classes
respect
similarly
form
partition
also
sets
resp
form
partition
resp
extend
bijections
whole
set
deﬁne
ψ|xx
companion
sets
respect
since
extension
bijections
partition
well
deﬁned
bijection
observe
deﬁnition
belong
companion
set
respect
remains
show
edge
edge
let
i.e.
skeleton
deﬁnition
representative
oy′
deﬁnition
outg
deﬁnition
i.e.
deﬁnition
companion
graphs
outg′
therefore
edge
deﬁnition
observed
belongs
companion
set
lemma
3.1
ing
ing′
hence
edge
conclude
isomorphism
cid:3
isomorphic
graphs
companion
skeletons
regardless
skeleton
choose
corollary
3.8.
let
isomorphic
graphs
skeletons
set
respectively
companions
proof
isomorphic
theorem
3.7
exist
companion
skeletons
lemma
3.5
companions
respectively
result
follows
transitivity
companionship
skeletons
cid:3
partially
ordered
sets
section
consider
partially
ordered
sets
prepares
discussion
reaction
systems
next
section
skeletons
corresponding
graphs
special
structure
nodes
elements
partially
ordered
set
additionally
assume
out-sets
graphs
cones
partial
order
convenient
beneﬁt
minimal
element
cone
taken
natural
representative
cone
let
partially
ordered
ﬁnite
set
poset
deﬁne
upper
cone
simply
cone
let
deﬁne
set
cones
based
poset
called
upper
semi-lattice
every
subset
least
upper
bound
observe
case
upper
semi-lattice
intersection
two
cones
elements
cone
least
upper
bound
i.e.
smallest
words
upper
semi-lattice
closed
intersection
cones
convention
posets
considered
upper
semi-lattices
consider
family
sets
consisting
cones
based
set
companions
respect
becomes
cor
cid:18
sy∈r
smallest
element
companion
equivalence
class
called
main
representative
cor
observe
cor
i.e.
two
elements
companions
set
main
representatives
cid:19
x6=y
particular
poset
ﬁnite
set
set
companions
respect
equals
cor
cid:18
cid:19
example
4.1.
consider
poset
let
let
note
let
illustrated
fig
left
although
companion
contains
subset
note
companions
except
companion
cid:3
figure
venn
diagram
out-sets
graph
collection
cones
faithful
correspondence
see
example
4.2
remainder
paper
consider
graphs
partial
orders
let
poset
function
usual
one-out
graph
associated
observed
cones
partial
order
natural
representative
family
cones
natural
set
representatives
main
skeleton
associated
equals
deﬁnes
graph
edges
note
element
member
set
represents
hence
subgraph
conversely
graph
nodes
out-sets
cones
poset
unique
main
skeleton
thus
case
out-sets
cones
main
skeleton
ﬁxed
function
consequence
notion
companions
say
two
functions
companions
main
skeletons
deﬁne
companions
i.e.
bijection
identifying
function
one-out
graph
call
companions
summarizing
graphs
nodes
partial
order
out-sets
cones
partial
order
eﬃcient
summary
node
mapped
minimal
element
out-set
skeleton
unique
given
graph
characterize
graphs
isomorphic
graphs
deﬁned
main
skeletons
suﬃces
consider
structure
family
out-sets
lemma
4.1.
let
poset
graph
isomorphic
graph
main
skeleton
exists
faithful
correspondence
proof
obviously
out-sets
graph
consist
upper
cones
hence
forward
implication
conversely
assume
graph
nodes
exists
faithful
correspondence
lemma
2.3
ﬁnd
bijection
whose
extension
corresponds
let
skeleton
deﬁne
main
skeleton
companion
result
follows
characterization
theorem
3.7.
out-set
corresponds
via
cone
cid:3
deﬁne
companions
construction
example
4.2.
let
graph
node
set
given
following
adjacency
matrix
see
fig
right
deﬁnes
following
companion
sets
faithful
correspondence
family
upper
cones
within
take
contains
sets
size
respectively
matching
sets
illustrated
fig
let
bijection
shown
table
extended
sets
matching
bottom
rows
table
deﬁne
main
skeleton
deﬁnes
graph
isomorphic
table
swap
elements
within
companion
set
obtain
main
skeleton
diﬀerent
isomorphic
graph
cid:3
reaction
systems
start
recalling
basic
notions
reaction
systems
reaction
formalized
triplet
represent
reactant
inhibitor
product
respectively
whenever
reactants
none
inhibitors
present
reaction
yield
product
eﬀect
separate
reactions
cumulative
union
products
applicable
reactions
precisely
following
deﬁnition
5.1.
reaction
system
pair
ﬁnite
set
background
set
set
reactions
let
reaction
say
enabled
result
denoted
resa
equals
enabled
otherwise
result
equals
resa
sa∈a
resa
note
required
reactant
inhibitor
non-empty
technical
assumption
consequence
reaction
enabled
either
thus
resa
resa
given
reaction
system
deﬁne
resa
set
resa
note
resa
thus
resa
resa
surjection
example
5.1.
use
reaction
system
example
background
set
six
reactions
belong
enabled
resa
reactions
enabled
resa
three
enabled
resa
cid:3
figure
zero
context
graph
example
5.1.
dynamic
behaviour
reaction
system
given
notion
state
sequence
inter-
active
process
let
background
set
state
sequence
form
res
wi+1
intuition
behind
computa-
tional
process
follows
step
new
products
generated
enabled
reactions
eements
produced
reactions
vanish
so-called
principle
non-permanency
hand
step
context
environment
reactions
take
place
may
add
new
elements
state
system
hence
new
state
system
step
superset
res
perspective
introduce
two
graphs
represent
stepwise
behavior
reaction
systems
without
context
deﬁnition
5.2.
0-context
graph
one-out
graph
set
resa
edge
transition
graph
graph
edge
set
resa
understood
allow
drop
subscript
res
deﬁnition
0-context
graph
subgraph
transition
graph
reaction
system
link
one-out
graphs
graphs
deﬁned
main
skeleton
deﬁned
section
obtained
follows
deﬁned
node
set
0-context
graph
equals
one-
graph
gresa
deﬁned
resa
transition
graph
graph
deﬁned
main
skeleton
ﬁxed
resa
partial
order
example
5.2.
example
5.1
0-context
graph
family
resa
matches
family
sets
nonempty
set
incoming
edges
given
figure
cid:3
one-out
graph
consists
one
components
components
tree-like
ending
single
cycle
deﬁnition
reaction
systems
one
component
must
loop
turns
virtually
graph
domain
0-context
graph
reaction
system
respect
special
position
minimal
maximal
set
follows
common
construction
reaction
systems
see
e.g.
implementation
transition
system
section
4.2
proposition
5.3.
one-out
graph
vertex
set
0-context
graph
two
edges
proof
every
res
res
reactions
enabled
empty
set
reactions
inhibited
full
set
due
requirement
reactant
inhibitor
non-empty
therefore
every
0-context
graph
contains
edges
consider
one-out
graph
vertices
containing
edges
deﬁne
set
reactions
matching
rest
edges
graph
complementarity
ﬁrst
second
component
reactions
ensures
reaction
enabled
single
set
res
cid:3
consequence
lemma
4.1
characterize
graphs
isomorphic
transition
graphs
reaction
systems
recall
faithful
correspondence
maps
companion
sets
two
families
sets
respecting
sizes
observed
lemma
4.1
out-sets
transition
graphs
must
faithfully
correspond
structure
upper
cones
additionally
proposition
5.3
transition
graph
must
edges
similar
edges
must
present
graph
isomorphic
transition
graph
one
intersection
out-sets
none
out-sets
except
out-set
consists
vertices
characterization
given
formally
following
thoerem
theorem
5.4.
graph
isomorphic
transition
graph
reaction
system
faithful
correspondence
family
upper
cones
vertex
\sx∈o
x6=v
edges
vertex
proof
background
set
taking
requirements
construction
hold
transition
graph
must
hold
graph
isomorphic
assume
graph
given
statement
show
isomorphic
transition
graph
let
1,2
isomorphic
graph
poset
main
skeleton
order
transition
graph
function
must
additionally
satisfy
proposition
5.3.
note
skeleton
constructed
based
node
node
bijection
extending
set
set
bijection
see
lemma
2.3.
constructing
bijection
freedom
long
respect
companion
sets
note
incoming
edge
means
element
one
out-sets
chosen
none
out-sets
except
know
belongs
companion
set
within
none
sets
companion
set
must
match
outer
companion
set
cup
means
take
time
out-set
contains
must
conclude
out-set
similarly
intersection
out-sets
companion
set
must
correspond
inner
companion
set
contains
may
assume
conclude
follow
proof
lemma
4.1.
out-set
proof
set
set
corresponds
apply
set
out-set
must
correspond
holds
thus
required
cid:3
immediate
application
theorem
3.7
characterize
reaction
systems
isomorphic
transition
graphs
theorem
5.5.
reaction
systems
transition
graphs
ga′
isomorphic
0-context
graphs
companions
see
obvious
structural
relationship
two
ga′
isomorphic
basic
operation
0-context
graphs
yields
transition
graph
isomorphic
original
0-context
graph
based
companion
edge
swapping
main
skeletons
let
let
two
elements
∼resa
consider
pair
edges
resa
resa
swapping
targets
edges
introducing
new
pair
resa
resa
one-out
provided
unequal
graph
hence
0-context
graph
see
proposition
5.3
graph
obtained
seen
section
lemma
3.1
incoming
edges
equal
switching
swaps
outgoing
edges
ga.
vertices
edges
unchanged
conclude
ga′
isomorphic
outgoing
edges
example
5.3.
reconsider
example
5.1
see
figure
0-context
graph
elements
companions
respect
resa
companion
edges
switching
obtain
0-context
graph
ga′
single
component
cycles
except
unavoidable
loop
original
two
components
transition
graphs
ga′
isomorphic
cid:3
figure
0-context
graph
equivalent
one
example
5.1
swap-
ping
companion
edges
dashed
edges
replacements
two
original
edges
compare
fig
references
baixeries
szathmary
valtchev
godin
yet
faster
algorithm
building
hasse
diagram
concept
lattice
formal
concept
analysis
icfca
2009
lecture
notes
computer
science
volume
5548
2009
162–177
l´aszl´o
babai
graph
isomorphism
quasipolynomial
time
extended
abstract
proceedings
48th
annual
acm
sigact
symposium
theory
computing
stoc
2016
acm
new
york
usa
2016
684–697
brijder
ehrenfeucht
main
rozenberg
tour
reaction
systems
international
journal
foundations
computer
science
2011
1499–1517
cruz
giusti
itskov
kronholm
open
closed
convex
codes
arxiv:1609.03502
dennunzio
formenti
manzoni
a.e
porreca
reachability
resource-bounded
reaction
systems
language
automata
theory
applications
lata
2016
lecture
notes
computer
science
volume
9618
2016
592–602
ehrenfeucht
rozenberg
reaction
systems
fundamenta
informaticae
2006
1–18
formenti
manzoni
a.e
porreca
cycles
global
attractors
reaction
systems
descriptional
com-
plexity
formal
systems
dcfs
2014
lecture
notes
computer
science
volume
8614
2014
114–125
formenti
manzoni
a.e
porreca
fixed
points
attractors
reaction
systems
computability
europe
cie
2014
lecture
notes
computer
science
volume
8493
2014
194–203
formenti
manzoni
a.e
porreca
complexity
occurrence
convergence
problems
reaction
systems
natural
computing
2015
185–191
gallai
transitiv
orientierbare
graphen
acta
mathematica
academiae
scientiarum
hungaricae
1967
25–66
r.m
mcconnell
montgolﬁer
linear-time
modular
decomposition
directed
graphs
discrete
applied
mathematics
145
2005
198–209
genova
department
mathematics
statistics
university
north
florida
jacksonville
usa
e-mail
address
d.genova
unf.edu
h.j
hoogeboom
liacs
leiden
university
netherlands
e-mail
address
h.j.hoogeboom
liacs.leidenuniv.nl
jonoska
department
mathematics
statistics
university
south
florida
tampa
usa
e-mail
address
jonoska
math.usf.edu
