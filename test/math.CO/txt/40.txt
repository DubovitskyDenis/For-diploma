shufﬂed
equi-n-squares
van
vel
faculteit
exacte
wetenschappen
vrije
universiteit
amsterdam
amsterdam
netherlands
department
mathematics
university
antwerp
antwerp
belgium
abstract
formal
n-square
set
positions
matrix
shufﬂe
formal
n-square
consists
independent
rotations
row
column
key
result
turns
valid
least
set
positions
mapped
one
shufﬂe
onto
transversal
columns
consider
two
applications
equi-
squares
i.e.
n-matrices
ﬁlled
digits
equal
amounts
first
shufﬂed
equi-n-square
seen
torus
colors
two
orthogonal
lay-
ers
rings
rotated
unlike
rubik
cube
permutation
colored
cells
implemented
shufﬂes
lower
bound
required
amount
shufﬂing
approxi-
mately
n/2
modest
obtains
simple
counting
argument
upper
bound
shown
aid
key
result
second
application
invokes
column
transversals
process
indirection
pro-
duce
theoretically
unpredictable
sequences
integers
shufﬂed
equi-n-squares
key
result
achieved
out-of-the-box
thinking
optimizing
position
sets
eraging
computations
based
number
partitions
rotating
subsets
regular
n-gon
apart
use
cyclotomic
polynomials
intermediate
results
need
computer
assistence
efforts
also
generated
variety
partially
unsolved
problems
selected
eight
brief
discussion
based
available
theoretical
computer
evidence
ams
subject
classiﬁcation
2010.
primary
05b15
05a17
11r18
secondary
00a08
05a05
05c21
key
words
phrases
cyclotomic
polynomial
equi-n-square
formal
n-square
indirec-
tion
integer
partition
latin
square
network
flow
partition
latin
sets
rubik
cube
shufﬂe
introduction
basic
notions
equi-
n-square
stein
times
matrix
digits
occurring
times
square
latin
digit
occurs
row
column
number
equi-n-
squares
product
multinomial
coefﬁcient
choose
times
latter
counts
renaming
digits
table
compares
number
latin
squares1
32.
equi-n-squares
underlying
formal
squares
major
subjects
paper
section
explain
motives
research
present
deﬁnitions
concepts
needed
formulate
methods
main
results
precise
way
2log
188
900
253
413
2log
560
158
328
645
122
909
414
897
159
088
512
442
200
947
621
529
248
727
742
386
302
634
2log
875
225
1020
244
1177
626
1347
546
1530
166
1725
642
5121
444
2log
362
864
392
004+
462
202+
539
215+
623
205+
714
324+
2410
45+
table
equi-n-squares
versus
latin
squares
1.1.
motivation
project
started
intuitive
idea
produce
seemingly
unpredictable
number
sequences
serve
stream
cyphers
menezes
use
equi-n-squares
surprising
growing
body
results
using
latin
squares
quasigroups
error
correcting
codes
liu
dénes
keedwell
cryptocodes
denés
keedwell
shcherbacov
grosek
sys
message
authentication
e.g.
meyer
non-linear
pseudo-random
noise
sequences
e.g.
koscielny
applications
often
require
rather
large
latin
squares
additional
demands
like
pseudo
randomness
see
jacobson
matthews
high
non-associativity
ease
representation
contrast
priori
requirements
equi-n-squares
search
proofs
lead
variety
methods
results
problems
network
ﬂows
used
obtain
partitions
latin
n-sets
common
two
equi-n-squares
produce
partitions
latin
column
transversals
counting
events
averaging
recurring
theme
handle
optimal
position
sets
computations
number
partitions
rotating
subsets
n-gon
apart
making
good
use
cyclotomic
polynomials
allows
derive
key
result
shufﬂing
n-sets
column
transversals
two
major
applications
described
detail
present
paper
deals
combinatorial
algebraic
features
subject
discussion
cryptologic
features
deferred
separate
paper
1.2.
coordinates
indirection
columns
rows
n-matrix
numbered
right-to-left
bottom-to-top
order
position
cell
pair
form
column
number
row
number
set
positions
formal
n-square
digit
assignment
equi-n-square
seen
state
formal
square
partition
positions
equal-sized
parts
called
colors
set
positions
latin
given
state
positions
colored
differently
_______________
values
consult
http
//oeis.org/a002860
estimates
given
mckay
rogoyski
exact
value
due
mckay
wanless
used
lower
bound
attributed
h.j
ryser
versie
process
indirection
equi-n-square
transforms
non-negative
integer
non-
negative
integer
follows
xn-
represents
base
yn-
digit
position
sequence
positions
k=0
rep-
call
resents
transversal
columns
graph
function
graph
horizontal
graph
indirection
process
speciﬁed
h-indirection
similarly
v-indi-
rection
reads
v-graphs
transversals
rows
equivalently
function
graphs
oriented
along
vertical
axis
theory
equi-n-squares
set
positions
transversal
rows
columns
better
known
complete
transversal
dénes
keedwell
stein
term
indirection
borrowed
operator
programming
language
turns
memory
pointer
memory
content
suggested
process
treats
equi-n-square
array
n-digit
numbers
indexed
n-digit
numbers
maintain
exploit
illusion
price
paid
shall
see
shortly
1.3.
intrinsic
bias
ratio
table
illustrates
equi-n-square
unlikely
latin
columns
rows
indirection
output
may
therefore
fail
systematically
certain
digits
certain
positions
defect
analyzed
follows
let
let
distinct
colors
number
n-sets
obtained
method
inclusion-exclusion
van
lint
wilson
i=1
intersecting
k=0
cid:230
cid:215
number
n-sets
exactly
colors
obtained
multiplying
previous
amount
binomial
coefﬁcient
choose
expected
number
colors
n-set
cid:215
k=0
r=1
cid:230
cid:215
expected
number
missing
colors
n-set
apparently
state
formal
square
matter
number
various
interpretations
missing
rows
missing
columns
missing
digits
may
dubbed
intrinsic
bias
formal
n-square
bin
1.67
2.29
2.91
3.54
4.17
4.80
5.43
6.06
6.70
7.33
7.96
8.59
9.22
9.85
10.49
11.12
0.33
0.71
1.09
1.46
1.83
2.20
2.57
2.94
3.30
3.67
4.04
4.41
4.78
5.15
5.51
5.88
0.50
0.89
1.27
1.64
2.01
2.38
2.75
3.12
3.49
3.86
4.22
4.59
4.96
5.33
5.70
6.07
11.75
12.38
13.01
13.66
14.28
14.91
15.54
16.17
16.80
17.44
18.07
18.70
19.33
19.97
20.60
21.23
6.25
6.62
6.99
7.35
7.72
8.09
8.46
8.83
9.19
9.56
9.93
10.30
10.67
11.03
11.40
11.77
6.43
6.80
7.17
7.57
7.96
8.27
8.64
9.01
9.38
9.75
10.11
10.48
10.85
11.22
11.59
11.95
bin
table
expected
number
rows
bias
equi-n-square
versus
n-digit
bias
bin
table
displays
computed
values
together
expected
number
bin
dig-
absent
nonnegative
number
leading
zeros
needed
note
bin
values
base
read
equi-n-square
random
sequence
positions
tend
slightly
different
digits
yet
implementations
behave
well
demanding
statisti-
cal
tests
randomness
provided
square
shufﬂed
prescribed
stein
cor
5.2
shown
equi-n-matrix
must
row
column
least
cid:214
cid:246
cid:230
cid:246
cid:230
cid:246
cid:215
cid:246
cid:230
cid:246
cid:230
cid:246
distinct
colors
result
sharp
despite
much
higher
expectation
colors
generic
n-set
1.4.
shufﬂing
row
resp.
column
formal
n-square
copy
/nzz
interpreting
numbers
column
numbers
resp.
row
numbers
modulo
often
identify
set
rotation
integer
amount
function
type
mod
suggesting
geometric
interpretation
regular
n-gon
terminology
extends
rows
columns
formal
n-square
avoid
systematically
biased
indirection
output
permuting
positions
v-move
h-move
independently
rotates
column
row
amount
composition
elementary
moves
amounts
sequence
alternating
h-moves
v-move
followed
h-move
called
vh-shufﬂe
opposite
order
hav
hv-shufﬂe
also
use
shufﬂe
unit
measurement
referring
composed
move
type
hvhvh
shufﬂes
key
result
set
positions
formal
n-square
mapped
onto
h-graph
column
transversal
one
vh-shufﬂe
physical
model
shufﬂed
equi-n-square
torus
two
orthogonal
layers
rotating
rings
true
colors
replacing
digits
may
remind
one
rubik
cube
joyner
problem
recovering
disturbed
state
ﬁrst
application
handles
similar
problem
torus
note
adapted
formulation
part
fails
rubik
cube
theorem
let
every
permutation
colored
cells
equi-n-square
implemented
composition
shufﬂes
equi-
n-square
exists
second
one
least
log
cid:215
2log
shuf-
ﬂes
away
key
result
every
two
equi-n-squares
shufﬂes
away
even
otherwise
convenience
consider
standard
operation
mode
repeating
following
cycle
actions
produce
sequence
outputs
equally
long
sequence
inputs
another
major
objective
prove
following
result.2
perform
two
hv-shufﬂes
shufﬂe
input
deliberately
left
unspeciﬁed
perform
h-indirection
non-negative
input
integer
output
indirected
integer
theorem
key
result
let
integer
given
equi-n-square
two
sequences
non-negative
integers
size
standard
operation
mode
turns
ﬁrst
input
sequence
second
output
sequence
sequence
cid:215
shufﬂes
theorem
interpreted
theoretical
unpredictabilty
output
given
input
realistic
discussion
cryptologic
features
presented
section
largely
prepares
way
theorem
proves
parts
key
result
conclusion
entire
section
theorems
part
derived
discussed
section
closing
documented
list
eight
problems
_______________
sophisticated
version
theorem
involves
pair
orthogonal
equi-n-matrices
cell
holds
unique
digit
pair
tempering
output
necessary
taking
additional
digit
in-
formation
results
unpredictable
2n-digit
output
-digit
input
see
versie
states
transitions
shufﬂes
transition
equi-n-squares
bijective
function
underlying
formal
square
p-color
equals
q-color
position
mim-
ics
physical
permutation
cells-with-content
transitions
pair
equi-n-
squares
considered
equivalent
suggesting
groupoid
point
view
pair
equi-n-
squares
one
transition
morphism
representable
different
bijections
section
derive
results
structure
states
representing
transitions
e.g.
composed
shufﬂes
ﬁrst
result
gives
theorem
part
introduction
2.1.
shufﬂe
theorem
every
transition
two
equi-n-squares
repre-
sented
composition
shufﬂes
either
fact
even
every
permutation
posi-
tions
equals
composition
shufﬂes
odd
even
permutations
proof
position
column
number
row
number
assign
ranking
number
n2-cycle
moving
position
position
ranks
one
higher
modulo
achieved
h-move
rotating
row
one
unit
left
followed
v-move
rotating
0-th
i.e.
rightmost
column
one
unit
leaving
columns
rest
next
describe
implement
transposition
positions
ranked
composed
hv-shufﬂe
done
h-move
rotating
bottom
row
one
unit
left
odd
potential
problem
shufﬂe
even
permutation
sequence
shuf-
ﬂes
produce
exactly
transposition
equivalence
comes
play
next
method
applies
regardless
parity
positions
color
transposition
equivalent
identity
colors
different
ﬁnd
position
ranked
color
position
3-cycle
equivalent
produced
hv-shufﬂes
follows
row
col
denote
i-th
row
j-th
col-
umn
operations
modulo
row
row
col
row
col
row
symmetric
group
generated
m-cycle
transposition
result
hv-shufﬂes
follows
due
adaptations
argument
works
vh-shufﬂes
elaborating
argument
shown
3-cycle
performed
exactly
sequence
shufﬂes
hence
shufﬂes
equi-n-square
generate
least
alternating
group
an2
odd
generators
obtain
full
symmetric
group
sn2
shufﬂe
theorem
suggests
question
amount
shufﬂing
needed
transition
hav
following
lower
bound
theorem
part
2.2.
theorem
equi-
n-square
exists
second
one
less
log
cid:215
2log
shufﬂes
away
denotes
number
states
denotes
upper
integer
approximation
refer
table
values
2log
one
verify
equals
n/2ø
even
equals
n/2
100
even
odd
100
proof
given
equi-n-square
assume
reach
every
equi-n-square
shufﬂes
reach
n2kn
different
equi-n-squares
1-1
funtions
composed
shuf-
ﬂes
however
n2kn
contradiction
hence
either
square
reached
contradicting
thm
2.1
square
reached
shufﬂes
ﬁrst
guess
upper
bound
may
use
proof
thm
2.1.
count
shufﬂes
transposition
one
hv-
shufﬂe
long
cycle
note
powers
long
cycle
implemented
one
shufﬂe
two
cycles
generate
transpositions
general
cycles
leads
estimate
shufﬂes
generic
transformation
lot
better
results
combination
achieved
section
actual
upper
bound
theorem
proof
postponed
section
integers
two
partitions
set
size
2.3.
lemma
let
parts
size
common
transversal
avoiding
proof
let
two
partitions
set
parts
size
model
situation
network
follows
vertex
set
consists
source
sink
three
collections
formally
assumed
disjoint
part
outgoing
incoming
arrow
member
contains
arrow
part
part
arrows
capacity
given
set
vertices
let
denote
intersection
respectively
chosen
positions
cut
least
denote
vertex
expressions
type
obviously
cut
capacity
remaining
vertices
let
cut
network
giv
set
arrows
vertex
short-
ened
set
name
taken
stand
cardinality
context
requires
number
wish
show
capacity
may
assume
members
resp.
referred
used
resp.
unused
positions
parts
clearly
least
number
unused
positions
minus
times
number
unused
parts
also
least
number
used
positions
minus
times
number
used
parts
adding
two
inequalities
ﬁnd
middle
terms
left
count
least
cid:215
cid:215
adding
see
left
side
least
theorem
ford
fulkerson
integer
ﬂow
strength
ﬂow
uses
chosen
positions
subset
size
transversal
partitions
omitting
voids
part
yielding
transversal
avoiding
chosen
positions
yields
part
next
result
natural
induction
2.4.
corollary
structure
transitions
let
equi-
n-squares
given
integer
set
positions
containing
color
times
either
state
partition
sets
size
latin
given
set
positions
consuming
amount
p-color
representation
transition
partition
remaining
positions
sets
size
together
representation
agrees
maps
part
onto
note
hence
also
complement
consumes
equal
amounts
p-colors
q-colors
apply
yielding
parts
size
latin
states
clearly
hav
representation
wich
equals
deﬁned
part
assigning
position
colored
state
position
color
state
versie
latin
n-squares
collection
positions
row
column
color
occurring
times
usually
called
k-plex
contrasting
result
exist
latin
n-squares
decomposable
k-plexes
2mk
none
k-plexes
contains
l-plex
see
different
application
lemma
2.3
combine
one
coloring
column
row
parti-
tion
formal
n-square
2.5.
corollary
structure
equi-n-squares
equi-n-square
partitioned
latin
graphs
resp.
v-graphs
although
lemma
2.3
one
avoid
selected
positions
producing
latin
graphs
one
force
two
selected
positions
one
latin
graph
found
example
equi-n-
square
two
positions
different
row
column
color
together
latin
graph
cor
2.5
may
suggest
strengthening
cor
2.4
involving
partition
latin
graphs
shared
two
states
however
two
rows
colored
rwb
rbw
ﬁrst
state
rwr
wbb
second
state
commonly
latin
graph
found
two
rows
already
shows
strengthened
prop
2.4
fails
remaining
row
colored
rwb
states
obtain
two
equi-3-squares
common
partition
latin
graphs
also
tempting
conclude
cor
2.5
structural
result
network
latin
h-graphs
latin
v-graphs
kind
partitioning
underlying
formal
square
graph
meeting
v-graph
one
position
without
latin
condition
one
partition
net-
works
exist
lemma
2.3.
however
start
partition
latin
h-graphs
desired
addi-
tional
v-graphs
must
latin
complete
transversals
modiﬁed
square
obtained
original
one
interpreting
rows
columns
colors
respectively
h-graphs
original
colors
original
rows
relates
brualdi-ryser-stein
conjecture
brualdi
ryser
example
stein
shows
equi-n-square
even
one
latin
rows
need
possess
latin
transversal
size
refer
question
4.7.
next
counting
result
related
subject
section
shufﬂes
considered
type
either
function
graphs
must
type
2.6.
proposition
average
number
shufﬂes
mapping
given
graph
given
array
64872
euler
number
hence
positions
preserving
indexation
satisﬁes
cid:214
average
number
shufﬂes
mapping
given
n-set
onto
given
graph
lies
cid:214
proof
number
shufﬂes
n2n
number
n-arrays
every
shufﬂe
maps
given
function
graph
onto
unique
array
proper
way
hence
required
average
n2n
n2n
cid:215
second
inequality
show
natural
logarithm
equivalently
k=1
note
i=1
cid:215
n2i
ith
term
containing
sum
power
series
satisﬁes
cid:215
n2i
k=1
rightmost
sum
equals
well-known
polynomial
expression
see
zwillinger
chap
use
fact
pi+1
npi
ti+1
npi
n2i+2
cid:215
n2i
therefore
sum
series
t1/
1/n
1/2
last
statement
different
orders
n-set
produce
disjoint
sets
shufﬂes
connecting
given
graph
ordered
set
array
leads
desired
expectation
veriﬁed
increases
monotonically
4/3
64871
000.
hence
upper
bound
cid:214
probably
sharp
moving
set
positions
function
graph
section
consider
strategic
problem
transforming
set
positions
formal
n-square
function
graph
one
shufﬂe
prop
2.6
suggests
problem
may
settled
afﬁrmative
efforts
conﬁrmed
moderate
dimensions
appropriate
combinations
shufﬂe
type
resp.
graph
type
resp.
let
set
positions
formal
n-square
s-row
row
matrix
row
also
use
term
reference
especially
referring
size
s-row
collection
s-rows
denoted
rows
s-free
row
matrix
row
disjoint
row-unique
position
position
whose
matrix
row
satisﬁes
s-rows
size
referred
body
rows
taken
together
involved
positions
constitute
horizontal
body
terminology
adapted
columns
well
use
cols
collection
s-columns
3.1.
optimal
weakly
optimal
sets
set
positions
v-optimal
h-optimal
v-move
h-move
increases
number
s-rows
s-columns
shall
concentrate
v-optimality
results
similar
h-optimality
set
weakly
v-optimal
number
s-rows
raised
rotating
one
column
property
strictly
weaker
optimality
v-opti-
mize
set
size
n/2
body
columns
numbered
say
basically
rotate
body
columns
except
say
zero-th
one
consider
integer
included
rotate
i-th
column
i-th
digit
check
improving
rows
score
column-unique
positions
rotated
afterwards
different
free
rows
optimization
worst
case
complexity
n/2ß
refer
problem
4.7.
formulation
proof
next
proposition
rotation
column
identiﬁed
-move
rotates
number
elements
set
denoted
proposition
3.2.
let
weakly
-optimal
set
positions
formal
n-square
let
column
consider
subset
row-unique
positions
set
posi-
tions
s-free
rows
set
remaining
positions
cid:215
cid:215
cid:215
cid:215
either
inequality
non-negative
difference
sides
equals
sum
taken
rota-
tions
deﬁcits
rows
rows
versie
cid:215
cid:215
proof
ﬁrst
inequality
column
divided
among
note
last
two
sets
involve
exactly
rows
occupied
hence
rotation
rows
hit
exactly
union
two
disjoint
sets
second
independent
reg
ard
copy
row
number
pair
seen
event
caused
rotation
provided
grouping
ents
unique
cause
divides
set
classes
number
events
caused
rotation
identity
produces
ents
rotation
produce
would
raise
number
s-rows
hence
cid:215
cid:215
difference
two
sides
inequality
sum
non-negative
quantities
rows
rows
taken
rotations
ﬁrst
conclusion
follows
second
inequality
follows
ﬁrst
upon
noticing
sum
left-hand
sides
equals
sum
right-hand
sides
corollary
3.3.
let
weakly
v-optimal
set
positions
free
rows
formal
n-square
number
row-unique
positions
s-column
size
satisﬁes
cid:215
least
n/2
rows
proof
part
obvious
prop
3.2
note
part
follows
replacing
denominator
summing
inequality
s-columns
gives
total
number
row-unique
positions
number
rows
satisﬁes
result
follows
part
obviously
best
possible
next
estimate
number
rows
based
different
method
general
matches
real
situation
much
closer
proposition
3.4.
let
set
s-columns
size
sc-
respectively
formal
square
vertical
move
number
-rows
least
outcome
following
recursive
computation
cid:215
ri+1
proof
let
cols
induction
rotations
set
show
ti+1
occupies
least
ri+1
rows
take
identity
assume
rotations
vi-
corresponding
set
occupies
least
rows
mark
exactly
pair
consisting
position
unmarked
row
con-
sidered
event
caused
unique
rotation
mapping
quantity
cid:215
equals
up-rounded
average
number
events
caused
one
rotation
hence
rotation
occupying
least
many
unmarked
rows
note
ri+1
v-move
rotating
maps
set
least
rows
appears
recursive
computation
prop
3.4
sensitive
order
sizes
involved
e.g.
gives
gives
therefore
deﬁne
rows
value
rval
partition
maximal
output
process
taken
permutations
3.5.
algorithm
minrows
want
determine
lower
bound
number
rows
applying
v-optimal
n-sets
method
much
faster
computing
minimum
rval
among
partitions
giv
n/2ø
lower
bound
cor
3.3
consider
partitions
following
assumption
consists
column
sizes
v-optimal
n-set
exactly
rows
requires
columns
s-column
holds
row-unique
position
cor
3.3
partition
maximum
sat-
isﬁes
putting
aside
one
maximal
part
left
least
/mø
parts
parts
algorithm
skips
partitions
support
predicted
minimum
row-
unique
points
cor
3.3
assumed
number
occupied
rows
prop
3.4
surviving
critical
partition
indicates
potentially
sharp
lower
bound
returned
unsuccessful
round
incremented
next
round
results
displayed
table
improvement
start
value
n/2ø
n/2ø
repeat
r-1
maximum
column
size
n-m
/mø
r-m
columns
partition
n-m
parts
size
plus
part
row-unique
points
r-m
start
next
partition
rval
start
next
partition
else
return
r+1
ending
minrows
algorithm
minrows
start
start
table
lower
bound
number
rows
v-optimal
n-set
useful
variant
algorithm
starts
end
value
returns
critical
partitions
testing
purposes.3
output
guided
computer-generated
optimal
n-sets
exactly
rows
refer
question
4.7
note
however
rows
value
partition
always
_______________
variant
minrows
algorithm
written
well-readable
mathematica
code
given
appendix
versie
accurate
e.g.
multiset
notation
ﬁve
six
ﬁnd
rval
prop
3.14
implies
16-sets
column
partition
type
optimize
rows
3.6.
worked
example
sharpness
hav
according
variant
minrows
algorithm
critical
partition
consider
v-optimal
20-set
fourteen
rows
column
partition
critical
type
cor
3.3
s-column
ﬁve
points
must
least
two
row-unique
points
hence
body
rows
body
positions
two
s-columns
share
s-row
otherwise
could
regard
single
column
size
rval
prop
3.4
would
contradict
optimal
assume
exactly
six
body
rows
hence
exactly
eight
row-unique
positions
gives
total
body
exactly
twelve
positions
every
two
s-columns
involve
common
body
row
isotopism
one
way
achieve
shown
diagram
fig
critical
case
dimension
inequality
cid:215
cid:215
prop
3.2
becomes
equality
hence
cited
proposition
every
rotation
s-column
results
another
v-optimal
conﬁguration
lemma
3.8
leftmost
s-column
ﬁve
members
rotated
avoid
three
given
rows
say
ones
numbered
diagram
neither
raises
lowers
number
s-rows
resulting
conﬁguration
optimal
ﬁnd
second
left
s-column
contains
three
row-unique
positions
whereas
cor
3.3
s-columns
must
least
two
hence
obtain
optimal
conﬁguration
less
six
body
rows
consider
two
realizations
diagram
formal
20-square
equivalent
differ
permuting
order
columns
location
zero-th
row
1012
non-equivalent
realizations
know
whether
v-optimal
previous
argument
shows
estimate
sharp
iff
optimal
20-set
fourteen
rows
column
partition
ﬁve
body
rows
minor
narrowing
problem
3.7.
spaghetti
effect
next
step
achieving
key
result
shufﬂes
deals
follow-
ing
problem
given
n-set
formal
n-square
enough
s-rows
rows
rotated
apart
ﬁnd
h-move
rows
correspond
disjoint
subsets
speculating
crumbling
spaghetti
effect
vertically
stretched
n-set
small
hor-
izontal
sections
hence
crumble
completely
suitable
pressure
h-move
need
preparatory
results
useful
answer
lemma
3.8.
let
subsets
cardinality
resp.
let
rotated
apart
i.e.
cid:215
proof
pair
considered
event
caused
unique
rotation
moving
note
identity
causes
precizely
ents
hence
cid:215
ents
caused
non-identity
rotations
one
causes
ent
hence
maps
outside
next
consider
situations
two
sets
rotated
apart
lemma
3.9.
let
integer
let
subsets
cid:215
follow-
ing
assertions
equivalent
rotated
apart
share
positive
internal
induced
distance
subsets
regular
n-gon
rotated
apart
exists
unique
pair
mod
proof
equivalence
refer
event/cause
terminology
proof
lemma
3.8
ents
causes
ent
caused
exactly
one
rotation
hence
rotation
causes
several
events
iff
rotation
causes
none
ﬁrst
statement
equivalent
negation
whereas
second
equivalent
negation
equivalence
follows
previous
equivalence
fact
mirror
sets
isometric
assume
let
therefore
bijective
rev
erse
arguing
yields
opposite
implication
mod
hence
transformation
yields
mod
onto
let
e2p
i/n
ﬁrst
primitive
n-th
root
unity
integer
gives
roots
represents
regular
n-gon
subset
complex
unit
circle
polyno-
mial
representation
nonempty
set
integer
polynomial
giv
integer
said
d-balanced
provided
set
regular
m-gon
reg-
ular
subpolygon
divides
coset
subgroup
m-multiples
n-th
cyclotomic
polynomial
fraleigh
464-470
minimal
polynomial
rationals
fact
particular
irreducible
roots
primitive
n-th
roots
unity
product
dividing
equals
degree
euler
totient
zwillinger
§2.3.8
list
30.
packages
like
maple
mathematica
built-in
command
producing
cyclotomic
polynomials
proposition
3.10.
throughout
integer
subsets
let
prime
1-balanced
regular
p-gon
within
let
rotated
apart
least
one
d-balanced
let
cid:215
prime
rotated
apart
one
regular
subpolygon
whereas
complete
transversal
cosets
partition
includes
case
regular
subpolygons
let
rotated
apart
prime
dividing
one
p2-balanced
particular
three
sets
size
two
rotated
apart
proof
may
assume
set
positioned
largest
gap
suc-
cessive
points
occurring
step
reaching
average
gap
successive
vertices
along
circle
exactly
degree
minimal
polyno-
mial
divides
polynomials
monic
degree
versie
must
degree
hence
regular
polygon
fact
conclusion
also
follows
formula
6-set
1-balanced
36-gon
use
c36
c18
x12
note
statement
extend
case
two
different
prime
factors
e.g.
proof
statement
lemma
3.9
expressed
polynomial
congruence
relation
cid:215
mod
hence
rational
polynomial
cid:215
cid:215
rearranged
cid:215
cid:215
cid:215
announced
root
rightmost
factor
hence
least
one
must
d-balanced
proof
part
applied
yields
d-balanced
respectively
primitive
n-th
q-th
p-th
root
unity
cyclotomic
polynomials
divides
may
assume
divides
suppose
also
divides
say
cid:215
cid:215
monic
primi-
tive
classical
gauss
lemma
fraleigh
lemma
45.25
yields
must
integer
coefﬁ-
cients
evaluating
cid:215
get
taking
product
integer
must
give
contradiction
hence
must
divide
divide
divided
product
takes
contradicts
divided
value
cid:215
arguing
latter
degree
cid:215
arguing
part
may
assume
degree
hence
must
equal
cid:215
represents
subgroup
regular
p-subpolygon
lemma
3.9
must
complete
transversal
coset
collection
fact
transversal
meet
rotation
coset
note
general
situation
may
complicated
instance
sets
share
distance
hence
rotated
apart
36-gon
neither
regular
subpolygon
proof
happens
prime
1-balanced
regular
gons
hence
rotated
apart
general
situation
consider
arbitrary
prime
dividing
assume
sets
p2-balanced
primitive
p2-th
root
unity
divided
reasoning
obtain
equation
right
hand
side
product
divided
multiple
roots
hence
factor
square
one
factor
divided
however
whereas
since
positive
coefﬁcients
least
two
terms
gives
contradiction
given
three
sets
size
two
rotated
apart
take
prime
dividing
ﬁnd
exactly
one
say
p2-balanced
considering
ﬁnd
must
p2-balanced
pair
contradicts
ﬁrst
part
prop
3.10
needed
near
end
section
one
step
dev
eloping
conditions
rotating
multiple
sets
apart
next
proof
need
elementary
fact
cid:215
cid:215
lemma
3.11.
let
integer
let
subset
points
let
sb-
case
assume
equal
21.
i=1
exist
rotations
rb-
proof
ﬁrst
consider
case
using
quoted
elementary
fact
ﬁnd
cid:215
s2/4
may
assume
sets
points
common
hence
cid:215
whence
lemma
3.8
sets
rotated
apart
proceed
induction
let
assume
lemma
valid
sets
consider
conditions
lemma
sets
let
minimum
sizes
whence
elementary
fact
assumption
sets
yield
cid:215
cid:215
cid:215
lemma
uses
additional
assumption
lemma
3.8
two
subsets
size
rotated
apart
cid:215
cid:215
ﬁnd
cid:215
cid:215
cid:215
cid:215
alternative
assumption
21.
hav
hence
equal
cid:215
cid:215
cid:215
s2ø
second
strict
inequality
seen
valid
22.4
hence
either
alter-
native
condition
available
sets
sb-
case
hav
avail-
able
complete
requirements
lemma
sets
application
induction
hypothesis
yields
sets
rotated
apart
resulting
union
size
set
rotated
apart
earlier
argument
practical
terms
following
main
result
corollary
3.12.
let
n-set
formal
n-square
body
rows
free
rows
assume
either
body
rows
equal
size
equals
total
body
size
proof
s-row
mark
leftmost
position
total
number
s-rows
precizely
unmarked
positions
must
located
body
rows
hence
total
number
positions
body
rows
order
genuine
body
rows
necessary
well-chosen
h-move
rotates
row-isolated
points
different
free
columns
assume
condition
lemma
3.11
h-move
body
rows
apart
remaining
s-rows
consist
row-unique
positions
rotated
different
free
columns
h-moved
h-graph
_______________
inequality
ﬁrst
fails
least
127
3/16
262
126
127
128.
expect
counterexample
four
sets
sizes
three
sets
size
rotated
apart
refer
comments
preceding
problem
versie
b\f
101
111
122
133
108
118
129
100
109
118
101
109
102
table
least
matrix
size
rotate
body
rows
apart
given
free
rows
3.13.
spaghetti
boundary
let
denote
strict
upper
integer
approximation
left
side
table
displays
values
21.
also
shows
restriction
cor
3.12
always
satisﬁed
dimensions
80.
consider
generic
set
positions
formal
n-square
rows
body
rows
free
rows
table
look
values
regardless
sets
s-rows
h-moved
h-graph
given
largest
least
ﬁnd
upper
bound
number
rows
possible
failure
crum-
bling
spaghetti
effect
least
upper
bound
called
spaghetti
boundary
taken
thus
table
yields
simple
method
estimate
spaghetti
boundaries
80.
resulting
estimates
marked
star
table
down-corrected
one
unit
occurs
multiple
ﬁrst
-column
inequality
fails
fails
n/4
prop
3.14
covers
situation
shows
body
rows
rotated
apart
estimated
spaghetti
boundary
also
decreased
one
due
complex
reasons
explained
later
refer
question
4.7
10*
13*
16*
19*
23-1
27-1
32-1
38-1
starred
values
decreased
one
table
minimal
number
rows
optimal
sets
spaghetti
boundary
3.14.
proposition
given
subsets
size
rotated
apart
regular
gon
proof
assume
sets
size
rotated
apart
lemma
3.11
sets
among
rotated
apart
set
size
let
diameter
remaining
2-set
would
occur
distance
could
add
corresponding
2-set
last
rotated
2-set
hence
counter-clock
wise
rotation
rd0
maps
isometrically
onto
particu-
lar
distance
occur
rd0
maps
isometrically
onto
deduce
given
2-sets
must
distinct
diameters
may
assume
n/2
n/4
set
partitioned
rotated
original
2-sets
pick
one
part
diam-
eter
assume
deﬁniteness
exist
positions
rd0
particular
replacing
obtain
set
like
set
result
rotating
given
2-sets
except
one
diameter
hence
comple-
ment
maps
isometrically
onto
rd0
comparing
previously
obtained
isomorphism
see
rd0
maps
set
onto
maps
set
onto
however
nowhere
identical
n/2
swap
indices
n/4
refer
question
4.7
additional
information
rotating
2-sets
apart
comparing
bounds
table
shows
displayed
dimensions
case
rows
v-optimal
n-set
rotated
apart
corrections
based
prop
3.14
assumed
uncertain
dimensions
35.
combining
information
func-
tion
table
critical
column
partitions
provided
minrows
algorithm
able
settle
cases
target
statement
formal
n-square
rows
v-opti-
mal
set
positions
formal
n-square
rotated
apart
case
27.
spaghetti-
minrows
boundaries
agree
free
rows
according
minrows
critical
column
partition
v-optimal
27-set
leads
least
row
unique
points
cor
3.3
hence
body
size
15.
according
table
number
body
rows
anything
regard
maximal
body
size
conclude
body
concentrated
three
columns
body
row
size
description
possible
body
row
partitions
given
multiset
notation
earlier
body
row
partitions
partitions
body
row
inv
olves
three
columns
rotating
ﬁrst
three
3-sets
apart
keeping
ﬁrst
one
ﬁxed
obtain
9-point
set
matching
fourth
set
three
positions
lemma
3.8
shows
fourth
set
also
rotated
apart
remaining
partition
sb-
sizes
arranged
decreasing
order
rotated
apart
using
j=0
cid:215
lemma
3.8
inductively
case
30.
critical
v-optimal
set
rows
among
body
rows
minrows
throws
one
critical
column
partition
causing
least
row-iso-
lated
points
prop
3.3
hence
body
rows
body
positions
impossible
since
body
row
points
number
versie
columns
conclude
partitions
evaluation
body
row
partitions
prepared
small
table
listing
body
row
partitions
value
partitions
marked
satisfy
inductive
inequalities
two
neg
ative
cases
require
information
partition
easiest
given
number
columns
two
body
rows
respective
size
share
least
two
columns
rotate
three
sets
sizes
apart
regu-
lar
30-gon
let
resulting
10-point
set
remaining
3-set
rotated
share
two
col-
umns
4-point
subset
application
lemma
3.8
yields
result
triple-4
partition
note
two
body
rows
size
must
share
columns
rotat-
ing
two
rows
apart
8-set
ﬁnd
two
distinct
rotations
third
set
causing
least
three
events
rotating
point
third
set
-column
see
remaining
rotations
together
cause
remaining
events
cid:215
least
one
rotations
causes
event
case
31.
critical
case
critical
column
partition
v-optimal
n-set
gives
least
row-unique
positions
cor
3.3
therefore
body
size
16.
table
shows
exclude
would
give
body
size
17.
addition
body
row
liv
ﬁve
columns
hence
size
possi-
ble
body
row
partitions
partitions
33,23
body
row
partitions
case
inductive
application
lemma
3.8
shows
body
rows
rotated
apart
except
perhaps
partition
particular
case
every
two
body
rows
must
share
least
three
columns
rotating
two
4-sets
apart
lemma
3.8
applies
since
cid:215
next
two
cases
show
estimated
spaghetti
boundary
down-corrected
one
unit
cases
original
target
statement
achieved
case
32.
-table
indicates
critical
case
two
critical
subcases
body
positions
body
row
partition
prop
3.14
rotate
body
rows
apart
body
positions
possible
body
row
partitions
last
one
solved
inductive
application
lemma
3.8.
remaining
triple-4
parti-
tion
taken
care
thm
3.15
conclude
spaghetti
boundary
rather
case
37.
table
points
one
critical
case
gives
body
size
positions
assume
three
body
rows
sizes
cid:215
30.
cid:215
cid:215
30.
partition
cid:215
36.
allows
apply
lemma
3.8
inductively
follows
spaghetti
boundary
must
estimated
rather
27.
dimensions
peculiar
table
small
peak
-values
columns
12.
argument
imitated
show
spaghetti
boundary
rather
critical
case
critical
case
another
similar
argument
shows
decrement
estimated
spaghetti
boundary
depends
entirely
whether
three
5-sets
rotated
apart
50-gon
answer
afﬁrmative
theorem
3.15
undecided
cases
39.
minrows
produces
signiﬁcant
amounts
crit-
ical
column
partitions
part
could
handle
dimension
ﬁrst
esti-
mated
spaghetti
boundary
exceeding
minrows
boundary
requiring
new
approach
situation
becomes
permanent
40.
questions
remain
three
4-sets
case
three
5-sets
case
rotated
apart
regular
n-gon
next
result
provides
general
afﬁrmative
answer
theorem
3.15.
cid:215
sets
size
rotated
apart
regular
gon
proof
let
m-sets
rotated
apart
inductive
application
lemma
3.8
allows
assume
mutually
disjoint
lemma
3.9
parts
ﬁnd
i=1
differences
taken
modulo
hence
ele-
ments
see
particular
meets
one
say
mutually
disjoint
note
hav
exchangeable
roles
whence
sets
partition
sets
size
whereas
sets
sets
partition
set
partition
hence
meets
ﬁnd
claim
stable
addition
modulo
end
let
associativ-
ity
whence
sets
set
partition
hence
meets
ﬁnd
suppose
ﬁnd
sets
mutually
disjoint
contradicts
initial
assumption
proves
claim
ﬁnite
contains
subgroup
index
necessarily
consists
t-multiples
among
fraleigh
follows
particular
internal
distances
t-folds
whence
sets
entire
proof
far
redone
role
hence
m-sets
exclusively
internal
distances
t-folds
may
therefore
assume
original
sets
located
inside
subset
vertices
numbered
let
coset
think
copies
r¢i
inside
regular
n/t-gon
obtained
omitting
versie
vertices
n-gon
t-fold
say
r¢0
r¢1
rotation
n/t-gon
cid:215
n-gon
sets
remaining
within
set
rotated
anywhere
coset
vi-
would
effectively
rotated
given
sets
apart
conclude
two
m-sets
r¢i
rotated
apart
n/t
contradicts
prop
3.10
previous
theorem
seen
extend
prop
3.14
case
also
handles
equality
condition
cor
3.12
case
cid:215
equal-sized
body
rows
taking
128
see
every
three
sets
size
rotated
apart
128-gon
footnote
proof
lemma
3.11
asked
example
three
8-sets
rotated
apart
127-gon
main
results
previous
section
investigated
two
bounds
number
rows
n-sets
formal
square
minimal
number
rows
v-optimized
set
maximal
number
rows
set
failing
body
rows
rotated
apart
ﬁrst
exceeds
second
dimensions
40.
dimensions
v-optimisation
n-set
h-optimised
h-graph
cases
estimated
boundaries
equal
problem
solved
afﬁrmatively
using
spe-
ciﬁc
information
following
key
result
summarizes
achievements
far
4.1.
theorem
given
set
positions
formal
n-square
mapped
onto
h-graph
v-graph
one
vh-shufﬂe
hv-shufﬂe
formal
n-square
expected
number
rows
n-set
table
rather
close
sometimes
even
larger
estimated
spaghetti
bound
moderate
table
suggests
dimensions
near
majority
n-sets
h-moved
h-graph
without
pre-
liminary
v-move
random
samples
dimensions
revealed
excessively
large
majority
n-sets
h-moved
h-graph
fact
105
random
sets
number
counterex-
amples
decreased
270
merely
20.
currently
explanation
small
prop
4.2
provides
information
4.2.
proposition
n-set
formal
n-square
h-moved
onto
h-graph
v-moved
onto
v-graph
n-set
satisﬁes
least
one
alternative
alternatives
may
fail
6-set
formal
6-square
proof
already
appears
minrows
boundary
general
n-set
one
body
row
column
h-moved
v-moved
apart
hence
least
one
alternatives
holds
case
4-set
rows
columns
4-set
two
rows
two
columns
rows
partition
parts
share
distance
goes
columns
partition
hence
lemma
3.8
yields
alternatives
consider
5-set
rows
hav
one
body
row
suppose
two
body
rows
row
partition
two
pairs
rotated
apart
lemma
3.8.
occupy
least
three
columns
case
solved
mutatis
mutandis
three
rows
set
moved
graph
required
4.3.
corollary
let
array
positions
formal
n-square
mapped
onto
h-graph
hvh-move
preserving
order
also
holds
v-graph
vhv-move
given
n-array
h-graph
v-graph
hvhv
vhvh
move
mapping
array
onto
graph
preserving
order
proof
theorem
4.1
map
set
positions
array
onto
v-graph
hv-
move
map
onto
h-graph
h-move
deﬁned
follows
rotate
row
position
moves
j-th
column
element
mapped
member
ends
different
column
whence
obtain
h-graph
correct
ordering
part
h-graph
mapped
orderly
h-graph
v-move
prop
2.6
provides
rough
statistic
variant
cor
4.3
needs
average
one
shufﬂe
valid
dimensions
n-array
columns
allowing
shufﬂe
allow
least
nn-
hence
expectation
intrinsic
bias
table
suggests
shufﬂes
exist
every
n-array
simplest
possible
example
inv
olves
array
regardless
positions
shufﬂe
either
mapping
orderly
onto
bottom
row
two
shufﬂes
required
4.3
well-spent
ﬁrst
optimizing
second
takes
care
precision
statement
reformulated
like
1-1
function
n-set
onto
h-graph
extends
composition
two
hv-shufﬂes
combining
thm
4.1
cor
4.3
get
simple
proof
usual
restriction
1-1
function
two
sets
formal
n-square
extends
composition
three
shufﬂes
two
versions
derive
two
major
theorems
announced
section
recall
standard
mode
operation
equi-n-square
perform
two
hv-shufﬂes
h-indirection
4.4.
theorem
theorem
let
let
given
equi-n-square
together
two
sequences
consisting
non-negative
numbers
size
sequence
cid:215
shufﬂes
standard
mode
operation
equi-n-square
turns
ﬁrst
input
sequence
second
output
sequence
proof
output
number
seen
array
digits
ﬁnd
array
matrix
suitable
sequence
positions
corollary
4.3
two
successive
shufﬂes
map
sequence
orderly
onto
target
graph
described
input
number
output
indirection
desired
earlier
described
result
theoretical
unpredictability
output
literature
provides
combinatorial
methods
aiming
goal
knuth
algorithm
p.33
uses
index-to-value
process
standard
arrays
hide
inevitable
output
patterns
pseudo-random
number
generators
lidl
niederreiter
produce
multiplexed
sequences
using
one
sequence
step
another
one
koscielny
uses
one-cell
indirection
latin
square
modulate
linear
m-sequence
shifted
copy
one
might
consider
general
type
indirection
reading
arbitrary
n-arrays
equi-n-
square
according
remark
following
cor
4.3
two
n-arrays
equi-n-square
linked
sequence
three
shufﬂes
usual
hence
adapting
previous
argument
method
produce
sequence
numbers
three
shufﬂes
indirection
method
also
needs
doubled
input
determine
array
read
hence
may
qualiﬁed
rather
wasteful
however
type
indirection
explicitly
allowing
repeating
cells
intrinsic
square
bias
numbers
becomes
natural
bias
see
need
shufﬂing
decreases
versie
4.5.
theorem
theorem
part
given
every
two
equi-n-squares
shufﬂes
away
proof
let
equi-n-squares
lemma
2.5
latin
v-graph
latin
graph
1-1
function
connecting
p-colored
position
position
color
may
assume
transition
extending
1-1
function
proof
cor
4.3
inverse
function
agrees
vh-shufﬂe
hence
fol-
lowed
keeps
every
position
ﬁxed
shows
transition
preserving
coloring
implemented
even
hv-shufﬂes
integer
transition
implemented
hv-shufﬂes
collapsing
two
successive
h-moves
needed
letting
shufﬂe
sequence
followed
hv-shufﬂe
henceforth
concentrate
tran-
sitions
leaving
positions
latin
v-graph
invariant
prop
2.4
may
assume
partition
complement
sets
size
mapping
part
onto
part
decompose
permutation
disjoint
cycles
length
note
n/2
carrier
ordered
using
list
cycles
choice
last
point
given
permutation
equals
inverse
cycle
followed
cycle
provided
ordered
carrier
parts
taken
pairs
single
part
remaining
even
assume
even
odd
present
necessary
adaptations
afterwards
selected
pair
parts
transi-
tion
processed
sequence
hv-shufﬂes
follows
step
extend
-cycle
last
points
equivalent
cycle
length
n/2
e.g.
repeating
one
colors
form
n-sequence
two
resulting
sequences
mixed
alternatingly
hvhv-move
maps
sequence
say
bottom
row
matrix
cor
4.3
row
rotated
two
positions
right
moved
back
array
reverse
initial
move
makes
reverse
product
equivalent
hv-shufﬂes
step
applies
sets
separately
ordered
carrier
made
array
repeating
color
takes
two
hv-shufﬂes
map
array
onto
bottom
row
cor
4.3
rotated
one
position
left
mapped
back
reversing
initial
shufﬂes
makes
carrier
cycle
equivalent
hv-shufﬂes
resulting
sequence
shufﬂes
resulting
steps
reduces
12½
hv-shufﬂes
collapsing
successive
h-moves
set
pair
treated
following
modiﬁcations
step
extend
cycle
n-cycle
repeating
last
color
perform
directly
shufﬂes
method
step
step
remains
accounts
total
hv-shufﬂes
compiling
results
contract
last
h-move
one
shufﬂe
sequence
ﬁrst
move
next
shufﬂe
sequence
amounts
one
sequence
hv-shufﬂes
sequences
hv-shufﬂes
leftover
h-move
ﬁnish
latter
absorbed
ﬁnal
hv-shufﬂe
described
beginning
proof
accounting
shufﬂes
odd
set
taken
single
need
preliminary
step
involving
selected
pairs
s2i-
s2i
step
let
pair
consisting
last
point
representations
s2i-
resp.
s2i
observed
earlier
product
transpositions
obtained
ﬁrst
applying
cycle
rev
erse
applying
cycle
cycles
performed
equivalently
hv-cycles
hence
product
pairs
required
step
achieved
hv-shufﬂes
step
mix
two
giv
cycles
even
case
perform
resulting
cycle
shufﬂes
step
entire
state
transformation
equivalent
result
step
followed
results
step
followed
results
step
ended
obligatory
hv-shufﬂe
contracting
successive
h-moves
accounts
hv-shufﬂes
previous
result
derived
originally
get
idea
many
shufﬂes
needed
obtain
generic
state
formal
square
e.g.
serve
initial
state
instance
shufﬂes
16.
estimates
thm
4.5
high
small
e.g.
seen
two
states
connected
one
hv-
vh-shufﬂe
connected
shufﬂe
either
type
economizing
possible
aid
prop
4.2
resulting
estimate
minor
inaccuracy
may
occur
due
repeated
dilemma
hvh
vhv
shufﬂe
4.6.
physical
equi-n-square
physical
object
implementing
equi-n-square
shufﬂing
torus
two
orthogonal
layers
rings
rotated
integer
multiple
radians
combination
two
layers
divide
torus
surface
rectangular
faces
performing
shufﬂe
amounts
rotating
rings
one
type
rotating
type
faces
enly
painted
colors
object
becomes
variant
rubik
cube
see
e.g
joyner
theorem
4.5
contributes
problem
restoring
physical
state
torus
state
estimates
method
equi-octal-square
faces
close
size
stan-
dard
rubik
cube
indicate
may
take
shufﬂes
shufﬂe
requiring
rings
turn
contrast
cube
never
needs
elementary
moves
one
explanation
might
implicit
restrictions
moving
cells
cube
contrasting
shuffﬂe
theorem
2.1.
unsharpness
estimates
probable
explanation
refer
4.7.
conclusion
open
problems
achieved
two
distinct
goals
combinatorial
study
equi-n-squares
underlying
formal
squares
one
principle
produce
unpre-
dictable
sequences
non-negative
integers
upper
bound
shufﬂe
distance
two
equi-n-squares
results
valid
common
restriction
proofs
borrow
largely
intermediate
results
main
results
well
intermediate
results
raised
various
questions
wish
discuss
somewhat
irregular
restriction
derives
interaction
several
combinatorial
meth-
ods
described
probably
sharp
beyond
restriction
however
little
infor-
mation
available
elaboration
methods
shows
n-sets
formal
n-square
mapped
vhv-move
onto
v-graph
possible
exception
usually
many
arrays
equi-n-square
representing
given
n-digit
number
offering
increased
opportunities
shufﬂe
one
arrays
onto
graph
suggests
thm
4.4
may
hold
well
beyond
cur-
rent
limitations
note
remarks
following
thm
4.1
indicate
performing
purpose
shufﬂes
indirection
reproduce
output
sequence
obtained
standard
operation
mode
given
input
sequence
low
ratio
errors
suggests
practically
speaking
method
work
even
shufﬂes
alternating
v-indirection
determine
thm
4.4
holds
formulated
many
shufﬂes
needed
ﬁnite
asympotic
value
upper
bound
number
shufﬂes
implementing
generic
transition
seems
high
hard
evidence
provided
proof
strategy
thm
4.5
realizing
transi-
tion
stepwise
successive
parts
necessarily
includes
cleaning
undesired
changes
step
may
suggest
economizing
given
considerable
gap
lower
bound
thm
2.2
following
challenging
question
true
lower
bound
required
number
shufﬂes
implementing
generic
transi-
tion
closest
reality
words
small
world
phenomenon
following
open
problems
relate
combinatorial
tools
first
regard
comments
fol-
lowing
cor
2.5
deﬁne
wavy-latin
n-square
equi-n-square
allowing
partition
latin
versie
h-graphs
one
latin
v-graphs
h-graph
meeting
v-graph
one
position
wavy-latin
network
follows
cor
2.5
equi-n-square
latin
rows
latin
col-
umns
wavy-latin
observed
lack
latin
n-size
transversals
seems
major
obstacle
equi-n-square
wavy-latin
deﬁned
property
invariant
color
renaming
permuting
order
rows
col-
umns
isotopism
transposition
leads
small
collection
types
types
one
wavy-latin
counted
160
types
exactly
wavy-latin
non-wavy-latin
n-squares
random
sample
000
equi-5-squares5
revealed
counterexample
addition
equi-5-squares
color
horizontal
vertical
alignment
least
four
cells
wavy-
latin
reduced
164
cases
mostly
veriﬁed
computer
assistence
ratio
wavy-latin
n-squares
equi-n-squares
tend
increasing
size
equi-n-squares
wavy-latin
general
formal
n-squares
given
n-set
positions
result
counting
row-unique
posi-
tions
s-column
counting
s-rows
may
provide
sufﬁcient
reason
v-optimal
props
3.3
3.4
otherwise
rely
algorithm
complexity
nn/2
compute
v-optimal
conﬁguration
given
n-set
one
could
follow
computation
rows
value
column
partition
n/2ß
worst
know
best
order
rotate
individual
body
columns
apropriate
amount
rotations
however
example
rows
value
optimal
value
see
3.5.
fast
method
optimize
generic
set
positions
decide
generic
n-set
optimal
speciﬁcally
problem
complete
minrows
lower
bound
number
rows
v-optimal
n-set
equi-n-square
proven
sharp
computer-supplied
examples
sharpness
found
minor
reduction
problem
3.6
find
sharp
lower
bounds
18.
replacing
v-optimal
weakly
v-optimal
gives
smaller
boundary
key
major
results
paper
thm
4.1
mapping
n-set
onto
function
graph
one
shufﬂe
derived
1-1
function
n-set
onto
graph
extends
composition
two
shufﬂes
1-1
function
two
n-sets
extends
composition
three
shufﬂes
n-set
formal
n-square
mapped
onto
v-graph
one
shuf-
many
shufﬂes
needed
ﬁnite
asymptotic
value
1-1
maps
generic
n-sets
extended
composition
less
shufﬂes
table
provides
rough-and-ready
method
estimate
spaghetti
boundary
dimensions
80.
method
rests
upon
cor
3.12
valid
restriction
number
free
rows
21.
close
inspection
preceding
lemma
3.11
shows
restriction
kind
_______________
considering
exception
rates
sample
000
equi-5-squares
probably
small
make
solid
prognosis
unfortunately
takes
minutes
average
explore
one
5-square
common
denominator
variety
situations
fact
turns
limit
increases
number
body
rows
described
table
computed
maple
enlarges
range
applicability
method
n.b
computed
limit
contribute
lemma
3.11.
table
speciﬁed
limits
various
estimated
spaghetti
boundary
sharp
sizes
boundary
parentheses
boundary
sharp
one
unit
involves
computer-provided
facts
related
question
note
improving
spaghetti
boundary
may
yield
additional
support
earlier
observation
thm
4.1
sets
formal
n-square
transformed
h-graph
h-move
find
sharp
spaghetti
boundaries
sizes
problem
rotating
collection
2-sets
apart
regular
n-gon
shows
attempts
improve
spaghetti
boundary
formal
n-squares
see
prop
3.14
shown
regular
n-gon
admits
partition
vertices
2-sets
assuming
every
possible
diameter
value
type
integer
allowing
pairs
diame-
ter
complicates
things
regular
n-gon
odd
pairs
diameter
grouped
cycles
length
whence
k/2ß
cid:215
pairs
disjoint
given
deﬁne
n/3
divisible
otherwise
use
lower
rather
upper
integer
approximation
veriﬁed
computer
assistance
set
pairs
rotated
apart
one
easily
veriﬁes
provides
sharp
bound
well
divisible
cases
exhaustive
computer
search
revealed
sharp
cases
hence
largest
number
pairs
regular
n-gon
rotated
apart
following
observation
latin
squares
dénes
end
keedwell
467
painful
truth
extending
equi-n-squares
perhaps
problems
raised
...
computa-
tional
problems
values
greater
unmanageable
exact
boundary
may
vary
problem
hand
results
mixture
reasoning
computing
get
around
obstacle
requires
increasing
share
reasoning
possible
references
r.a.
brualdi
h.j
ryser
combinatorial
matrix
theory
cambridge
university
press
cam-
bridge
1991
bryant
egan
maenhaut
i.m
wanless
indivisible
plexes
latin
squares
des
codes
cryptogr
2009
doi
10.1007/s10623-009-9269-z
j.h
dénes
a.d.
keedwell
latin
squares
applications
academic
press
new
york
1974
j.h
dénes
a.d.
keedwell
eds
latin
squares
new
developments
theory
appli-
cations
annals
discrete
mathematics
1991
amsterdam
academic
press
xiv+454
j.h
dénes
a.d.
keedwell
applications
non-associative
algebraic
systems
versie
cryptology
p.u.m.a.
pure
math
appl
2001
147-195
ecuyer
simard
testu01
software
library
ansi
empirical
testing
ran-
dom
number
generators
acm
trans
math
software
art
2007
j.b.
fraleigh
first
course
abstract
algebra
pearson
education
addison
wesley
har-
low
2003
xii+520pp
grosek
sys
isotopy
latin
squares
cryptography
tatra
math
publ.
2010
27-36
m.t
jacobson
matthews
generating
uniformly
distributed
random
latin
squares
combinatorial
design
1996
405-437
david
joyner
adventures
group
theory
rubik
cube
merlin
machine
mathe-
matical
toys
johns
hopkins
university
press
2002.
xviii
262
d.e
knuth
art
computer
programming
volume
seminumerical
algorithms
addi-
son-wesley
reading
mass.
3rd
edition
1998
762
koscielny
nlpn
sequences
quasigroups
related
systems
vol
1997
89-102
lidl
niederreiter
introduction
finite
fields
applications
cambridge
univer-
sity
press
1994
416pp
j.h
van
lint
r.m
wilson
course
combinatorics
cambridge
university
press
2001
2nd
edition
620pp
c.l
liu
topics
combinatorial
mathematics
mathematical
association
america
buffalo
n.y
1972
265pp
b.d
mckay
rogoyski
latin
squares
order
ten
electron
combin.
1995
b.d
mckay
i.a
wanless
number
latin
squares
annals
combinatorics
vol
2005
335-344
a.j
menezes
p.c
van
oorschot
s.a.
vanstone
handbook
applied
cryptography
crc
press
fifth
printing
2001
update
2010
k.a
meyer
new
message
authentication
code
based
non-associativity
quasi-
groups
dissertation
iowa
state
university
ames
iowa
2006
v.a
shcherbacov
quasigroups
cryptology
computer
science
journal
moldova
2010
194-217
s.k
stein
ansversals
latin
squares
generalizations
pac
math
1975
567-575
van
vel
cryptologic
features
shufﬂed
equi-n-squares
2015
preprint
zwillinger
standard
mathematical
tables
formulae
32nd
edition
crc
press
boca
raton
florida
2011
833pp
appendix
algorithm
minrows
reader
mathematica
hand
may
check
computational
results
section
entering
following
code
mathematica
notebook6
.nb
ﬁle
minrows
algorithm
vari-
ant
one
see
3.5
returning
list
critical
column
partitions
number
rows
critical
returns
empty
list
excessive
list
otherwise
note
special
treatment
singletons
par-
tition
easily
seen
affect
result
without
mathematica
gets
problems
dimension
approaching
postponed
rowunique
n_integer
s_integer
f_integer
max
ceiling
minrows
n_integer
r_integer
module
crit
plen
klen
rval
ceiling
c++
select
integerpartitions
max
klen
length
klen
k++
total
map
rowunique
continue
select
join
drop
singletons
length
number
singletons
permutations
plen
length
plen
p++
rval
check
rows
value
j++
rval
ceiling
rval
rval
break
...
rval
appendto
crit
join
table
...
...
...
crit
end
module
_______________
used
code
mathematica
versions
versie
