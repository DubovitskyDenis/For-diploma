confluence
laws
hopf-borel
type
theorem
operads
burgunder
delcroix-oger
abstract
2008
loday
shed
light
existence
hopf-borel
theorems
operads
using
vocabulary
category
theory
livernet
mesablishvili
wisbauer
extended
theorems
monads
cases
reasoning
start
mixed
distributive
law
prove
induces
isomorphism
s-modules
ﬁnally
get
rigidity
theorem
reasoning
goes
backward
prove
isomorphism
ofs-modules
one
get
called
conﬂuence
law
generalises
mixed
distributive
laws
enough
obtain
rigidity
theorem
enables
show
operads
underlying
s-module
exists
conﬂuence
law
conilpotent
coq-bialgebra
satisfying
free
cofree
primitive
elements
reasoning
permits
generate
many
new
examples
introduction
distributive
laws
ﬁrst
appeared
1969
beck
article
bec69
takes
name
distributivity
addition
multiplication
studied
primary
school
distributive
laws
give
conﬂuent
way
rewrite
expressions
mixing
diﬀerent
products
example
distributive
laws
one
mixing
commutative
product
lie
bracket
poisson
algebra
notion
distributive
laws
initially
studied
burroni
bur73
algebras
markl
mar96
generalising
deﬁnition
operads
linking
topological
notion
koszulness
fox
markl
adapted
fm97
notion
distributive
laws
expressions
mixing
operations
cooperations
called
obtained
rewriting
rules
mixed
distributive
laws
let
call
a-bialgebra
vector
space
endowed
algebra
structure
encoded
operad
coalgebra
structure
encoded
operad
equivalently
dual
cooperad
linked
date
january
2019.
key
words
phrases
operad
generalised
bialgebras
hopf-borel
theorem
rigidity
theorem
freeness
algebra
sn-modules
authors
thank
mill
fruitful
conversations
livernet
useful
comments
work
really
helped
improve
presentation
work
ﬁrst
author
supported
anr
cathre
work
second
author
supported
labex
cimi
burgunder
delcroix-oger
mixed
distributive
law
bialgebra
satisﬁes
assump-
tions
hopf-borel
type
theorem
conilpotent
a-bialgebra
free
cofree
primitive
elements
theorem
called
rigid-
ity
theorem
particular
cases
rigidity
theorems
proven
instance
bor53
commutative
cocommutative
hopf
bialgebras
lr06
associative
coassociative
bialgebras
bur10
zinbiel
coassociative
bial-
gebras
foi07
dendriform
codendriform
algebras
liv06
prelie
conap
bialgebras
general
framework
theorem
introduced
loday
lod08
rigidity
theorems
stud-
ied
instance
lmw15
applications
found
example
bcr15
compute
explicit
bases
algebras
studying
general
framework
rewriting
particular
symmetric
operads
became
clear
authors
three
hypotheses
theorem
clariﬁed
clariﬁcations
needed
proof
article
prove
one
hypotheses
formulated
loday
lod08
needed
get
rigidity
theorem
viewpoint
enables
provide
answer
conjecture
loday
given
operad
encoded
structure
algebra
coalgebra
bialgebras
exists
generalisation
mixed
distributive
laws
called
conﬂuence
laws
structures
rigidity
theorem
holds
fact
deﬁnition
operad
associated
family
sn-modules
i.e
underlying
vector
space
graduation
endowed
action
symmetric
group
prove
precisely
general
result
two
operads
share
family
sn-modules
exists
conﬂuence
law
bialgebras
enables
develop
list
brand
new
examples
rigidity
theorem
presented
second
part
article
also
develop
case
explicit
isomorphism
sn-modules
framework
also
able
make
explicit
inductive
algorithm
compute
projection
subspace
primitive
elements
conﬂuence
law
associated
bialgebra
article
organised
follows
ﬁrst
part
focuses
general
theory
restrict
study
framework
bases
op-
erads
known
second
part
develops
explicit
computation
rigidity
theorem
precisely
ﬁrst
section
recall
loday
theorem
three
hypotheses
h2iso
bialgebra
satisfying
mixed
distributive
laws
one
compute
morphism
functorial
morphism
bijective
h2iso
rigidity
theorem
holds
point
core
property
morphism
induces
family
sn-modules
isomorphisms
property
induces
existence
conﬂuence
law
property
needed
obtain
rigidity
theorem
second
part
explicit
cases
explored
pre-
cisely
basis
vector
space
dualize
explain
construction
give
simple
condition
satisfy
hopf-borel
type
theorem
operads
hypotheses
rigidity
theorem
compatibility
s-module
structure
list
examples
literature
obtained
way
illustrating
strength
case
bunch
brand
new
ex-
amples
prelie
coprelie
perm
coperm
nap
conap
pan
copan
pan
coperm
leibniz
coassociative
poisson
coassociative
leibniz
cozinbiel
2as
co2as
even
dipt
codipt
bialgebras
notations
denotes
symmetric
group
permutations
elements
denotes
operads
denotes
dual
cooperad
operad
algebra
structure
encoded
operad
denoted
algebra
coalgebra
structure
encoded
operad
equivalently
dual
cooperad
denoted
cc-coalgebra
general
case
prove
section
one
hypotheses
loday
rigidity
theorem
generalised
bialgebras
needed
get
theorem
indeed
hypothesis
h2iso
implies
hypothesis
weaken
version
enough
get
rigidity
theorem
new
improvement
needed
hypotheses
enables
prove
conjecture
loday
reach
many
new
cases
ﬁrst
recall
loday
formulation
rigidity
theorem
studying
intertwining
hypotheses
theorem
study
case
bases
orthogonal
compute
explicitly
conﬂuence
laws
idempotent
one
problem
raised
lod08
ﬁnally
give
new
formulation
rigidity
theorem
1.1
loday
rigidity
theorem
let
ﬁeld
characteristic
be-
fore
introducing
loday
rigidity
theorem
recall
lv12
needed
deﬁnitions
deﬁnition
1.1.1
lv12
5.2.1
symmetric
algebraic
operad
s-module
n≥0
endowed
morphisms
modules
called
composition
map
called
unit
map
satisfy
associativity
unitality
let
two
algebraic
operads
article
consider
connected
operads
i.e
ﬁnite
dimensional
let
ﬁrst
recall
deﬁnition
algebra
cooperad
coalgebra
operad
burgunder
delcroix-oger
deﬁnition
1.1.2
lv12
5.2.3
algebra
operad
vector
a⊗n
space
equipped
sn-equivariant
morphism
denote
free
algebra
operad
whose
vector
space
generators
=mn≥1
=mn≥1
⊗snv
deﬁnition
1.1.3
lv12
5.7.1
cooperad
data
family
sn-modules
every
integer
two
morphisms
s-modules
counit
satisfying
coassociativity
counitality
axioms
operad
hom
cooperad
called
dual
cooperad
⊗sn
deﬁnition
1.1.4
lv12
5.7.3
coalgebra
operad
vector
space
equipped
sn-equivariant
morphism
deﬁnition
equivalent
deﬁnition
coalgebra
cooperad
⊗sn
vector
space
data
map
primitive
elements
coalgebra
prim
f1c
c|δ
denote
free
conilpotent
coalgebra
operad
equivalently
associated
dual
cooperad
whose
vector
space
primitives
=mn≥1
⊗sn
notation
1.1.5.
put
emphasis
notation
maps
used
later
algebra
operad
vector
space
endowed
map
coalgebra
cooperad
vector
space
endowed
map
following
fm97
deﬁne
notion
mixed
distributive
laws
deﬁnition
1.1.6.
compatibility
relation
deﬁned
sequence
maps
⊗st1
×···×stm
summation
taken
compatibility
relation
mixed
distributive
law
⊗ss1
×···×ssn
ceσ
compatible
action
symmetric
group
aj˜σ
aj˜σ
ciσ
ciσ
act
according
action
deﬁned
byp
ai1
aim
cj1
cjn
operad
symmetric
operad
denoted
compatible
operad
structures
hopf-borel
type
theorem
operads
algebra
endowed
structure
cc-coalgebra
coalgebra
endowed
structure
a-algebra
example
1.1.7.
classical
law
commutative
co-commutative
bial-
gebras
called
non-unitary
hopf
relation
given
mixed
distributive
law
⊗s1×s1
⊗s1×s1
⊗s1×s1
⊗s1×s1
⊗s1×s2
⊗s2×s1
⊗s2×s1
⊗s2×s1
⊗s2×s1
⊗s1×s2
⊗s1×s2
⊗s1×s2
⊗s2×s2
⊗s2×s2
denoting
usual
basis
comm
ambiguity
operations
mixed
distributive
law
represented
clearer
diagram
usual
basis
usual
basis
mixed
distributive
law
compatible
operad
structure
enough
give
generators
operads
laws
deduced
instance
maps
sum
terms
call
a-bialgebra
bialgebra
-algebra
cc-
coalgebra
products
coproducts
satisfy
mixed
dis-
tributive
laws
need
moreover
following
notion
deﬁnition
1.1.8.
coﬁltration
fnh
deﬁned
cc-coalgebra
fnh
h|∀p
vector
space
f1h
vector
space
primitive
elements
moreover
denote
f1h
canonical
inclusion
cc-coalgebra
said
conilpotent
∪n≥1fnh
remark
1.1.9.
ambiguity
write
rigidity
theorem
stated
loday
burgunder
delcroix-oger
theorem
1.1.10
lod08
let
bialgebra
type
satisﬁes
compatibility
relations
distributive
free
a-algebra
naturally
a-bialgebra
h2iso
cc-coalgebra
map
isomorphism
conilpotent
cc−λa-bialgebra
free
cofree
primitive
elements
prim
prim
remark
1.1.11.
thus
space
irreducible
elements
i.e
elements
written
linear
combination
products
el-
ements
space
primitive
elements
1.2
conﬂuence
laws
reasoning
loday
theorem
ﬁrst
con-
sider
mixed
distributive
law
thanks
one
compute
map
sending
use
theorem
one
prove
induced
morphism
isomorphism
adopt
another
reasoning
start
data
isomorphism
prove
get
back
hypotheses
theorem
precisely
prove
existence
associated
conﬂuence
law
reasoning
splitted
next
ﬁve
subsections
subsection
introduce
notion
conﬂuence
laws
explain
hypothesis
reduced
subsection
1.3.
isomorphism
get
homogeneous
conﬂuence
law
subsection
1.4
reaching
conﬂuence
laws
subsection
1.5
stating
equivalence
conditions
rigidity
theorem
ﬁnally
state
main
result
subsection
1.6.
introduce
subsection
generalisation
mixed
distributive
laws
call
conﬂuence
laws
deﬁnition
1.2.1.
conﬂuence
law
operads
family
maps
a⊗m
a⊗m
short
cut
forln1+
...
+nm=n
compatible
structure
operad
action
symmetric
group
acting
clear
mixed
distributive
laws
deﬁned
deﬁnition
1.1.6
conﬂuence
laws
keeping
terms
involving
trivial
operation
operations
hand
conﬂuence
law
obtained
considering
mixed
distributive
laws
coeﬃcients
could
depend
coﬁltration
allowed
usual
mixed
distributive
laws
example
1.2.2.
example
new
conﬂuence
law
presented
equa-
tion
2.2.2
hopf-borel
type
theorem
operads
remark
1.2.3.
conﬂuence
laws
equivalent
data
s-module
morphism
c∗a
presented
lmw15
equivalence
comes
equality
homsn
cid:0
⊗sm
a⊗m
cid:1
homsm×sn
cid:0
a⊗m
cid:1
coming
deﬁnition
duality
thank
livernet
helping
clearing
link
clarifying
deﬁnition
a-bialgebras
let
deﬁne
a-bialgebras
deﬁnition
1.2.4.
refering
notations
notation
1.1.5
bialgebra
k-vector
space
endowed
structure
-algebra
structure
cc-coalgebra
following
diagram
commutes
f1h
c∗a
deﬁned
objets
working
let
look
closely
injectivity
lod08
condition
existence
1.3
rigidity
theorem
morphism
isomorphism
every
vector
space
ﬁrst
give
example
necessity
injectivity
studying
link
ﬁltration
coﬁltration
associated
bialgebras
link
crucial
see
later
proof
main
theorem
relies
projection
primitive
elements
parallel
decomposable
elements
following
example
show
lack
injectivity
induces
counter-example
rigidity
theorem
example
1.3.1.
consider
coassociative
associative
bialgebras
mixed
distributive
law
hopf
mixed
distributive
law
compute
mixed
distributive
law
given
=pσ∈sn
noted
constructed
monomorphism
therefore
isomorphism
epimorphism
failing
verify
hypotheses
existence
rigidity
theorem
let
consider
solomon-tits
algebra
see
example
nt06
hnt08
br10
underlying
vector
space
space
surjections
r≥1str
str
surjective
also
known
set
compositions
one
endow
space
shuﬄe
product
block
coproduct
deﬁned
follows
str
write
burgunder
delcroix-oger
max
let
str
product
deﬁned
sts
vertical
shuf-
sum
stuﬄes
i.e
bijective
map
satisfying
given
map
exists
unique
surjective
map
std
std
std
map
std
called
standardisation
see
instance
nt06
let
deﬁne
co-restriction
x|k
std
x−1
deﬁne
block
coproduct
∆block
∆block
r−1xi=1
...
i+1
...
extend
linearity
examples
1.3.2.
examples
products
coproducts
given
112
221
123
132
231
213
21344
32411
31422
21433
∆block
2433142
ǫ⊗2433142+1⊗132231+212⊗2112+23312⊗11+2433142⊗ǫ
empty
word
unique
surjection
set
cardinality
mixed
distributive
law
product
coproduct
hopf
mixed
distributive
law
checked
direct
inspection
∆r+1
block
∆block
id⊗k−1
∆k−1
block
conilpotent
element
str
block
∆block
direct
computation
one
prove
element
112
constructed
linear
combination
products
primitive
elements
therefore
generated
primitives
though
verify
conilpotent
existence
mixed
distributive
law
hypotheses
block
1.4
homogeneous
conﬂuence
laws
ﬁrst
decribe
link
ﬁltration
coﬁltration
free
bialgebra
use
link
deﬁne
homogeneous
conﬂuence
laws
step
isomorphism
associated
conﬂuence
law
proposition
1.4.1.
data
family
isomorphisms
functorial
sending
natural
graduation
product
natural
cograduation
coproduct
equivalent
data
family
isomor-
phisms
s-modules
hopf-borel
type
theorem
operads
proof
ﬁeld
characteristic
identify
coinvariants
invariants
notion
free
conilpotent
coalgebra
operad
data
family
isomorphisms
s-modules
deﬁnes
natural
transformation
schur
functor
associated
given
schur
functor
deﬁned
⊗sn
operad
7→nn≥1
schur
functor
associated
cooperad
described
natural
transformation
directly
equivalent
family
isomorphisms
functorial
sending
graduation
cograduation
⊗sn
let
suppose
existence
family
isomorphisms
functorial
sending
graduation
product
cograd-
uation
coproduct
⊗sn
⊗sn
integer
hence
deﬁnes
family
isomorphisms
s-modules
cid:3
denote
morphism
s-modules
induced
family
remark
1.4.2.
trivial
representation
isomorphisms
comm
commc
homotheties
always
case
depends
chosen
decomposition
irreducible
representations
s-module
unique
isomorphisms
call
homogeneous
conﬂuence
law
set
rewritings
compo-
sitions
cooperation
arity
operation
arity
applied
primitive
elements
terms
primitive
elements
denote
set
xσ∈sn
µpσ
f1h
words
homogeneous
conﬂuence
laws
conﬂuence
laws
ﬁltered
distributive
laws
distributive
laws
see
dg14
dot07
homogeneous
conﬂuence
law
strictly
equivalent
endowing
free
a-algebra
vector
space
structure
c-coalgebra
sending
graduation
algebra
cograduation
coalgebra
indeed
following
result
follows
lemma
1.4.3.
data
equivalent
data
homogeneous
conﬂuence
law
proof
given
homogeneous
conﬂuence
law
consider
map
source
viewed
algebra
target
seen
coalgebra
produces
family
morphism
sending
ﬁltration
product
coﬁltration
coproduct
result
morphism
deﬁned
bid
burgunder
delcroix-oger
denoting
duality
pairing
dual
space
action
element
symmetric
group
element
deﬁne
homogeneous
conﬂuence
law
morphism
xσ∈sn
hδσ
notice
hδσ
=dδ
µσ−1
two
constructions
inverse
cid:3
1.5
equivalence
conditions
use
homogeneous
conﬂuence
laws
previous
subsection
prove
equivalence
hypothesises
rigidity
theorem
stated
loday
proposition
1.5.1.
let
two
algebraic
operads
existence
conﬂuence
law
implies
existence
family
sn-module
morphism
positive
integer
moreover
bijectivity
enables
deﬁne
associated
conﬂuence
law
remark
1.5.2.
bijections
exist
un-
derlying
sn-module
proof
homogeneous
conﬂuence
law
directly
computed
conﬂuence
law
forgetting
information
deﬁne
associated
conﬂuence
law
use
following
notation
⊗sn
⊗sn
conﬂuence
law
deﬁned
following
composite
using
notations
deﬁnition
1.1.4
⊗sn
id⊗ϕ⊗id⊗n
−−−−−−−→
⊗sn
li≥1
koi=1
c−→
xl1+
...
+lk=n
koi=1
xl1+
...
+lk=n
li≥1
mli
koi=1
hli
ϕ−1
−−−−−→
xl1+
...
+lk=n
⊗sn
li≥1
operations
functorial
get
family
maps
a⊗m
moreover
morphism
s-modules
hence
maps
compatible
action
symmetric
group
hopf-borel
type
theorem
operads
ﬁnally
show
compatibility
operad
structure
comes
following
commuting
diagram
holding
vector
space
ppl
j=1
qj=nnl
j=1
⊗qj
i=1
⊗ri
ppk
i=1
ri=nnk
diagram
obtained
using
deﬁnition
composition
given
using
deﬁnition
commutativity
diagram
relies
two
facts
operations
occur
part
tensorial
product
deﬁnition
coproduct
gives
commutativity
one
part
diagram
thanks
following
diagram
holding
previous
γkl
γk1
ppl
j=1
qj=nnl
j=1
cid:0
hqj
cid:1
ppk
i=1
ri=nnk
i=1
hri
cid:3
remark
1.5.3
conﬂuence
law
given
isomorphism
write
equivalently
associated
bialgebras
bialgebras
a-bialgebras
diﬀerent
conﬂuence
laws
associated
cou-
ple
operads
see
instance
mixed
distributive
laws
dendriform
codendriform
bialgebra
computed
foissy
foi07
one
referred
bdo
projection
last
step
reaching
rigidity
theorem
prove
existence
good
projection
coalgebra
primitive
elements
named
idempotent
let
consider
necessarily
free
cofree
conilpotent
bialgebra
denote
coﬁltration
s-module
morphism
associated
conﬂuence
law
ﬁrst
show
following
lemmas
lemma
1.5.4.
bialgebra
generated
algebra
primitive
elements
burgunder
delcroix-oger
proof
proove
lemma
reductio
absurdum
let
consider
minimal
integer
exists
element
fnh
subalgebra
generated
primitive
elements
construct
subalgebra
generated
primitive
elements
belongs
fn−1h
subalgebra
generated
primitive
elements
linear
basis
exists
basis
denoting
action
element
symmetric
group
element
considered
s-module
bialgebra
satisﬁes
conﬂuence
law
also
homogeneous
conﬂuence
law
hence
primitive
elements
according
equation
real
number
denote
xσ∈sn
jpσ
belongs
fnh
coproduct
element
written
...
∈f1h
∈sn
without
loss
generality
consider
case
∈sn
given
tuple
primitive
elements
decomposed
sum
elements
let
consider
element
let
determine
appropriate
i=1pτ
∈sn
using
equation
kxi=1
σ∈sn
jpτ
using
equations
equivalent
◦σ−1
moreover
i=1
jδi
gives
kxi=1
xσ∈sn
=pk
jdi
◦σ−1
kxi=1
thanks
equations
choosing
gives
subalgebra
generated
primitive
elements
hopf-borel
type
theorem
operads
fn−1h
hence
also
subalgebra
generated
primitive
elements
minimality
cid:3
lemma
1.5.5.
vector
space
fn−1
admits
supplementary
space
proof
first
deﬁnition
fn−1
let
show
fn−1
let
consider
element
injective
element
thus
fn−1
thus
fn−1
comes
equation
let
prove
fn−1
algebra
lemma
1.5.4
let
consider
element
write
necessarily
uniquely
=xj≥1
equation
bijectivity
fj−1
see
second
point
proof
get
decomposition
fn−1
cid:3
element
deﬁne
projection
parallel
map
linear
satisﬁes
prim
call
map
idempotent
associated
a-bialgebras
see
corollary
1.6.2
1.6
rigidity
theorem
give
new
formulation
rigidity
theo-
rem
takes
account
previous
subsections
conﬂuence
laws
theorem
1.6.1.
let
ﬁeld
characteristic
let
consider
two
connected
algebraic
operads
nite
dimensional
vector
spaces
family
sn-modules
isomorphisms
associated
conﬂuence
law
conilpotent
a-bialgebras
free
cofree
vector
space
primitive
elements
prim
prim
moreover
free
cofree
a-bialgebra
also
˜αa-bialgebra
conﬂuence
law
mixed
distributive
laws
conilpotent
burgunder
delcroix-oger
a-bialgebras
free
cofree
primitive
elements
words
result
depend
choice
conﬂuence
law
a-bialgebra
idempotent
exactly
projection
parallel
see
1.5.5
hence
following
result
corollary
1.6.2.
idempotent
unique
idempotent
described
one
introduced
lod08
generalisation
eulerian
idempotent
used
pat93
whose
origin
lays
che57
obtained
case
comm
follow
sketch
proof
loday
lod08
patras
pat93
using
conﬂuence
laws
idempotent
introduced
previously
proof
want
prove
isomorphism
prim
latter
free
cofree
bialgebra
prim
call
respectively
canonical
injection
prim
prim
surjection
prim
prim
let
deﬁne
prim
unique
lifting
universal
property
c-conilpotent
cofree-
ness
consider
prim
natural
injection
prim
lifting
universal
property
freeness
represent
morphisms
prim
prim
prim
first
bialgebra
morphism
algebra
morphism
uni-
versal
property
show
using
ﬁltration
provided
conilpotency
also
coalgebra
morphism
indeed
con-
struction
f1a
prim
prim
sent
bijectively
f1h
prim
let
consider
fna
prim
freeness
exists
f1a
prim
hence
cooperation
conﬂuence
law
denoted
distributivity
δ◦µ
lxi=1
cid:16
pσi
pσi
cid:17
.⊗µi
cid:16
pσi
n−ri
k+1
pσi
cid:17
hopf-borel
type
theorem
operads
primitive
elements
arity
sshuﬄe
set
permutations
note
reasoning
depend
choice
conﬂuence
l+1
j=1
j=1
j=1
law
lxi=1
lxi=1
cid:16
pσi
pσi
cid:16
pσi
koj=1
cid:17
pσi
j=1
+ri
k+1
pσi
cid:17
cid:16
pσi
n−ri
l+1
cid:17
algebra
morphism
conﬂuence
law
algebra
morphism
proves
bialgebra
isomorphism
implies
coalgebra
morphism
identity
primitive
elements
hence
cofreeness
equality
implies
injective
surjective
finally
also
injective
otherwise
would
minimal
integer
exists
fmh
deﬁnition
fmh
exists
cooperation
using
fact
coalgebra
morphism
obtain
contradicts
minimality
finally
map
prim
vector
space
isomorphism
preserves
graduation
result
follows
using
isomorphim
prim
prim
cid:3
immediate
result
theorem
following
corollary
corollary
1.6.3.
given
two
algebraic
operads
conﬂuence
law
induced
isomorphism
a-algebra
free
possible
deﬁne
cc-coproduct
satisfying
conﬂuence
law
proof
consequence
existence
conﬂuence
law
free
exists
vector
space
naturally
equipped
structure
a-bialgebras
thanks
mixed
distributive
law
consequence
rigidity
theorem
cid:3
burgunder
delcroix-oger
provides
eﬃcient
tool
solve
problem
freeness
algebras
encoded
operad
see
bcr15
give
generators
divisibility
free
algebras
moreover
another
application
theorem
following
answer
conjecture
loday
lod08
theorem
1.6.4.
connected
algebraic
operads
sharing
underlying
ﬁnite
dimensional
sn-modules
exists
family
sn-modules
isomorphisms
thus
exists
conﬂuence
law
associated
conilpotent
bialgebra
free
cofree
primitives
proof
character
representation
symmetric
group
integer-
valued
hence
representation
symmetric
group
possible
construct
sn-module
isomorphism
dual
let
choose
obtain
family
sn-modules
isomorphisms
satisfying
hypothesis
theorem
1.6.1.
applying
theorem
gives
result
cid:3
following
corollary
immediate
corollary
1.6.5.
two
operads
sharing
underlying
sn-module
free
a-algebra
free
c-algebra
remark
1.6.6.
note
case
non
free
algebras
1.7
orthogonal
bases
subsection
provide
explicit
induc-
tive
description
conﬂuence
laws
idempotent
favourable
cases
every
consider
exist
two
generating
sets
ban
bcn
sn-module
re-
spectively
let
remark
obtain
generating
sets
take
one
element
every
orbit
generating
set
found
instance
relations
sn-module
form
considering
basis
equation
gives
xσ∈sn
cid:10
xσ∈sn
cid:10
xσ∈aut
cid:11
cid:11
jpσ
aut
let
remark
aut
aut
deﬁnition
equality
injective
supposed
follows
hopf-borel
type
theorem
operads
conﬂuence
law
given
cooperation
op-
eration
induction
coﬁltration
fλ1
fλn
i=1
...
aln
∈baλ1
...
×baλn
aut
ali
tk−1
⊗iali
cid:17
cid:16
⊗iali
cid:16
cl1
cln
cid:17
⊗iali
tensorial
product
operations
obtained
evaluat-
aln
tensorial
product
operations
obtained
evaluating
cid:17
primitive
elements
see
1.5.1
⊗iali
maps
give
mixed
distributive
law
elements
fλ1
cid:17
primitive
elements
ing
cid:16
al1
cid:16
al1
fλn
wherepi
aln
idempotent
given
inductive
limit
maps
deﬁned
coﬁltration
en−1
−xi
|aut
en−1
note
decomposition
lemma
1.5.5
hence
identity
prove
follows
map
obtained
idempotent
lemma
1.7.1.
constructed
map
satisﬁes
conilpotent
bialgebra
proof
lemma
1.7.1.
prove
induction
primitive
elements
primitive
element
let
suppose
property
true
en+1
induction
hypothesis
fn+1h
however
en+1
−xi
−xi
hence
−pi
|aut
an+1
|aut
an+1
cn+1
an+1
an+1
cn+1
cn+1
|aut
an+1
an+1
cn+1
=cn+1
|aut
an+1
cn+1
an+1
cn+1
en+1
cid:3
burgunder
delcroix-oger
provides
explicit
inductive
description
idempotent
conﬂuence
law
next
section
apply
constructions
dual
case
canonical
vector
space
isomorphism
vector
space
dual
moreover
morphism
must
also
sn-module
morphism
isomorphisms
give
rise
rigidity
theorem
provide
section
criterion
given
basis
get
family
sn-module
isomorphisms
apply
several
cases
2.1
general
results
consider
two
connected
algebraic
operads
satisfy
rigidity
theorem
operads
must
underlying
s-modules
let
consider
basis
vector
space
consider
morphism
given
duality
respect
denote
unionsn≥1
let
consider
free
a-algebra
basis
induces
basis
given
element
operation
coproduct
given
duality
deﬁned
xx1
...
xn∈bh
xx1
...
xn∈bh
λ∈k∗
...
∋λ.x
δx∗
...
6=0
δx∗
...
6=0
kronecker
symbol
note
thanks
equation
deﬁnitions
coincide
operadic
terms
deﬁnition
rewritten
operation
cooperation
elements
...
...
6=0
...
denotes
coeﬃcient
sn-module
morphisms
basis
satisfy
conditions
deﬁnition
2.1.1.
basis
said
compatible
basis
products
dual
coproducts
expressed
basis
commute
action
symmetric
group
words
cooperation
operation
σ−1
thanks
shape
homogeneous
conﬂuence
laws
equation
obtain
directly
hopf-borel
type
theorem
operads
proposition
2.1.2.
considered
basis
compatible
basis
family
family
sn-module
isomorphisms
rigidity
theorem
applies
conilpotent
a-bialgebra
free
cofree
vector
space
primitives
remark
2.1.3.
example
bases
operads
compatible
given
lyndon
basis
comb
basis
operad
lie
see
hv15
computation
comb
basis
consider
non
symmetric
operads
basis
compatible
obtain
following
result
gives
explicit
family
s-modules
isomorphisms
corollary
2.1.4.
non
symmetric
operads
basis
exists
conﬂuence
law
whose
associated
isomorphisms
given
sending
dual
basis
rigidity
theorem
applies
example
2.1.5.
using
duality
usual
bases
known
operads
ﬁnd
back
following
cases
represent
product
coproduct
ambiguity
omitting
precise
product
coproduct
bor53
=comm
=comm
hopf
mixed
distributive
law
lr06
=as
=as
n.u.i
mixed
distributive
law
bur10
=as
=zinb
semi-hopf
mixed
distributive
law
denoted
generating
operation
zinbiel
bur08
=mag
=mag
magmatic
mixed
distributive
law
bur08
=mag∞
=mag∞
inﬁnite
magmatic
mixed
distributive
law
burgunder
delcroix-oger
liv06
=nap
=prelie
livernet
mixed
distributive
law
lod08
=nil
=nil
nil
mixed
distributive
law
lod08
dup
=dup
following
mixed
distributive
law
note
-bialgebras
satisfy
rigidity
theorem
given
conﬂuence
law
-bialgebras
conﬂuence
law
obtained
dual
graphically
horizontal
mirror
image
remark
2.1.6.
cases
obtained
duality
product
instance
dendriform
case
isomorphism
given
foissy
mixed
distributive
law
foi07
arity
two
dend
dend
given
matrix
diagonalisable
admits
eigenvalue
indeed
foissy
uses
two
diﬀerent
dendriform
products
deﬁned
dendriform
algebras
computes
mixed
distributive
laws
one
dual
2-as
case
computed
loday
ronco
lr06
isomorphism
given
hopf
n.u.i
mixed
distributive
laws
arity
two
diagonalis-
able
admits
eigenvalue
would
interesting
know
exists
two
diﬀerent
2-as
products
looking
mixed
distributive
laws
one
dual
one
recovers
loday
ronco
mixed
distributive
laws
2.2
prelie
case
consider
prelie
operad
rooted
tree
basis
introduced
chapoton
livernet
cl01
free
prelie
hopf-borel
type
theorem
operads
algebra
vector
space
spanned
rooted
non
planar
trees
vertices
indexed
example
motivation
introduction
conﬂuence
laws
recall
relation
satisﬁed
prelie
product
given
combinatorially
product
sum
possible
ways
add
edge
vertex
root
root
obtained
tree
root
dual
coproduct
given
sum
possible
ways
delete
edge
tree
xa∈e
connected
component
containing
root
connected
component
remark
2.2.1.
coproduct
obtained
taking
connected
com-
ponents
connes-kreimer
coproduct
apply
rigidity
theorem
algebras
compute
associated
conﬂuence
law
proposition
2.2.2.
prelie
product
dual
coproduct
satisfy
following
conﬂuence
law
prelie
prelie
pn+k
primitive
elements
given
preliec
prelie-bialgebra
pn+k
pn+1
pn+k
pn+k
pn+k
pn+k
previous
deﬁnition
conﬂuence
law
easier
apply
also
state
another
deﬁnition
closer
formal
deﬁnition
conﬂuence
law
strictly
equivalent
previous
one
prelie
prelie
xs1
...
si∈prelie
l1+
...
+lk=n
.⊗sk
n−lk+1
burgunder
delcroix-oger
sum
taken
products
satisfying
operad
composition
prelie
one
el-
ement
taken
orbit
action
symmetric
group
instance
one
representative
chosen
proof
ﬁrst
expression
decomposition
done
following
deleted
edge
root
root
somewhere
else
second
expression
follows
quite
easily
deﬁnition
dual
cid:3
coproduct
pointed
authors
sketch
conﬂuence
law
also
found
mb14
example
2.2.3.
let
give
explicitely
second
formulation
conﬂuence
laws
example
get
note
two
terms
per
way
choose
one
edge
left
subtree
one
edge
right
subtree
node
due
symmetries
proposition
2.2.4.
applying
algorithm
idempotent
given
+xn≥2
∈htn
linext
∩linext
6=∅
n−1
aut
see
rooted
tree
hasse
diagram
poset
unique
minimal
element
root
linext
set
linear
exten-
sion
poset
proof
show
idempotent
vanishes
non
trivial
rooted
tree
inclusion-exclusion
principle
htn
coeﬃcient
front
tree
htn
edges
diﬀerent
hopf-borel
type
theorem
operads
figure
box
tree
ones
obtained
coproducts
deleting
edges
others
×xp≥k
cid:18
cid:19
hence
result
cid:3
apply
rigidity
theorem
prelie
algebras
three
examples
literature
example
2.2.5
box
trees
use
obtained
criterion
give
new
proof
freeness
algebra
partitioned
trees
introduced
foi15
partitioned
trees
equivalent
box
trees
introduced
oge13b
let
consider
quadruple
ﬁnite
set
called
set
labels
partition
called
set
vertices
element
called
root
map
called
set
edges
denote
map
associates
oriented
graph
vertices
labelled
subsets
vertex
vertex
containing
label
pair
cid:16
cid:17
graph
cid:16
cid:17
tree
rooted
edges
oriented
deﬁnition
2.2.6
foi15
oge13b
quadruple
box
tree
toward
root
label
called
parent
vertex
figure
example
box
trees
presented
root
double
rectangle
product
given
natural
prelie
product
trees
algebra
deﬁne
following
coproduct
xe∈e
a→b
|a|
coproduct
satisﬁes
previous
conﬂuence
law
hence
associated
algebra
prelie
free
primitive
given
trees
edges
burgunder
delcroix-oger
figure
example
hypergraph
figure
example
hypertree
example
2.2.7
hypertrees
bijection
decorated
hypertrees
pair
given
type
box
trees
decorated
sets
motivated
introduction
following
product
hypertrees
introduced
berge
ber89
studied
second
author
oge13a
oge13b
do15
deﬁnition
2.2.8
ber89
hypergraph
set
ordered
pair
ﬁnite
set
collection
elements
cardinality
least
two
belonging
power
set
elements
called
vertices
called
edges
example
hypergraph
presented
ﬁgure
deﬁnition
2.2.9.
let
hypergraph
walk
vertex
edge
vertex
edge
alternating
sequence
vertices
edges
beginning
ending
ei+1
vi+1
length
walk
number
edges
vertices
walk
example
2.2.10.
previous
example
several
walks
walk
deﬁnition
2.2.11.
hypertree
non-empty
hypergraph
given
distinct
vertices
exists
walk
distinct
edges
i.e
connected
walk
unique
i.e
cycles
pair
called
hypertree
set
called
hypertree
vertices
example
hypertree
presented
ﬁgure
let
consider
rooted
hypertree
i.e
hypertree
distinguished
vertex
given
edge
one
vertex
nearest
root
let
call
petiole
hopf-borel
type
theorem
operads
deﬁne
prelie
product
rooted
hypertrees
sum
ways
graft
root
vertex
grafting
given
adding
edge
example
2.2.12.
represent
product
two
rooted
hypertrees
algebra
deﬁne
following
coproduct
xe∈e
coproduct
satisﬁes
previous
conﬂuence
law
hence
associated
algebra
prelie
free
primitive
given
hypertrees
binary
edge
i.e
edge
cardinality
two
example
2.2.13
fat
trees
oge13b
do14
second
author
also
studied
notion
rooted
fat
trees
introduced
zas02
deﬁnition
2.2.14
zas02
fat
tree
set
partition
whose
parts
called
vertices
together
edges
linking
elements
diﬀerent
vertices
walk
fat
tree
alternating
sequence
every
elements
diﬀerent
vertices
edge
every
ai+1
elements
vertex
every
pair
elements
diﬀerent
vertices
exists
one
one
walk
rooted
fat
tree
fat
tree
distinguished
element
called
root
figure
example
rooted
fat
tree
presented
root
circled
vector
space
rooted
fat
trees
easily
endowed
prelie
product
given
tree
structure
burgunder
delcroix-oger
figure
rooted
fat
tree
algebra
deﬁne
following
coproduct
xe∈e
a∈a→b∈b
|a||b|
coproduct
satisﬁes
previous
conﬂuence
law
hence
associated
algebra
prelie
free
primitive
given
fat
trees
edges
remark
2.2.15.
example
shows
formula
contain
sum
permutations
primitive
elements
take
account
action
symmetric
group
automorphism
groups
operations
appear
lod08
instance
prelie
denoting
generating
product
coproduct
respectively
triples
primitive
elements
second
term
sum
always
appear
ﬁrst
one
appear
equality
2.3
perm
case
apply
rigidity
theorem
dual
case
op-
erad
perm
introduced
chapoton
cha01
endowed
usual
vector
space
basis
given
pointed
sets
recall
relation
satisﬁed
perm
product
given
combinatorially
product
pointed
set
obtained
union
pointed
pointed
element
dual
coproduct
given
sum
possible
ways
split
set
two
pointed
set
union
pointed
element
pointed
element
xs1∪s2=s
pointed
set
denotes
pointed
element
hopf-borel
type
theorem
operads
case
idempotent
given
explicitly
following
formula
=xn≥1
n−1
nn−1dn
deﬁned
recursively
dn+1
remark
2.3.1.
use
notation
diagram
diamond
proof
show
induction
=qk
iterated
coproduct
satisﬁes
following
relation
i=1
n−i
k+1
n−k−1
cid:18
n−1xp=k
cid:19
∆k−1
indeed
terms
coproduct
whose
left
part
least
elements
remain
coproducts
choose
decomposition
cid:3
p−1
cid:1
choices
cid:0
n−1
apply
rigidity
theorem
algebras
compute
associated
conﬂuence
law
primitive
elements
following
conﬂuence
law
=pk≥1
proposition
2.3.2.
perm
product
dual
coproduct
satisfy
∈perm
2∈perm
element
kronecker
symbol
˙s1
proof
coproduct
product
obtained
merging
for-
getting
pointed
element
splitting
pointed
set
two
pointed
sets
left
one
containing
pointed
element
equality
obtained
considering
diﬀerent
cases
splitting
separates
left
side
pointed
element
splitting
splits
right
part
coproduct
pointed
element
element
splitting
splits
pointed
element
left
part
coproduct
ﬁxed
right
part
contain
pointed
element
pointed
element
burgunder
delcroix-oger
figure
nap
product
figure
nap
coproduct
splitting
splits
pointed
element
right
left
part
pointed
element
right
part
chosen
cid:3
2.4
nap
case
consider
nap
operad
see
cl01
dl02
livernet
proven
liv06
existence
mixed
distributive
law
conilpotent
prelie
conap
bialgebra
satisfying
associated
mixed
distributive
law
free
cofree
primitive
elements
study
nap
conap
bialgebras
nap
product
vector
space
satisﬁes
following
relation
basis
free
nap
algebra
vector
space
given
set
rooted
trees
vertices
labelled
elements
denoted
rtn
product
two
trees
algebra
tree
obtained
grafting
root
root
see
figure
coproduct
tree
algebra
given
dual
product
sum
possible
trees
obtained
deleting
edge
attached
root
part
containing
root
left
part
coproduct
see
figure
apply
rigidity
theorem
algebras
compute
associated
conﬂuence
law
mixed
distributive
law
proposition
2.4.1.
nap
product
associated
dual
coproduct
satisfy
following
mixed
distributive
law
sweedler
notation
hopf-borel
type
theorem
operads
proof
sum
possibilities
deleting
edge
containing
root
tree
obtained
adding
edge
root
one
result
comes
following
decomposition
either
edge
deleted
edge
cid:3
previous
reasoning
gives
following
expression
idempotent
checked
proof
=xn≥1
n−1
deﬁned
recursively
dn+1
...
proof
operator
rewritten
terms
rooted
trees
rooted
trees
least
two
vertices
whose
root
children
vanishes
n≥1
n−1
partial
sum
cid:3
...
free
prelie
algebra
endowed
natural
structure
free
nap
algebra
note
case
non
free
prelie
algebras
instance
prelie
structure
mag
operad
endowed
nap
product
see
bdom
examples
developed
subsection
2.2
seen
nap-
algebras
considering
grafting
root
example
2.4.2
box
trees
considering
example
2.2.5
endowed
natural
nap
structure
associated
prelie
product
deﬁne
following
conap
coproduct
xe∈er
r→b
|r|
set
edges
adjacent
root
coproduct
satisﬁes
previous
mixed
distributive
law
hence
associated
algebra
nap
free
primitive
given
trees
edges
example
2.4.3
hypertrees
considering
example
2.2.7
deﬁne
nap
product
rooted
hypertrees
hypertree
obtained
grafting
root
root
grafting
given
adding
edge
burgunder
delcroix-oger
algebra
deﬁne
following
coproduct
xe∈er
set
edges
adjacent
root
coproduct
satisﬁes
previous
mixed
distributive
law
hence
associated
algebra
nap
free
primitive
given
hypertrees
binary
edge
i.e
edge
cardinality
two
example
2.4.4
fat
trees
considering
example
2.2.13
endowed
natural
nap
structure
associated
prelie
product
deﬁne
following
conap
coproduct
xe∈er
r∈r→b∈b
|r||b|
set
edges
adjacent
root
coproduct
satisﬁes
previous
mixed
distributive
law
hence
associated
algebra
nap
free
primitive
given
trees
edges
2.5
pan
case
consider
koszul
dual
nap
operad
denoted
pan
pan
product
vector
space
satisﬁes
following
relation
proposition
2.5.1.
operad
pan
koszul
dual
operad
nap
proof
use
methods
dotsenko
hoﬀbeck
see
hof10
determine
koszul
dual
nap
operad
let
recall
relation
nap
orthogonal
relation
precisely
relations
pan
cid:3
basis
free
pan
algebra
vector
space
given
set
pointed
sets
elements
labelled
elements
denoting
bold
pointed
element
set
product
two
pointed
sets
algebra
pointed
set
otherwise
coproduct
pointed
set
pointed
algebra
given
dual
product
given
=xa∈u
a6=x
set
pointed
apply
rigidity
theorem
algebras
compute
associated
conﬂuence
law
hopf-borel
type
theorem
operads
proposition
2.5.2.
pan
product
associated
dual
coprod-
uct
satisfy
following
conﬂuence
law
primitive
elements
conilpotent
pan-bialgebra
δv∈pan
sweedler
notation
kronecker
symbol
δv∈pan
proof
otherwise
coproduct
obtained
either
separating
splitting
cid:3
previous
reasoning
gives
following
expression
idempotent
checked
proof
=xn≥1
n−1
deﬁned
recursively
dn+1
proof
show
induction
=qk−1
iterated
coproduct
satisﬁes
following
relation
i=1
indeed
∆k−1
equality
comes
newton
binomial
theorem
cid:3
copan-perm
bialgebras
perm
algebra
endowed
structure
copan
bialgebras
considering
coproduct
dual
natural
structure
pan-algebra
following
conﬂuence
law
follows
directly
deﬁnitions
proposition
2.5.3.
perm
product
associated
dual
copan-
coproduct
satisfy
following
conﬂuence
law
primitive
elements
conilpotent
copan-perm-bialgebra
u×v
δv∈pan
u⊗v+u1×v⊗u2+u×v1⊗v2+δv1∈pan
u×v2⊗v1
sweedler
notation
burgunder
delcroix-oger
2.6
associative
leibniz
poisson
zinbiel
case
con-
sider
rigidity
theorems
obtained
operads
underlying
free
alge-
bras
tensor
algebra
diﬀerent
products
associative
leibniz
poisson
zinbiel
operads
introduced
respectively
lod93
fre06
lod95
relations
satisﬁed
operads
respectively
associative
product
sometimes
omitted
leibniz
product
poisson
products
associative
commutative
lie
bracket
zinbiel
product
using
relations
poisson
interpreted
comm
lie
commutative
products
lie
brackets
elements
basis
poisson
operad
given
usual
lyndon
basis
lie
algebras
commutative
terms
sorted
non
increasing
order
obtained
terms
naturally
bracketed
lie
brackets
determined
left-to-right
minima
naturally
bracketed
lyndon
words
instance
4652371
stands
denote
representation
bold
distinguish
representation
identify
associative
elements
one
use
injection
lie
algebras
associative
algebras
deﬁned
injection
commutative
algebras
associative
algebras
deﬁned
using
injections
implicit
elements
right
part
equality
obtain
basis
poisson
operad
elements
small
arities
given
arity
arity
123
123
132
231
321
132
132
312
213
231
213
213
231
132
312
231
231
321
123
132
312
312
321
123
213
321
123
132
213
231
312
321
combinatorially
products
correspond
tensor
algebra
concatenation
associative
product
xp+1
xp+q
xp+q
leibniz
product
xi⊔j=
...
|j|x1
xpyj|j
yj1y1yi1
yi|i|
hopf-borel
type
theorem
operads
i|i|
j|j|
shuﬄe
product
poisson
product
commutator
concatenation
poisson
bracket
xp+1
xp+q
xpxp+1
xp+q
xp+1
xp+qx1
xp+1
xp+q
shp
xp+1
xp+q
halfshuﬄe
zinbiel
product
xp+1
xp+q
shp−1
xp+1
xp+q
shα
xα+β
α+β
π−1
π−1
π−1
π−1
associated
dual
coproducts
given
tensor
algebra
deconcatenation
associative
product
xi+1
p−1xi=1
leibniz
coproduct
p−1xi=1xj
i+1
xi⊗xj
xj+1
xj−1
xi+1
coshuﬄe
coproduct
poisson
product
commu-
tator
deconcatenation
poisson
bracket
xi+1
xi+1
p−1xi=1
xi⊔j=
...
j6=∅
xi1
xi|i|
xj1
xj|j
i|i|
j|j|
cohalfshuﬄe
zinbiel
coproduct
xi⊔j=
...
x1xi1
xi|i|
xj1
xj|j
i|i|
j|j|
mixed
distributive
laws
diﬀerent
relations
given
associative-associative
case
n.u.i
mixed
distributive
law
proven
lr06
written
example
2.1.5
burgunder
delcroix-oger
associative-zinbiel
case
semi-hopf
mixed
distributive
law
proven
bur10
written
example
2.1.5
note
product
used
exactly
shuﬄe
product
associative-leibniz
case
express
conﬂuence
law
need
operators
expressed
terms
coassociative
coproduct
leibniz
product
δx∈f1
δx1∈f1
kronecker
symbol
δy∈f1
δy2∈f1
x.y1
xi⊔j=
...
xi1
xi|i|
xj1
xjj
i|i|
i|i|
j|j|
j|j|
sequences
extracted
thanks
deconcatenation
concatenation
deﬁned
conﬂuence
law
given
combinatorially
according
deconcatenation
occurs
associative-poisson
case
mixed
distributive
law
given
com-
binatorially
hopf
zinbiel-leibniz
case
remark
ﬁrst
concatenation
obtained
recursively
=xk≥1
δv1
...
vk∈f1
deﬁne
previously
operations
conﬂuence
law
thus
given
combinatorially
term
obtained
splitting
term
uvl1
vlk
vr1
vrp
obtained
thanks
diﬀerent
elements
according
elements
mixed
coeﬃcient
term
exactlypk
p=0
cid:0
cid:1
hopf-borel
type
theorem
operads
2.7
dendriform
tridendriform
case
cases
treated
article
bdo
relations
obtained
bidendriform
bialgebra
diﬀerent
ones
obtained
foissy
foi07
2.8
2-as
dipt
case
compute
mixed
distributive
laws
operads
2-as
dipt
introduced
j.-l.
loday
ronco
lr06
lr03
recall
relation
satisﬁes
2-as
products
given
combinatorially
free
2-associative
algebra
vector
space
spanned
words
planar
trees
leaves
decorated
elements
product
concatenation
trees
word
grafting
new
root
following
dual
case
associative
operad
products
dual
coproducts
linked
mixed
distributive
law
given
fol-
lowing
array
n.u.i
n.u.i
recall
relation
satisﬁes
dipterous
products
given
combinatorially
see
lr06
lr03
free
dipterous
algebra
vector
space
spanned
words
planar
trees
leaves
decorated
elements
product
concatenation
trees
word
given
recursively
trees
...
grafting
trees
new
root
coproduct
given
considering
unique
leftmost
path
root
tree
ﬁrst
node
arity
diﬀerent
two
path
trivial
arity
root
two
many
term
coproduct
edges
path
term
obtained
edge
deleting
edges
starting
vertices
path
root
reordering
terms
according
previous
recursive
equation
burgunder
delcroix-oger
example
2.8.1.
example
dipterous
product
coproduct
pre-
sented
cba
cba
cba
cba
cba
products
dual
coproducts
linked
following
mixed
distributive
law
according
edge
comes
n.u.i
operation
sweedler
nota-
tion
coproduct
references
bcr15
emily
burgunder
pierre-louis
curien
maria
ronco
free
algebraic
struc-
bdo
tures
permutohedra
algebra
2015
emily
burgunder
b´er´enice
delcroix-oger
rigidity
theorems
dendriform
tridendriform
algebras
preparation
bdom
emily
burgunder
b´er´enice
delcroix-oger
dominique
manchon
op-
bec69
ber89
erad
never
free
prelie
algebra
preparation
jon
beck
distributive
laws
sem
triples
categorical
homology
the-
ory
eth
z¨urich
1966/67
pages
119–140
springer
berlin
1969
claude
berge
hypergraphs
volume
north-holland
mathematical
library
north-holland
publishing
co.
amsterdam
1989.
combinatorics
ﬁnite
sets
bor53
armand
borel
sur
cohomologie
des
espaces
ﬁbr´es
principaux
des
espaces
homog
enes
groupes
lie
compacts
ann
math
57:115–207
1953
emily
burgunder
mar´ıa
ronco
tridendriform
structure
combinatorial
hopf
algebras
algebra
324
:2860–2883
2010
br10
hopf-borel
type
theorem
operads
bur73
bur08
bur10
cha01
´elisabeth
burroni
lois
distributives
mixtes
acad
sci
paris
s´er
a-b
276
a897–a900
1973
emily
burgunder
inﬁnite
magmatic
bialgebras
adv
appl
math.
:309–
329
2008
emily
burgunder
symmetric
version
kontsevich
graph
complex
leib-
niz
homology
lie
theory
:127–165
2010
fr´ed´eric
chapoton
endofoncteur
cat´egorie
des
op´erades
dialgebras
related
operads
volume
1763
lecture
notes
math.
pages
105–110
springer
berlin
2001
che57
kuo-tsai
chen
integration
paths
geometric
invariants
generalized
cl01
dl02
dg14
baker-hausdorﬀ
formula
ann
math
65:163–178
1957
fr´ed´eric
chapoton
muriel
livernet
pre-lie
algebras
rooted
trees
operad
internat
math
res
notices
:395–408
2001
vladimir
dotsenko
james
griﬃn
cacti
ﬁltered
distributive
laws
al-
gebr
geom
topol.
:3185–3225
2014
askar
dzhumadil′daev
clas
l¨ofwall
trees
free
right-symmetric
algebras
free
novikov
algebras
identities
homology
homotopy
appl.
part
:165–190
2002.
roos
festschrift
volume
b´er´enice
delcroix-oger
incidence
hopf
algebra
hypertree
posets
s´em
lothar
combin.
art
b72d
2014/15
b´er´enice
delcroix-oger
hyperarbres
partitions
semi-point´ees
aspects
com-
binatoires
alg´ebriques
homologiques
phd
thesis
universit´e
lyon
2014
dot07
vladimir
dotsenko
operadic
approach
deformation
quantization
com-
do14
do15
fm97
foi07
foi15
fre06
patible
poisson
brackets
gen.
lie
theory
appl.
:107–115
2007
thomas
fox
martin
markl
distributive
laws
bialgebras
co-
homology
operads
proceedings
renaissance
conferences
hartford
ct/luminy
1995
volume
202
contemp
math.
pages
167–205
amer
math
soc.
providence
1997
lo¨ıc
foissy
bidendriform
bialgebras
trees
free
quasi-symmetric
functions
pure
appl
algebra
209
:439–459
2007
lo¨ıc
foissy
hopf
algebra
fliess
operators
dual
pre-lie
algebra
comm
algebra
:4528–4552
2015
benoit
fresse
th´eorie
des
op´erades
koszul
homologie
des
alg
ebres
poisson
ann
math
blaise
pascal
:237–312
2006
hnt08
florent
hivert
jean-christophe
novelli
jean-yves
thibon
commutative
hof10
hv15
combinatorial
hopf
algebras
algebraic
combin.
:65–95
2008
eric
hoﬀbeck
poincar´e-birkhoﬀ-witt
manuscripta
math.
131
1-2
:87–110
2010
eric
hoﬀbeck
christine
vespa
leibniz
homology
lie
algebras
functor
homology
pure
appl
algebra
219
:3721–3742
2015
criterion
koszul
operads
liv06
muriel
livernet
rigidity
theorem
pre-lie
algebras
pure
appl
algebra
207
:1–18
2006
lod95
lod93
lmw15
muriel
livernet
bachuki
mesablishvili
robert
wisbauer
generalised
bialgebras
entwined
monads
comonads
pure
appl
algebra
219
:3263–3278
2015
jean-louis
loday
une
version
non
commutative
des
alg
ebres
lie
alg
ebres
leibniz
enseign
math
3-4
:269–293
1993
jean-louis
loday
cup-product
leibniz
cohomology
dual
leibniz
alge-
bras
math
scand.
:189–196
1995
jean-louis
loday
generalized
bialgebras
triples
operads
ast´erisque
320
x+116
2008
jean-louis
loday
mar´ıa
ronco
alg
ebres
hopf
colibres
math
acad
sci
paris
337
:153–158
2003
lod08
lr03
les
lr06
lv12
burgunder
delcroix-oger
jean-louis
loday
mar´ıa
ronco
structure
cofree
hopf
algebras
reine
angew
math.
592:123–155
2006
jean-louis
loday
bruno
vallette
algebraic
operads
volume
346
grundlehren
der
mathematischen
wissenschaften
fundamental
principles
mathematical
sciences
springer
heidelberg
2012
mar96
martin
markl
distributive
laws
koszulness
ann
inst
fourier
grenoble
mb14
nt06
:307–323
1996
lucas
mason-brown
natural
structures
diﬀerential
geometry
2014
jean-christophe
novelli
jean-yves
thibon
construction
trig
ebres
den-
driformes
math
acad
sci
paris
342
:365–369
2006
oge13a
b´er´enice
oger
action
symmetric
groups
homology
hypertree
posets
algebraic
combin.
:915–945
2013
oge13b
b´er´enice
oger
decorated
hypertrees
combin
theory
ser
120
:1871–
pat93
zas02
1905
2013
fr´ed´eric
patras
d´ecomposition
poids
des
alg
ebres
hopf
ann
inst
fourier
grenoble
:1067–1087
1993
thomas
zaslavsky
perpendicular
dissections
space
discrete
comput
geom.
:303–351
2002
universit´e
paul
sabatier
institut
math´ematiques
toulouse
118
route
narbonne
f-31062
toulouse
cedex
france
e-mail
address
burgunder
math.univ-toulouse.fr
bdo
universit´e
paris
denis
diderot
institut
recherche
informa-
tique
fondamentale
case
7014
f-75205
paris
cedex
france
e-mail
address
bdelcroix
irif.fr
