invariants
recursive
families
graphs
wesley
chorney
karen
yeats
abstract
invariant
deﬁned
schnetz
arithmetic
graph
invariant
created
towards
better
understanding
feynman
integrals
paper
looks
graph
families
interest
focus
decompleted
toroidal
grids
speciﬁcally
invariant
shown
zero
decompleted
non-skew
toroidal
grids
also
calculate
family
graphs
called
ladders
finally
show
methods
applied
graph
recursive
structure
ﬁxed
introduction
given
connected
4-regular
graph
let
γ\v
call
decompletion
write
cid:101
way
thought
feynman
graph
theory
four
external
edges
note
general
bad
notation
since
decompletion
graph
non-unique
however
graphs
appearing
document
decompletions
one
see
isomorphic
decompletion
operation
well-deﬁned
deﬁnition
1.1.
assign
edge
variable
kirchhoﬀ
polynomial
sum
spanning
trees
use
kirchhoﬀ
polynomial
deﬁne
feynman
period
cid:80
i−1dα1
···
cid:99
dαi
···
dα|e
cid:99
dαi
corresponds
diﬀerential
αi≥0
appearing
product
feynman
period
interesting
quantum
ﬁeld
theoretically
mathematically
point
view
quantum
ﬁeld
theory
important
part
complete
feynman
integral
see
mathematically
feynman
period
right
kind
object
try
understand
algebro-geometric
tools
substantial
work
last
decade
taking
approach
see
schnetz
deﬁned
invariant
given
order
better
under-
stand
integrals
deﬁnition
1.2.
let
prime
ﬁnite
ﬁeld
elements
let
denote
cardinality
aﬃne
algebraic
variety
suppose
least
vertices
invariant
mod
wesley
chorney
supported
nserc
usra
karen
yeats
supported
nserc
dis-
covery
grant
cid:88
cid:89
cid:54
cid:90
wesley
chorney
karen
yeats
invariant
well-deﬁned
provided
least
three
vertices
predicted
invariant
symmetries
feynman
period
knowing
invariant
provides
important
information
feynman
period
graphs
main
interest
document
toroidal
grids
speciﬁcally
2-dimensional
ones
interesting
quantum
ﬁeld
theory
perspective
also
graph
theoretically
instance
shown
graph
face
width
embedded
torus
contains
certain
toroidal
grid
minor
furthermore
maximal
run
length
bent
hamilton
cycle
properties
investigated
deﬁnition
1.3.
toroidal
grid
graph
deﬁned
following
way
given
two
integer
vectors
take
integer
lattice
points
ﬁrst
quadrant
edges
joining
lattice
points
distance
result
modulo
relation
identiﬁes
two
lattice
points
diﬀerence
toroidal
grid
indexed
toroidal
grid
cid:54
called
skew
toroidal
grid
non-skew
proposition
1.4.
toroidal
grid
indexed
cartesian
product
cycles
cycle
vertices
proof
follows
directly
deﬁnition
cid:3
example
1.5.
let
figure
shows
lattice
resulting
graph
notice
graph
corresponds
exactly
figure
example
toroidal
grid
sources
involving
toroidal
grids
include
skew
toroidal
grids
deﬁnition
appropriate
relative
primality
parameters
toroidal
grids
also
un-
derstood
certain
circulant
graphs
deﬁnition
1.6.
circulant
graph
graph
vertices
edge
vertices
cid:96
mod
cid:96
mod
cid:96
proposition
1.7.
let
skew
toroidal
grid
parametrized
gcd
isomorphic
circulant
graph
ckm
proof
let
skew
toroidal
grid
parametrized
take
integer
lattice
points
ﬁrst
quadrant
coordinate
less
coordinate
less
representatives
vertices
next
label
vertices
indicate
circulant
structure
let
vertex
labelled
mod
see
figure
every
label
used
exactly
row
grid
uses
precisely
labels
congruent
modulo
since
gcd
runs
equivalence
classes
runs
correspondsto
invariants
recursive
families
graphs
horizontal
edges
grid
connect
additionally
horizontal
toroidality
edges
connecting
gives
gap
edges
circulant
structure
vertical
edges
grid
connect
1+am+
m−b−1
1+am+
m−b
m−1
remaining
toroidality
gives
edges
connecting
1+am
a−l
m−1
1+am−l
gives
gap
edges
circulant
structure
accounts
edges
cid:3
figure
toroidal
grid
labelling
cid:101
mod
examples
kinds
families
circulant
graphs
whose
invariants
mod
studied
particular
know
decompleted
toroidal
grid
parametrized
similar
result
non-skew
toroidal
grids
proposition
1.8.
let
non-skew
toroidal
grid
parametrized
gcd
isomorphic
circulant
graph
ckm
proof
similarly
previous
proposition
let
toroidal
grid
parametrized
take
integer
lattice
points
ﬁrst
quadrant
coordinate
less
coordinate
less
representatives
vertices
label
vertices
indicate
circulant
structure
speciﬁcally
label
vertex
mod
row
uses
labels
congruent
mod
since
gcd
every
label
occurs
exactly
graph
cycles
row
give
edges
linking
vertices
distance
circulant
structure
argument
reversed
gives
column
cycles
give
edges
linking
vertices
distance
circulant
structure
cid:3
accounts
edges
note
non-skew
case
give
family
circulants
form
studied
gap
parameters
depend
size
purposes
invariant
new
graphs
consider
main
object
study
paper
...
...
...
...
...
...
...
m−2
l1+
m−1
l11+l1+m1+
k−1
m1+
k−1
m+l1+
k−1
m−1
wesley
chorney
karen
yeats
document
ﬁrst
deﬁne
give
preliminary
results
order
move
algebraic
incarnation
invariant
towards
graph-theoretic
combinato-
rial
understanding
methods
compute
toroidal
grid
arbitrary
length
constructed
-cycles
also
use
methods
show
capped
x-ladder
result
already
known
proved
easily
via
methods
finally
show
recursive
family
graphs
ﬁxed
prime
invariant
computed
graphs
family
ﬁnite
procedure
using
methods
giving
possibility
unfortunately
ineﬃcient
algorithm
graph
polynomials
herein
deﬁne
slew
polynomials
useful
moving
towards
graph-
theoretic
understanding
invariant
matrix-tree
theorem
express
determinant
follows
choosing
arbitrary
orientation
edges
let
signed
incidence
matrix
rows
indexing
vertices
columns
indexing
edges
one
row
removed
let
matrix
edge
variables
diagonal
zeroes
elsewhere
let
cid:21
cid:20
det
proof
found
determinant
expanded
using
schur
complement
cauchy-binet
formula
let
sets
indices
matrix
rows
indexed
elements
columns
indexed
elements
removed
deﬁne
dodgson
polynomials
brown
deﬁnition
2.1.
let
subsets
let
|i|
|j|
det
|ae=0
e∈k
graph
made
clear
context
leave
subscript
similarly
empty
leave
well
note
cid:54
row
column
corresponding
removed
equivalent
graph
speciﬁcally
similarly
cid:54
edge
set
zero
removed
matrix
taking
monomials
appear
equivalently
monomials
cut
spanning
structure
speciﬁcally
ψie
g\e
g/e
equivalences
simplify
steps
calculations
follow
kept
mind
reader
dodgson
polynomials
expressed
terms
spanning
forests
following
span-
ning
forest
polynomials
allow
relatively
straightforward
manner
invariants
recursive
families
graphs
deﬁnition
2.2.
let
set
partition
subset
deﬁne
cid:88
cid:89
cid:54
sum
runs
spanning
forests
bijection
trees
parts
vertices
belonging
part
lie
corresponding
tree
note
trees
consisting
single
vertex
allowed
illustrate
vertices
belonging
diﬀerent
parts
using
diﬀering
large
vertex
shapes
example
2.3.
figure
shows
graph
illustrated
partition
cid:4
cid:35
resulting
spanning
forest
polynomial
figure
spanning
forest
example
expression
dodgson
polynomials
terms
spanning
forest
polynomials
given
following
proposition
proposition
2.4.
let
sets
edge
indices
|i|
|j|
cid:88
±φp
i∪j∪k
sum
runs
set
partitions
endpoints
edges
additional
property
forests
corresponding
become
trees
g\i/
g\j/
also
shows
determine
sign
however
computations
modulo
sign
irrelevant
proposition
spanning
forest
polynomials
typically
arise
graph
clear
leave
subscript
case
assumed
graph
working
necessary
edges
left
remains
give
expression
invariant
calculated
dodgson
polynomials
useful
purpose
deﬁnition
2.5.
let
distinct
edge
indices
5-invariant
depending
ψij
ψikm
jlm
ψik
ψijm
klm
sign
independent
order
shown
lemma
following
lemma
corollary
expressions
invariant
proposition
2.6.
suppose
satisﬁes
2|v
let
distinct
edge
indices
let
prime
ψik
mod
ψij
klψik
mod
abcde
wesley
chorney
karen
yeats
mod
denotes
cardinality
aﬃne
variety
note
graphs
interest
theory
decompleted
4-regular
graphs
reader
easily
verify
using
expression
converting
spanning
forest
polynomials
yield
graph
satisﬁes
criterion
give
one
last
result
lemma
proof
chevalley-warning
theorem
general
method
computing
invariant
outlined
lemma
2.7.
let
polynomial
degree
variables
integer
coeﬃcients
coeﬃcient
xp−1
p−1
modulo
xp−1
···
xp−1
proof
found
section
lemma
key
importance
ﬁnding
size
aﬃne
variety
modulo
invariant
given
graph
one
expressions
proposition
2.6
working
modulo
need
assign
edge
graph
two
polynomials
simplify
convert
polynomials
spanning
forest
polynomials
proposition
2.4.
useful
since
ﬁxed
many
ﬁnite
ways
compute
including
simple
brute
force
counting
denominator
reduction
however
using
proposition
2.6
lemma
2.7
particularly
useful
unlike
techniques
ﬁrst
let
interpret
calculations
combinatorially
edge
assignments
importantly
allow
work
recursively
obtain
ﬁnite
formulas
entire
families
graphs
explicit
calculations
follow
clarify
matters
non-skew
toroidal
grids
section
show
decompleted
non-skew
toroidal
grids
proof
done
ﬁxing
considering
family
toroidal
grids
indexed
illustrate
argument
ﬁrst
prove
case
separately
proceed
general
case
interesting
decompleted
non-skew
toroidal
grids
invariant
important
graph
feynman
period
less
maximal
transcendental
weight
size
graph
see
known
weight
drop
see
interpretation
less
clear
know
reasons
may
graph
see
none
apply
non-skew
toroidal
grids
new
weight
drop
graphs
likely
quite
sparse
one
remain
pessimistic
many
non-skew
toroidal
grids
turn
weight
drop
however
non-skew
toroidal
grids
still
provide
interesting
family
whether
reasons
weight
drop
possibly
even
giving
new
families
weight
drop
graphs
calculating
graphs
would
particularly
interesting
order
try
distinguish
diﬀerent
possibilities
proposition
3.1.
let
decompleted
toroidal
grid
constructed
3-cycles
edges
vertices
labelled
ﬁgure
corresponds
p7,10
proof
using
5-invariant
calculate
ψ12,45
invariants
recursive
families
graphs
figure
3-toroidal
grid
ψ134,235
graph
ﬁgure
disregard
term
since
ψ123,345
compute
recurrence
obtain
coeﬃcient
α1α2
···
α|e
figure
necessary
write
indicate
n-dependence
number
vertices
let
ψhn
lemma
2.7
need
assign
edge
either
ψhφ
note
polynomials
calculated
originally
relabelled
match
say
edge
assigned
appears
corresponding
spanning
tree
spanning
forest
structure
assignment
edges
invariant
symmetry
swap
vertices
...
pairwise
ﬂipped
assignment
valid
well
cancel
modulo
likewise
ψhφ
also
every
case
vertex
disconnected
thus
one
must
yields
contribution
modulo
fact
claim
ψhφ
symmetry
get
nonzero
contribution
must
edges
2,4
would
connect
vertices
similarly
must
connects
finally
well
thus
must
neither
edges
get
cycle
thus
term
contribute
turn
attention
ψhφ
claim
similarly
ψhφ
yields
contribution
modulo
case
cycle
furthermore
avoid
disconnecting
must
similarly
must
disconnected
...
...
...
...
...
...
abcdef12345
...
...
...
...
...
...
...
...
...
abcdeyz124356
wesley
chorney
karen
yeats
therefore
rest
must
spanned
becomes
±ψhn−3
avoid
cycles
must
connect
spanning
tree
structure
must
connect
one
whole
case
contribution
ψhn−3φ
hn−3
hn−3
case
cycle
well
edge
disconnected
rest
graph
instead
happen
thus
edge
disconnected
well
disconnected
thus
permissible
assignment
becomes
ψhn−3
edges
connect
vertices
hn−3
labelled
ﬁgure
becomes
hn−3
cancels
case
therefore
cid:3
next
generalize
arguments
previous
section
order
show
non-skew
toroidal
grid
invariant
zero
proposition
3.2.
let
decompleted
toroidal
grid
constructed
-cycles
proof
labelled
ﬁgure
begin
ψ12,45
ψ15,24
proceed
assign
edges
according
lemma
2.7.
avoid
disconnecting
must
assign
edges
ψ12,45
thus
two
factors
ψ12,45
ψ1536,2436
ﬁgure
ψ1536,2436
simply
following
result
figure
decompleted
non-skew
toroidal
grid
ψ12,45
respect
labelling
ψ12,45
notice
possesses
vertical
symmetry
ﬂip
goes
etc
thus
spanning
forest
polynomials
must
invariant
vertical
ﬂip
order
make
nonzero
contribution
modulo
proof
previous
proposition
see
contribute
modulo
notice
possesses
horizontal
symmetry
ﬂip
goes
ab213546
...
...
...
...
invariants
recursive
families
graphs
figure
etc
remain
ﬁxed
terms
must
invariant
horizontal
ﬂip
contribute
modulo
thus
need
consider
calculating
edge
assignments
ψ12,45
consider
path
particular
consider
possible
assignments
edges
shown
ﬁgure
figure
labelling
around
edge
assignments
must
invariant
horizontal
vertical
ﬂip
furthermore
since
entirely
disconnected
either
factor
possibilities
assigning
edges
one
factor
proceed
via
cases
case
suppose
edges
assigned
consider
assignment
vertices
connect
via
edges
connected
likewise
avoid
disconnecting
graph
must
connect
exactly
one
exactly
one
however
none
possibilities
invariant
horizontal
vertical
ﬂip
therefore
case
contribute
case
suppose
edges
assigned
connected
factor
edges
similarly
previous
case
considering
half
edge
assignment
connect
exactly
one
must
connect
exactly
one
since
must
tree
however
like
case
none
conﬁgurations
invariant
horizontal
vertical
ﬂip
case
contribute
...
...
...
...
badecfc789f101112
...
ghij
wesley
chorney
karen
yeats
therefore
cid:3
x-ladders
call
graphs
ﬁgure
x-ladders
either
symmetric
capped
based
ends
invariant
decompleted
capped
x-ladders
well
known
shown
zero
using
double-triangle
reduction
see
section
5.6
graphs
particularly
interesting
invariants
indicating
drop
transcendental
weight
fact
calculated
maximal
multiple
weight
drop
using
methods
get
easy
alternate
way
see
capped
x-ladders
applies
minor
modiﬁcations
symmetric
ladders
deﬁnition
see
higher
weight
drop
invariant
suggestive
arguments
essentially
used
symmetries
one
ladder
leaving
symmetries
remaining
potentially
somehow
showing
weight
drops
figure
capped
left
symmetric
right
x-ladders
proposition
4.1.
let
decompleted
capped
x-ladder
labelled
ﬁgure
10.
figure
10.
corresponds
p6,3
proof
calculate
ψ1,3
ψ12,32
remove
edges
vertex
disconnected
graph
ﬁgure
polynomials
notice
invariant
swapping
vertices
usual
proceed
edge
assignments
according
lemma
2.7
edge
assignment
invariant
swap
irrelevant
modulo
show
invariant
assignments
...
...
...
...
...
...
abcd123
...
...
...
invariants
recursive
families
graphs
figure
11.
assignment
one
factor
would
need
edges
excluding
assignment
appear
one
term
would
create
cycle
invalid
possibilities
course
neither
assigned
either
cid:3
therefore
proposition
4.2.
let
decompleted
symmetric
x-ladder
labelled
ﬁgure
12.
figure
12.
proof
calculate
ψ12,34
ψ13,24
remove
edges
isolated
vertex
graph
ﬁgure
get
previous
proposition
graph
invariant
swapping
vertices
figure
13.
therefore
non-zero
contribution
must
able
assign
either
edges
one
polynomials
however
neither
represent
valid
assignment
edges
terms
therefore
cid:3
...
...
...
1423abcdz1234abcde
...
...
...
abcd
...
...
...
yz1423
wesley
chorney
karen
yeats
tractability
methods
thus
far
looked
invariants
indeed
using
methods
yields
far
many
cases
conveniently
calculated
without
aid
computer
however
aid
invariant
ﬁxed
prime
calculated
suﬃciently
recursive
family
graphs
ﬁnite
amount
time
graphs
family
generalizes
results
ﬁniteness
result
certain
families
circulants
results
artiﬁcially
unnecessarily
restricted
number
initial
edges
recursive
structure
begins
applied
vastly
smaller
class
graphs
note
invariants
calculated
present
paper
always
found
complete
cancellations
general
picture
little
diﬀerent
proposition
3.1
gives
best
illustration
two
cases
reduced
product
polynomials
similar
product
polynomials
hn−3
case
proposition
3.1
two
cases
cancelled
general
need
would
obtain
recurrence
gives
explicit
examples
recurrences
necessary
method
holds
much
generally
appreciated
therein
ﬁrst
take
notion
recursively
constructible
family
graphs
intu-
itively
recursively
constructible
family
graphs
family
built
initial
graph
repeated
ﬁxed
sequence
certain
basic
graph
operations
edge
deletion
included
allowable
operations
particular
element
family
edges
connecting
back
initial
piece
need
formalize
notion
see
section
given
graph
set
let
neighbourhood
set
vertices
adjacent
vertex
deﬁnition
5.1.
sequence
graphs
n≥0
recursively
constructible
family
graphs
exists
positive
integer
labelled
graph
gn−1
ngn
cid:83
gn−1
cid:83
graph
induced
cid:83
i=0
wn−i
i=1
en−i
i=0
wn−i
equals
note
equals
last
point
isomorphism
labels
must
also
match
graph
induced
always
labelled
graph
noy
rib´o
observe
section
conditions
imply
operations
used
move
gn−1
recursive
family
following
i=0
wn−i
adding
vertices
edges
incident
vertices
w0∪
cid:83
removing
edges
one
end
end
cid:83
way
independent
i=0
wn−i
note
every
family
graphs
paper
either
decompletion
recursively
constructible
family
graphs
proving
algorithmic
theorem
give
following
lemma
lemma
5.2.
given
spanning
forest
polynomial
graph
assignment
edges
yields
sum
spanning
forest
polynomials
graph
edges
removed
isolated
vertices
removed
furthermore
vertices
involved
partitions
deﬁning
new
spanning
forest
polynomials
involve
vertices
already
partitions
input
spanning
forests
vertices
incident
assigned
edges
proof
show
one
edge
deletion
satisﬁes
lemma
one
edge
contraction
iterating
process
one
get
possible
edge
assignment
invariants
recursive
families
graphs
sequence
contractions
deletions
creates
impossible
assignment
one
cycles
connects
vertices
diﬀerent
parts
partition
etc
corresponding
collection
spanning
forest
polynomials
trivial
equal
zero
given
edge
spanning
forest
polynomial
cases
arise
cutting
straightforward
corresponds
assigning
case
simply
obtain
g\e
result
isolated
vertices
done
want
express
result
spanning
forest
polynomial
graph
vertex
removed
part
part
size
occur
simply
get
spanning
forest
polynomial
part
removing
vertex
graph
part
partition
gives
polynomial
spanning
forest
polynomial
desired
graph
consider
contracting
corresponds
assigning
distinct
parts
get
allowed
next
suppose
together
part
resulting
polynomial
cid:48
cid:48
identiﬁed
interpret
g\e
break
apart
tree
corresponding
part
way
diﬀerent
halves
tree
thus
partition
cid:48
cid:48
resulting
partitioning
part
containing
two
parts
one
containing
containing
get
spanning
forest
polynomial
partition
g/e
one
almost
situation
previous
case
except
need
add
part
containing
ﬁrst
partition
part
two
one
containing
containing
finally
suppose
neither
let
vertex
corresponding
g/e
similarly
previous
cases
means
tree
containing
g/e
must
broken
apart
g\e
diﬀerent
halves
know
part
i=1
φp1
···
pj∪
···
tree
corresponds
cid:3
argue
previous
case
term
sum
g/e
cid:80
g/e
lemma
able
prove
following
result
theorem
5.3.
let
n≥0
recursively
constructible
family
graphs
2|v
|+2
suﬃciently
large
invariant
ﬁxed
prime
calculated
using
methods
ﬁnite
amount
time
graphs
family
cid:83
note
condition
2|v
guarantee
correct
relation-
ship
degree
number
variables
using
lemma
2.7
output
proposition
2.6.
proof
fix
let
n≥0
n≥0
recursive
family
graphs
let
i=1
en−i
deﬁnition
recursively
constructible
family
let
gn\s
begin
assume
|s|
suﬃciently
large
2|v
starting
kirchhoﬀ
polynomial
proposition
2.6
lemma
2.7
process
edges
order
calculate
counting
assignments
edges
certain
products
spanning
forest
polynomials
using
lemma
5.2
assign
remaining
edges
obtain
expression
sum
edge
assignments
products
spanning
forest
polynomials
furthermore
i=1
em−i
vertices
involved
partitions
endpoints
edges
cid:83
must
vertices
copy
wesley
chorney
karen
yeats
next
using
lemma
5.2
assign
edges
already
assigned
remaining
graph
hm−1
polynomial
side
summand
sum
products
spanning
forest
polynomials
become
sum
products
spanning
forest
polynomials
hm−1
cases
vertices
involves
partitions
must
appropriate
copy
product
spanning
forest
polynomials
involve
vertices
regardless
whether
appeared
expansion
ﬁnite
graph
ﬁnite
number
vertices
ﬁnite
number
partitions
subsets
vertices
also
ﬁnitely
many
lists
partitions
call
set
products
partitions
view
product
spanning
forest
polynomials
involving
vertices
list
partitions
therefore
map
described
previous
paragraph
takes
product
spanning
forest
polynomials
sum
products
hm−1
map
map
independent
suﬃciently
large
recursive
structure
family
let
correspond
cardinality
variety
deﬁned
vanishing
product
spanning
forest
polynomials
corresponding
level
map
described
gives
system
linear
recurrences
relating
am−1
system
always
solvable
standard
ﬁnite
techniques
values
ﬁnite
number
small
values
computed
directly
ﬁnite
amount
time
counting
edge
assignments
working
directly
variety
hence
obtain
base
cases
recursion
deal
small
furthermore
particular
linear
combination
giving
also
independent
suﬃciently
large
recursive
structure
family
therefore
solution
system
linear
recurrences
gives
expression
suppose
|s|
suﬃciently
large
assign
edges
also
em−1
needed
assign
edges
case
follows
cid:3
conclusion
non-skew
toroidal
grids
large
family
graphs
know
previous
families
known
double
triangle
small
edge
vertex
cuts
see
none
apply
toroidal
grids
non-skew
toroidal
grid
know
non-skew
toroidal
grids
primes
either
way
would
interesting
giving
either
new
family
weight
drop
graphs
see
weight
sense
giving
family
graphs
reasons
weight
drop
x-ladder
result
hints
structure
higher
weight
drops
may
visible
techniques
larger
ladder
independent
symmetries
forced
finally
view
theorem
5.3
in-principal
algorithms
calculating
invari-
ants
much
larger
class
families
graphs
known
unfortunately
algorithms
grow
exponentially
every
interesting
parameter
prac-
tical
unless
simpliﬁcations
found
small
cases
probably
tractable
would
good
testing
ground
possibility
ﬁnding
simpliﬁcations
furthermore
in-principle
algorithms
tell
something
invariants
recursive
families
graphs
kinds
solutions
appear
must
come
solving
systems
recur-
rences
strongly
restricts
kinds
sequences
appear
striking
contrast
sequences
appear
graph
ﬁxed
varies
see
references
james
zeroes
polynomials
ﬁnite
ﬁelds
amer
math.
:255-261
1964
spencer
bloch
h´el
ene
esnault
dirk
kreimer
motives
associated
graph
polynomials
commun
math
phys
:181-225
2006.
arxiv
math/0510011
david
broadhurst
oliver
schnetz
algebraic
geometry
informs
perturbative
quantum
ﬁeld
the-
ory
proc
sci
211:078
2014.
arxiv:1409.5570
francis
brown
periods
feynman
integrals
arxiv:0910.0114
francis
brown
oliver
schnetz
duke
math
161
:1817-1862
2012.
arxiv:1006.4064
francis
brown
oliver
schnetz
modular
forms
quantum
ﬁeld
theory
commun
num
theor
phys
07:293-325
2013.
arxiv:1304.5342
francis
brown
oliver
schnetz
karen
yeats
properties
invariants
feynman
graphs
advances
theoretical
mathematical
physics
:323-362
2014.
arxiv:1203.0188
francis
brown
karen
yeats
spanning
forest
polynomials
transcendental
weight
feynman
graphs
commun
math
phys.
301
:357-382
2011.
arxiv:0910.5429
maurits
graaf
alexander
shrijver
grid
minors
graphs
torus
combin
theory
ser
:57-62
1994
margaret
doig
maximum
run
length
toroidal
grid
graph
arxiv
math/0412530
dmitry
doryn
invariant
invariant
arxiv:1312.7271
marc
noy
ares
rib
recursively
constructible
families
graphs
adv
appl
math.
:350-
363
2004
matilde
marcolli
feynman
motives
world
scientiﬁc
2010
erik
panzer
oliver
schnetz
galois
coaction
periods
arxiv:1603.04289
frank
ruskey
joe
sawada
bent
hamilton
cycles
d−dimensional
grid
graphs
electron
combin.
2003
oliver
schnetz
census
φ4-transcendentals
commun
number
theory
phys.
:1-48
2010.
arxiv:0801.2856
oliver
schnetz
quantum
ﬁeld
theory
electron
comb.
p102
2011.
arxiv:0909.0905
aleksander
vlasev
karen
yeats
four-vertex
quadratic
spanning-forest
polynomial
identity
electron
lin
alg.
:923-941
2012.
arxiv:1106.2869
karen
yeats
invariants
circulant
graphs
commun
number
theory
phys.
:63-86
2016.
arxiv:1507.06974
