discret
mathemat
theoret
comput
scienc
dmtc
vol
neighbour
bipartit
graph
kasper
szabo
lyngsi
technic
univers
denmark
denmark
receiv
revis
apr
accept
may
let
set
integ
graph
said
exist
two
adjac
vertex
differ
sum
incid
paper
characteris
bridgeless
bipartit
graph
tree
without
particular
problem
belong
graph
graph
keyword
bipartit
graph
introduct
problem
investig
paper
highli
relat
formul
one
way
approach
conjectur
see
exampl
studi
graph
two
integ
deﬁn
follow
way
graph
said
exist
map
pair
adjac
vertex
denot
edg
incid
respect
call
neighbour
weight
investig
problem
determin
whether
given
bipartit
graph
restrict
bipartit
graph
motiv
result
dudek
wajc
say
problem
gener
graph
particular
ask
natur
question
whether
problem
polynomi
bipartit
graph
consid
problem
result
present
paper
answer
afﬁrm
bridgeless
bipartit
graph
tree
also
prove
follow
theorem
theorem
properti
investig
problem
determin
whether
graph
weight
follow
proper
vertex
assign
product
incid
colour
veriﬁ
variou
class
bipartit
graph
exampl
bipartit
graph
distribut
creativ
common
attribut
intern
licens
issn
everi
bipartit
graph
author
kasper
szabo
lyngsi
minimum
degre
least
also
ask
character
tite
graph
particular
tree
properti
mention
result
present
paper
give
character
tree
bridgeless
bipartit
graph
bipartit
graph
without
said
bad
thomassen
zhang
gave
complet
characteris
bipartit
graph
without
properti
graph
odd
deﬁn
follow
take
collect
cycl
length
modulo
edg
colour
altern
red
green
form
connect
simpl
graph
past
cycl
togeth
one
one
fashion
along
green
edg
final
replac
everi
green
edg
multipl
edg
multipl
graph
one
edg
two
vertex
also
call
odd
easili
check
odd
properti
mention
graph
characteris
bipartit
graph
without
theorem
sinc
odd
recognis
answer
part
problem
concern
point
theorem
extend
posit
weight
distinct
pariti
also
remark
bipartit
graph
minimum
degre
least
pair
integ
distinct
pariti
thu
remain
open
characteris
bipartit
graph
minimum
degre
gave
follow
exampl
bad
graph
two
connect
path
length
note
construct
inﬁnit
number
bad
graph
properti
follow
procedur
take
two
graph
without
join
path
length
modulo
even
generalis
procedur
let
integ
let
path
length
modulo
join
intermedi
vertex
bad
graph
edg
join
bad
graph
see
figur
creat
new
bad
graph
connect
bipartit
graph
without
odd
fig
construct
bad
graph
although
preced
paragraph
show
larg
class
bipartit
graph
without
list
still
complet
even
tree
demonstr
tree
figur
neighbour
bipartit
graph
fig
tree
without
thu
larg
class
bad
graph
odd
seem
differ
howev
note
procedur
alway
creat
bridg
give
hint
might
behav
similar
way
allow
bridg
inde
true
prove
section
theorem
connect
bridgeless
bipartit
graph
without
odd
mention
theorem
odd
recognis
polynomi
time
answer
part
problem
concern
bridgeless
bipartit
graph
section
provid
addit
oper
construct
tree
without
class
tree
without
obtain
use
oper
call
recognis
polynomi
time
whilst
class
difﬁcult
describ
show
give
full
characteris
bad
tree
theorem
tree
unless
member
taken
togeth
theorem
show
mark
differ
problem
inde
bridgeless
bipartit
graph
theorem
show
class
graph
without
class
graph
without
precis
hand
theorem
show
far
case
tree
bridgeless
bipartit
graph
without
weight
vertex
call
sum
let
bipartit
graph
map
given
weight
degre
cent
vertex
hold
induc
colour
induc
conveni
weight
degre
vertex
also
denot
say
neighbour
proper
pair
induc
proper
two
adjac
vertex
weight
degre
say
edg
conﬂict
two
adjac
vertex
weight
degre
pariti
call
edg
pariti
conﬂict
note
pariti
conﬂict
necessarili
conﬂict
map
span
subgraph
vertex
mod
say
modulo
factor
play
import
role
investig
bipartit
graph
particular
follow
result
mention
lemma
mod
contain
modulo
let
connect
graph
map
satisfi
kasper
szabo
lyngsi
also
point
immedi
impli
bipartit
graph
one
partit
set
even
size
number
differ
pariti
sinc
weight
degre
vertex
belong
bipartit
set
get
odd
weight
degre
vertex
get
even
weight
degre
problem
reduc
case
bipartit
set
odd
size
anoth
use
tool
lemma
let
natur
number
let
connect
graph
let
lemma
independ
set
vertex
vertex
degre
least
vertex
except
possibl
one
degre
least
assum
vertex
adjac
bridg
vertex
edg
incid
delet
result
connect
graph
unless
vertex
degre
six
compon
join
two
distinct
vertex
seen
later
paper
lemma
work
well
togeth
assumpt
follow
way
let
simpl
bipartit
graph
odd
number
vertex
tion
set
let
vertex
belong
least
neighbour
cutvertex
assum
neighbour
greater
degre
vertex
said
local
maximum
degre
neighbour
degre
incid
bridg
furthermor
assum
except
case
lemma
remov
choos
neighbour
degre
ﬁnd
proper
follow
remov
edg
incid
maintain
connect
lemma
call
result
graph
first
consid
case
even
degre
lemma
ﬁnd
vertex
odd
weight
degre
vertex
even
weight
degre
extend
whole
assign
weight
edg
incid
weight
edg
pariti
conﬂict
neighbour
edg
weight
weight
degre
strictli
greater
neighbour
case
odd
degre
ﬁnd
vertex
even
weight
degre
vertex
odd
weight
degre
extend
whole
assign
weight
edg
incid
weight
edg
note
show
whenev
consid
vertex
cutvertex
ﬁnd
edg
incid
weight
pariti
conﬂict
neighbour
prove
theorem
need
three
fact
simpl
odd
formul
ma
odd
deﬁnit
contain
least
two
cycl
contain
two
adjac
vertex
least
three
neighbour
vertex
two
neighbour
unless
singl
cycl
possibl
multipl
edg
cycl
type
call
lemma
let
simpl
odd
vertex
weight
vertex
opposit
bipartit
set
get
weight
degre
vertex
get
weight
degre
neighbour
bipartit
graph
proof
proof
induct
number
vertex
easi
check
statement
true
singl
cycl
length
modulo
assum
let
vertex
two
neighbour
assum
sinc
subdivid
edg
four
vertex
preserv
conclus
lemma
thu
say
least
three
neighbour
sinc
use
induct
hypothesi
extend
whole
let
let
vertex
let
natur
number
final
let
denot
induc
let
denot
colour
obtain
replac
colour
colour
proper
say
proper
degre
increas
may
thought
neighbour
vertex
weight
lemma
let
simpl
odd
furthermor
let
two
vertex
belong
bipartit
set
possibl
proper
weight
degre
increas
weight
degre
increas
proof
first
note
case
follow
lemma
assum
proof
induct
number
vertex
easi
check
statement
hold
singl
cycl
length
modulo
proof
lemma
choos
one
say
vertex
two
neighbour
may
assum
least
three
neighbour
use
induct
hypothesi
get
proper
weight
degre
increas
easili
extend
whole
contradict
assum
one
case
similar
one
say
use
lemma
choos
special
vertex
get
vertex
opposit
bipartit
set
get
weight
vertex
get
weight
extend
whole
deﬁn
use
lemma
choos
special
vertex
get
extend
whole
deﬁn
leaf
case
one
assum
bipartit
set
start
consid
case
case
use
induct
hypothesi
choos
special
vertex
extend
let
edg
play
role
extra
weight
deﬁn
differ
weight
degre
induct
hypothesi
choos
weight
differ
avoid
conﬂict
final
deﬁn
avoid
conﬂict
case
remain
use
lemma
choos
special
vertex
extend
deﬁn
use
lemma
induct
proof
lemma
easili
deriv
lemma
kasper
szabo
lyngsi
lemma
let
odd
uniqu
obtain
replac
red
edg
edg
multipl
graph
suspend
path
suspend
cycl
path
cycl
intermedi
vertex
degre
degre
least
vertex
distinct
except
possibl
suspend
cycl
small
fact
establish
readi
proof
theorem
proof
follow
approach
proof
theorem
new
problem
aris
dealt
along
way
end
proof
reader
refer
proof
theorem
sufﬁc
prove
connect
bridgeless
bipartit
graph
without
odd
suppos
theorem
fals
let
smallest
counterexampl
among
bridgeless
partit
graph
without
odd
fewest
vertex
subject
fewest
edg
note
induct
lemma
assum
edg
multipl
greater
must
multipl
bridg
simpl
graph
underli
let
two
bipartit
set
remark
follow
lemma
assum
odd
size
first
note
vertex
adjac
one
vertex
sinc
bridgeless
multipl
least
edg
incid
graph
connect
lemma
graph
contain
span
subgraph
vertex
odd
degre
vertex
even
weight
degre
assign
weight
edg
weight
edg
get
proper
contradict
thu
assum
vertex
adjac
one
vertex
let
denot
endblock
note
impli
multipl
edg
claim
contain
suspend
path
length
assum
suspend
path
length
lemma
exist
span
subgraph
vertex
odd
degre
vertex
even
degre
construct
vertex
odd
weight
degre
vertex
even
weight
degre
assign
weight
edg
weight
edg
outsid
extend
weight
whole
graph
deﬁn
possibl
conﬂict
case
remov
edg
incid
edg
incid
still
connect
graph
avoid
situat
follow
use
lemma
redeﬁn
subgraph
vertex
odd
weight
degre
vertex
even
weight
degre
deﬁn
assign
weight
edg
weight
edg
proper
assum
remov
two
edg
incid
respect
still
connect
graph
must
cycl
go
sinc
otherwis
lie
distinct
block
sinc
degre
least
sinc
bridgeless
possibl
neighbour
bipartit
graph
remov
edg
still
connect
graph
contradict
ﬁrst
look
case
swap
weight
chang
weight
chang
pariti
weight
degre
weight
degre
redeﬁn
accordingli
put
back
give
edg
weight
give
proper
assum
actual
assum
sinc
otherwis
repeat
proof
previou
case
swap
weight
weight
degre
least
assum
cycl
go
also
otherwis
simpli
swap
weight
cycl
contain
possibl
case
consist
precis
two
connect
compon
bipartit
set
contain
exactli
one
neighbour
see
figur
let
denot
neighbour
respect
let
denot
neighbour
respect
allow
possibl
one
even
size
exampl
subgraph
consist
edg
weight
odd
number
odd
degre
vertex
possibl
odd
size
set
must
differ
pariti
particular
one
say
even
size
furthermor
proper
ﬁnd
proper
whole
graph
weight
follow
weight
degre
say
odd
pariti
bipartit
set
even
size
lemma
impli
proper
get
even
weight
degre
deﬁn
proper
weight
degre
pariti
without
loss
gener
assum
even
weight
degre
odd
weight
degre
proper
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
extend
whole
possibl
conﬂict
aris
alway
avoid
conﬂict
swap
weight
edg
cycl
contain
kind
argument
show
proper
weight
degre
increas
increas
sinc
let
edg
play
role
extra
weight
minim
subgraph
must
either
odd
contain
bridg
lemma
show
odd
henc
contain
bridg
note
show
sinc
endblock
one
say
cutvertex
also
cutvertex
follow
weight
vertex
odd
degre
vertex
even
degre
weight
vertex
odd
degre
vertex
even
degre
two
extend
whole
graph
assign
weight
edg
incid
except
assign
weight
edg
also
must
cutvertex
sinc
follow
cutvertex
cutvertex
replac
replac
possibl
cutvertex
lemma
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
extend
whole
assign
weight
edg
weight
edg
kasper
szabo
lyngsi
possibl
conﬂict
weight
degre
case
sinc
cutvertex
cycl
contain
two
edg
weight
incid
swap
weight
cycl
avoid
conﬂict
contradict
bad
graph
fig
illustr
situat
claim
claim
contain
suspend
path
cycl
length
assum
suspend
cycl
length
lemma
proper
weight
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
proper
extend
whole
graph
assign
weight
edg
weight
edg
contradict
case
suspend
path
length
treat
way
pend
path
length
proof
previou
claim
choos
graph
claim
contain
suspend
path
cycl
length
least
suppos
path
degre
delet
add
edg
alreadi
edg
result
graph
odd
proper
iti
use
ﬁnd
proper
put
back
vertex
origin
give
weight
delet
edg
give
opposit
colour
give
distinct
colour
sinc
differ
colour
two
choic
one
give
proper
begin
assign
weight
edg
give
weight
give
distinct
colour
two
choic
one
give
proper
contradict
assum
odd
sinc
odd
possibl
obtain
neighbour
bipartit
graph
odd
subdivid
green
edg
join
two
vertex
degre
least
four
vertex
case
ﬁnd
anoth
path
deﬁn
odd
unless
consist
two
vertex
join
path
length
case
easi
check
proper
degre
claim
vertex
endblock
lie
suspend
path
length
replac
suspend
path
length
edg
form
edg
aris
suspend
path
call
blue
edg
note
bridgeless
minimum
degre
endblock
least
let
endblock
possibl
let
uniqu
cutvertex
contain
delet
pair
neighbour
vertex
disconnect
deﬁn
graph
follow
select
edg
disconnect
compon
contain
smallest
possibl
possibl
one
union
compon
togeth
edg
connect
call
otherwis
delet
pair
adjac
vertex
leaf
connect
graph
deﬁn
note
case
must
sinc
delet
togeth
neighbour
disconnect
claim
vertex
degre
overal
strategi
prove
claim
ﬁnd
vertex
local
maximum
degre
use
procedur
explain
remark
follow
lemma
ﬁnd
proper
edg
incid
weight
case
choos
whose
cutvertex
adjac
one
block
suppos
claim
fals
let
choos
distinct
vertex
maximum
degre
want
choos
remov
avoid
except
case
lemma
set
neighbour
degre
except
case
occur
neighbour
degre
except
case
also
avoid
possibl
choos
unless
vertex
degre
imposs
avoid
except
case
must
whenev
remov
vertex
four
neighbour
result
graph
six
compon
exactli
two
neighbour
case
choos
compon
aris
delet
neighbour
six
compon
contain
maxim
compon
easili
seen
isol
vertex
otherwis
redeﬁn
neighbour
join
compon
contain
contradict
choic
isol
vertex
must
degre
contradict
show
alway
ﬁnd
maximum
degre
avoid
except
case
lemma
set
neighbour
degre
choos
found
deﬁn
back
consid
origin
graph
look
three
differ
subcas
neighbour
neighbour
neighbour
kasper
szabo
lyngsi
subcas
subcas
dealt
describ
remark
follow
lemma
minim
none
neighbour
incid
bridg
subcas
assum
degre
strictli
greater
sinc
otherwis
subcas
impli
degre
least
assum
vertex
maximum
degre
adjac
sinc
otherwis
redeﬁn
subcas
note
impli
never
except
case
lemma
delet
vertex
maximum
degre
deﬁn
neighbour
degre
assum
precis
one
neighbour
compon
sinc
otherwis
subcas
except
also
remov
two
edg
compon
end
made
sure
swap
weight
cycl
avoid
contain
two
edg
weight
incid
avoid
conﬂict
give
proper
weight
precis
one
neighbour
compon
also
assum
one
compon
contain
neighbour
sinc
otherwis
remov
two
edg
incid
go
two
differ
nent
distinct
use
argument
avoid
conﬂict
time
cycl
also
neighbour
compon
sinc
nect
must
case
case
redeﬁn
subcas
assum
compon
contain
neighbour
start
give
maximum
weight
degre
assign
least
one
edg
incid
neighbour
degre
also
assign
weight
uniqu
edg
join
compon
actual
sinc
neighbour
weight
neighbour
degre
incid
least
two
edg
weight
assum
weight
degre
edg
weight
otherwis
swap
weight
cycl
use
edg
avoid
conﬂict
swap
weight
cycl
contain
two
edg
incid
weight
conﬂict
creat
neighbour
degre
conﬂict
aris
cycl
go
two
edg
incid
weight
neighbour
degre
incid
two
edg
weight
call
pair
weight
forbidden
pair
edg
show
alway
ﬁnd
cycl
contain
two
edg
incid
weight
use
forbidden
pair
edg
note
neighbour
incid
forbidden
pair
edg
degre
therefor
neighbour
let
denot
neighbour
sinc
weight
degre
strictli
greater
vertex
sufﬁc
ﬁnd
path
vertex
connect
graph
connect
minim
use
forbidden
pair
edg
sinc
deﬁn
cycl
weight
path
weight
see
figur
sinc
graph
connect
path
assum
us
forbidden
neighbour
bipartit
graph
pair
edg
without
loss
gener
let
ﬁrst
forbidden
pair
edg
us
start
sinc
adjac
follow
sinc
otherwis
ﬁnd
path
use
forbidden
pair
edg
show
path
vertex
use
one
forbidden
pair
edg
look
path
use
one
pair
forbidden
edg
via
choos
path
among
go
neighbour
let
via
pair
forbidden
edg
contain
sinc
via
forbidden
pair
vertex
neighbour
weight
vertex
path
must
sinc
connect
path
use
forbidden
pair
edg
otherwis
graph
induc
contain
desir
path
vertex
avoid
forbidden
pair
edg
let
ﬁrst
pair
forbidden
edg
us
start
must
disjoint
sinc
otherwis
graph
induc
contain
desir
path
avoid
forbidden
pair
edg
furthermor
must
sinc
otherwis
path
deﬁn
togeth
subpath
ivi
subpath
desir
path
avoid
forbidden
pair
edg
path
contradict
maxim
take
care
subcas
neighbour
compon
case
note
subcas
redeﬁn
subpath
viv
follow
fig
illust
situat
proof
claim
dash
edg
indic
pair
forbidden
edg
subcas
situat
le
subcas
except
vertex
degre
assum
except
case
lemma
remov
deﬁn
set
neighbour
degre
kasper
szabo
lyngsi
otherwis
redeﬁn
subcas
case
degre
degre
neighbour
choos
degre
compon
aris
delet
neighbour
six
compon
contain
maxim
compon
easili
seen
isol
vertex
contradict
minimum
degre
assum
strict
local
degre
maximum
strictli
greater
degre
impli
degre
least
let
denot
bipartit
set
contain
let
denot
opposit
bipartit
set
ﬁnd
edg
incid
weight
vertex
weight
degre
pariti
vertex
weight
degre
pariti
differ
conﬂict
recal
incid
two
block
must
precis
two
neighbour
sinc
otherwis
avoid
conﬂict
swap
weight
cycl
use
two
edg
incid
weight
gument
assum
weight
two
edg
differ
sinc
impli
must
least
two
neighbour
join
edg
weight
graph
connect
minim
ﬁnd
cycl
two
edg
avoid
swap
weight
cycl
therebi
avoid
conﬂict
complet
case
sinc
assum
case
case
consid
longest
path
case
choos
incid
endblock
union
block
satisﬁ
connect
case
proof
subcas
exactli
situat
differ
incid
deﬁn
let
denot
bipartit
set
contain
let
denot
opposit
bipartit
set
let
denot
vertex
deﬁn
way
instead
assum
neighbour
differ
strictli
lower
degre
furthermor
precis
two
neighbour
assum
degre
sinc
otherwis
redeﬁn
let
denot
part
belong
respect
assum
get
conﬂict
whenev
weight
give
maxim
weight
degre
note
get
precis
weight
degre
either
look
ﬁve
differ
subcas
even
odd
even
neighbour
bipartit
graph
odd
subcas
least
recal
weight
give
weight
degre
vertex
precis
one
edg
weight
go
weight
give
weight
degre
vertex
get
precis
weight
weight
give
maximum
weight
degre
impli
set
odd
size
even
size
sinc
otherwis
even
size
odd
size
subgraph
consist
edg
weight
odd
number
vertex
odd
degre
similarli
give
maximum
weight
degre
impli
set
odd
size
ﬁnd
proper
follow
weight
lemma
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
also
ﬁnd
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
assum
get
weight
degre
weight
degre
swap
weight
cycl
contain
two
edg
incid
union
give
pariti
conﬂict
neighbour
howev
weight
degre
neighbour
degre
subcas
least
argument
subcas
set
odd
size
even
size
set
odd
size
ﬁnd
proper
follow
weight
lemma
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
also
ﬁnd
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
subcas
assum
weight
degre
union
give
proper
analog
subcas
first
assum
even
least
deduc
get
weight
degre
set
odd
size
even
size
argument
show
set
odd
size
even
size
contradict
analog
argument
hold
odd
subcas
least
set
odd
size
weight
get
maximum
weight
degre
get
weight
degre
pariti
conﬂict
around
block
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
union
give
proper
subcas
least
set
odd
size
one
set
must
even
size
even
size
weight
follow
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
furthermor
weight
degre
weight
get
imum
weight
degre
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
furthermor
degre
block
kasper
szabo
lyngsi
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
union
give
proper
henc
assum
odd
size
one
say
even
size
weight
follow
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
furthermor
weight
degre
weight
get
maximum
weight
degre
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
weight
degre
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
block
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
union
give
proper
complet
proof
claim
remov
pair
adjac
vertex
leaf
connect
graph
must
simpli
work
otherwis
choos
work
endblock
subgraph
deﬁn
claim
claim
vertex
degre
suppos
ﬁrst
vertex
adjac
small
argument
show
unless
isomorph
vertex
remov
neighbour
would
leav
connect
graph
case
ﬁnd
proper
lemma
isomorph
remov
vertex
except
result
subgraph
odd
number
vertex
lemma
proper
without
edg
may
blue
check
matter
blue
edg
arrang
extend
whole
assum
vertex
adjac
rest
proof
theorem
choos
complet
proof
theorem
tree
without
section
give
complet
characteris
bad
tree
characteris
consist
recurs
construct
use
three
class
tree
certain
properti
immedi
give
algorithm
recognis
bad
tree
begin
deﬁn
properti
gener
bipartit
graph
ﬁrst
three
class
describ
follow
let
vertex
connect
bipartit
graph
even
number
vertex
bipartit
set
say
proper
weight
degre
increas
deﬁnit
motiv
follow
easi
proposit
neighbour
bipartit
graph
proposit
let
graph
let
vertex
let
graph
obtain
ad
two
vertex
edg
graph
bad
follow
two
lemma
show
recurs
way
construct
new
bad
bipartit
graph
bad
bipartit
graph
vertex
degre
two
result
hold
bipartit
graph
tree
lemma
let
simpl
connect
bipartit
graph
without
vertex
degre
uniqu
neighbour
edg
incid
bridg
proof
lemma
pariti
conﬂict
problem
extend
weight
degre
might
contain
cycl
would
alway
abl
avoid
lemma
let
simpl
connect
bipartit
graph
assum
vertex
degre
let
denot
neighbour
let
edg
incid
assum
edg
incid
bridg
let
uniqu
compon
contain
let
denot
connect
graph
obtain
ad
vertex
edg
graph
bad
graph
bad
proof
figur
show
illustr
situat
let
vertex
bad
proposit
gvi
adjac
follow
proper
edg
must
receiv
weight
weight
degre
thu
exist
bad
assum
bad
let
denot
bipartit
set
let
denot
bipartit
set
lemma
assum
odd
size
lemma
pariti
conﬂict
vertex
get
odd
degre
vertex
get
even
degre
problem
extend
weight
case
even
size
must
even
number
set
odd
number
vertex
say
even
size
lemma
proper
get
weight
degre
appli
lemma
ﬁnd
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
weight
weight
edg
weight
zero
extend
weight
whole
assign
weight
contradict
bad
even
size
proposit
bad
bad
weight
vertex
incid
increas
contradict
assum
proper
weight
vertex
incid
increas
use
lemma
proper
easili
extend
contradict
kasper
szabo
lyngsi
fig
illustr
situat
explain
lemma
describ
second
third
class
tree
use
characteris
bad
tree
special
case
graph
deﬁn
follow
let
vertex
connect
bipartit
graph
odd
number
vertex
let
two
integ
say
must
get
weight
degre
proper
must
get
weight
degre
proper
weight
increas
class
integ
two
ing
special
case
want
characteris
bad
tree
need
follow
two
lemma
describ
local
structur
around
lemma
let
integ
let
obtain
disjoint
union
togeth
number
tree
type
gvm
bad
tree
ad
vertex
edg
vvm
also
edg
bad
tree
proof
figur
illustr
situat
assum
even
case
odd
similar
let
bipartit
set
let
denot
edg
incid
let
denot
correspond
compon
let
denot
bipartit
set
let
denot
number
tree
odd
number
vertex
bipartit
set
let
denot
number
tree
even
number
vertex
bipartit
set
among
let
denot
number
tree
among
even
number
vertex
odd
number
vertex
assum
order
denot
tree
let
number
tree
among
odd
number
vertex
even
number
vertex
assum
order
denot
tree
furthermor
assum
tree
odd
number
vertex
bipartit
set
tree
even
number
vertex
bipartit
set
let
neighbour
gng
neighbour
bipartit
graph
sinc
odd
one
even
howev
even
lemma
proper
get
odd
weight
degre
contradict
tree
thu
even
odd
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
edg
must
get
weight
sinc
otherwis
say
weight
subgraph
consist
edg
weight
odd
number
odd
degre
vertex
similar
argument
edg
get
weight
edg
also
get
weight
follow
lemma
edg
vvn
get
weight
also
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
mean
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
weight
increas
argu
see
edg
must
get
weight
edg
get
weight
edg
get
weight
edg
vvn
get
weight
sinc
follow
henc
start
show
tree
must
tree
type
gvj
assum
case
let
tree
among
weight
vvj
possibl
conﬂict
weight
vertex
get
odd
weight
degre
vertex
get
even
weight
degre
weight
increas
put
back
let
vvj
play
role
extra
weight
weight
possibl
conﬂict
sinc
must
conﬂict
also
get
weight
degre
weight
vertex
get
even
weight
degre
vertex
get
odd
weight
degre
put
back
let
vvj
play
role
extra
weight
also
increas
weight
weight
conﬂict
anywher
contradict
tree
must
tree
type
gvj
similar
argument
show
tree
must
bad
tree
remain
show
two
graph
tree
type
start
show
clearli
first
assum
even
weight
vvj
weight
vvi
weight
edg
possibl
conﬂict
weight
increas
vvj
weight
must
weight
increas
otherwis
proper
weight
increas
proper
weight
edg
get
weight
degre
contradict
case
odd
similar
conclud
remain
show
tree
type
lemma
weight
edg
weight
edg
incid
possibl
conﬂict
must
conﬂict
sinc
weight
degre
proper
must
use
except
swap
weight
degre
pariti
tree
increas
weight
degre
similarli
conclud
weight
degre
proper
kasper
szabo
lyngsi
degre
increas
must
interchang
argument
impli
weight
degre
proper
must
weight
degre
proper
degre
increas
must
henc
tree
type
fig
illustr
situat
explain
lemma
similarli
proof
lemma
describ
local
structur
around
lemma
either
obtain
disjoint
union
togeth
number
tree
type
gvm
bad
tree
ad
vertex
edg
vvm
also
edg
bad
tree
obtain
disjoint
union
bad
graph
number
graph
type
gvn
ad
vertex
edg
vvn
also
bridg
join
bad
graph
neighbour
bipartit
graph
fig
illustr
two
possibl
situat
explain
lemma
lemma
bad
tree
distinct
obtain
either
ad
vertex
join
edg
bridg
two
bad
tree
glu
togeth
two
edg
degre
respect
tive
degre
respect
proof
suppos
lemma
fals
look
smallest
counterexampl
easi
check
statement
hold
bad
tree
diamet
assum
diamet
least
lemma
also
assum
vertex
degre
adjac
vertex
degre
let
fourth
last
vertex
longest
path
let
third
last
vertex
two
subtre
obtain
remov
edg
form
desir
construct
list
recurs
way
construct
bad
tree
figur
class
bad
tree
obtain
way
start
smallest
bad
graph
denot
vcase
kasper
szabo
lyngsi
fig
illustr
recurs
way
construct
fig
illustr
obtain
bad
tree
vertex
constructionofgv
neighbour
bipartit
graph
fig
illustr
recurs
way
construct
constructionofgv
kasper
szabo
lyngsi
fig
illustr
recurs
way
construct
bad
tree
construct
inde
describ
bad
tree
proof
theorem
suppos
theorem
fals
let
smallest
bad
tree
construct
recurs
easi
check
diamet
must
least
let
number
vertex
proposit
lemma
assum
tree
type
vertex
tree
type
vertex
construct
use
recurs
furthermor
sinc
smallest
counterexampl
bad
tree
fewer
vertex
also
construct
recurs
lemma
impli
vertex
degre
adjac
vertex
degre
least
lemma
counterexampl
obtain
vertex
join
bridg
vertex
construct
recurs
contradict
constructionofbadtreesonegv
gng
nsomebadtre
neighbour
bipartit
graph
conclud
remark
provid
characteris
bridgeless
bipartit
graph
without
tree
without
actual
sinc
equival
integ
characteris
extend
characteris
also
provid
polynomi
time
algorithm
check
togeth
theorem
answer
problem
except
bipartit
graph
bridg
remain
characteris
bipartit
graph
bridg
without
would
interest
investig
whether
method
use
section
extend
characteris
bipartit
graph
without
acknowledg
author
would
like
thank
carsten
thomassen
advic
help
discuss
well
thoma
perret
care
read
manuscript
refer
dudek
wajc
complex
discret
ic
theoret
comput
scienc
karonski
łuczak
thomason
edg
weight
vertex
colour
combinatori
theori
ser
khatirinejad
naserasr
newman
seamon
steven
weight
two
edg
weight
discret
mathemat
theoret
comput
scienc
bipartit
graph
two
edg
weight
discret
matic
theoret
comput
scienc
seamon
conjectur
relat
problem
survey
arxiv
graph
multipl
natori
optim
thomassen
zhang
conjectur
factor
modulo
conjectur
combinatori
theori
ser
