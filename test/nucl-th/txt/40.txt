eﬃcient
computation
hamiltonian
matrix
elements
non-orthogonal
slater
determinants
yutaka
utsunoa
noritaka
shimizub
takaharu
otsukab
takashi
abeb
aadvanced
science
research
center
japan
atomic
energy
agency
tokai
ibaraki
319-1195
japan
bcenter
nuclear
study
university
tokyo
hongo
tokyo
113-0033
japan
cdepartment
physics
university
tokyo
hongo
tokyo
113-0033
japan
dnational
superconducting
cyclotron
laboratory
michigan
state
university
east
lansing
48824
usa
abstract
present
eﬃcient
numerical
method
computing
hamiltonian
matrix
elements
non-orthogonal
slater
determi-
nants
focusing
time-consuming
component
calculation
involves
sparse
array
usual
case
many
matrix
elements
calculated
computation
transformed
multiplication
dense
matrices
demonstrated
present
method
based
matrix-matrix
multiplication
attains
∼80
theoretical
peak
performance
measured
systems
equipped
modern
microprocessors
factor
5-10
better
normal
method
using
indirectly
indexed
arrays
treat
sparse
array
reason
diﬀerent
performances
discussed
viewpoint
memory
access
keywords
quantum
many-body
problem
hamiltonian
overlap
blas
introduction
one
main
issues
quantum
many-body
problem
solving
schr¨odinger
equation
good
accuracy
reason-
able
computational
time
mean-ﬁeld
methods
hartree-fock
method
successful
various
systems
inclusion
eﬀects
beyond
mean
ﬁeld
i.e.
correlation
highly
desired
better
description
instance
mean-
ﬁeld
wave
function
necessarily
good
quantum
number
conserved
exact
solution
total
angular
momentum
superposition
slater
determinants
usual
way
overcome
limitation
mean-ﬁeld
method
among
var-
ious
schemes
represent
correlated
wave
function
repre-
sentation
non-orthogonal
slater
determinants
quasiparti-
cle
vacuum
states
general
method
widely
used
nuclear
many-body
problems
method
often
as-
sociated
generator
coordinate
method
gcm
successfully
applied
instance
description
collective
motion
restoration
broken
symmetry
recently
global
studies
correlation
energy
energy
spectra
nuclear
chart
carried
use
gcm
instance
furthermore
use
non-orthogonal
slater
determinants
recently
opened
new
possibility
representing
precise
many-body
wave
function
eﬃcient
way
demonstrated
monte
carlo
shell
model
mcsm
variants
vampir
method
hybrid
method
mcsm
vampir
mcsm
∗corresponding
author
email
address
utsuno.yutaka
jaea.go.jp
yutaka
utsuno
preprint
submitted
computer
physics
communications
method
capable
precisely
evaluating
eigenval-
ues
even
system
beyond
exact
calculation
introducing
novel
extrapolation
method
utilizing
variance
energy
studies
using
superposition
non-orthogonal
slater
determinants
also
quantum
chemistry
present
paper
order
extend
applicability
expression
non-orthogonal
slater
determinants
present
numerical
method
eﬃciently
computing
hamiltonian
matrix
elements
since
assume
general
two-body
force
rotational
symmetry
present
method
applicable
various
systems
paper
organized
follows
section
brieﬂy
describes
many-body
system
many-body
wave
function
consideration
section
presents
numerical
methods
computing
time-
consuming
part
sec
computational
performances
presented
methods
compared
reason
diﬀerences
performance
discussed
sec
summa-
rize
paper
many-body
calculation
non-orthogonal
slater
de-
terminants
paper
consider
many-body
system
described
hamiltonian
consisting
one-body
operator
two-body
operator
l1l2
tl1l2c†
cl2
l1l2l3l4
¯vl1l2
l3l4c†
cl4cl3
creation
annihilation
operators
state
labeled
respectively
one-body
matrix
ele-
july
2018
basis
overlaps
represented
norm
overlap
written
ments
tl1l2
given
tl1l2
hl1|t
|l2i
two-body
ma-
trix
elements
deﬁned
¯vl1l2
l3l4
hl1l2|v|l3l4i
hl1l2|v|l4l3i
antisymmetrized
¯vl1l2
l3l4
−¯vl1l2
l4l3
consider
model
space
consisting
ﬁnite
number
single-particle
orbits
rep-
resented
regard
set
single-particle
wave
functions
hx|c†
|−i
single-particle
basis
set
approximate
solution
superposition
ﬁnite
number
non-orthogonal
slater
determinants
|ψi
det
cid:16
cid:17
hamiltonian
overlap

l1l2
tl1l2
ρl2l1
l1l2l3l4
ρl3l1
¯vl1l2
l3l4
ρl4l2

denote
slater
determinant
am-
plitude
respectively
note
although
wave
function
|ψi
sometimes
expressed
continuous
superposition
expressed
gcm
actual
numerical
calculation
usually
performed
discretization
shown
slater
determinant
regarded
many-body
basis
state
rep-
resented
product
generalized
creation
operators
i=1
|−i
number
particles
creation
operator
given
lic†
×np
matrix
characterizes
many-
body
basis
state
general
basis
states
non-orthogonal
one
another
al-
though
important
issue
quantum
many-body
theory
choose
good
mention
aim
paper
present
eﬃcient
computational
method
valid
calculation
type
set
many-body
basis
states
ﬁxed
one
needs
optimize
set
amplitudes
optimization
usually
carried
variational
principle
using
density
matrix
whose
matrix
element
deﬁned
ρll′
|c†
l′cl|φ
using
density
matrix
becomes
cid:16
cid:17
derivation
eqs
appendix
given
among
various
applications
expression
restoration
broken
symmetries
since
general
slater
deter-
minant
necessarily
possess
symmetries
original
hamiltonian
desirable
restore
broken
symmetries
projecting
wave
function
onto
good
quantum
numbers
total
angular
momentum
instance
restored
|φi
performing
three-dimensional
integra-
tion
euler
angles
carry
numerical
integra-
tion
number
mesh
points
euler
angles
required
many
order
104
numbers
calculated
thus
exempliﬁed
innumerable
slater
determinants
of-
ten
involved
obtain
good
many-body
wave
function
|ψi
hence
fast
computation
hamiltonian
norm
over-
laps
accelerate
whole
calculation
time-
consuming
procedure
computation
two-body
part
hamiltonian
overlap
|h|
hψ|ψi
hvi
ρl3l1
¯vl1l2
l3l4
ρl4l2
l1l2l3l4
l1l3
ρl3l1
γl1l3
¯vkl′
k′l
ρll′
ll′
γkk′
leads
hill-wheeler
equation
discretized
coordinate
matrices
whose
elements
given
|h|
vector
whose
component
eigenvalue
following
terminology
gcm
hereafter
call
many-body
matrix
elements
hamiltonian
over-
lap
norm
overlap
respectively
avoid
confusing
two-body
matrix
element
¯vl1l2
l3l4
single-particle
computation
requires
fourfold
summation
single-particle
states
following
sections
concen-
trate
eﬃcient
computational
method
sys-
tems
equipped
modern
microprocessors
assume
operation
repeated
great
number
times
diﬀerent
density
matrices
condition
ﬁxed
two-
body
matrix
elements
¯vl1l2
l3l4
numerical
methods
computing
hamiltonian
over-
lap
straightforward
operation
general
waste
computational
time
¯vl1l2
l3l4
sparse
sparseness
due
symmetry
hamiltonian
in-
stance
conservation
component
angular
mo-
mentum
leads
¯vl1l2
l3l4
unless
satisﬁed
depending
system
considered
symmetries
parity
orbital
angular
momentum
isospin
quantum
numbers
also
conserved
imposes
constraints
non-zero
matrix
elements
hence
ev-
ery
eﬀort
must
made
avoid
taking
vanishing
matrix
elements
eﬃcient
computing
show
three
numer-
ical
algorithms
purpose
ﬁrst
method
completely
diﬀerent
two
last
method
ad-
vanced
second
method
indirect-index
method
shown
last
paragraph
operation
associated
zero
calculating
hvi
mainly
caused
density
ma-
trix
ﬁxed
two-body
matrix
elements
¯vl1l2
l3l4
thus
useful
classify
advance
indices
¯vl1l2
l3l4
according
whether
lead
non-vanishing
¯vl1l2
l3l4
label
set
indices
satisfying
condition
so-called
indirect
index
equa-
tion
represented
hvi
nnonzero
ρl3
¯vnonzero
ρl4
nnonzero
number
non-vanishing
¯vl1l2
l3l4
¯vnonzero
¯vl1
¯vl1l2
l3l4
sparse
nnonzero
much
smaller
paper
refer
numerical
algorithm
based
indirect-index
method
matrix-vector
method
although
introduction
indirect
index
always
applied
computation
sparse
arrays
present
alternative
numerical
approach
directly
utilizes
sym-
metry
assume
two-body
force
rotational
invariance
simplicity
possible
symmetries
treated
similar
way
first
density-matrix
elements
ρll′
grouped
ac-
cording
set
com-
mon
indexed
n∆m
similar
way
two-body
matrix
elements
¯vl1l2
l3l4
categorized
ac-
cording
∆m13
∆m24
∆m13
∆m24
k′k
respectively
indices
∆m13
∆m24
equation
leads
hvi
k′k
∆m13∆m24
∆m24
∆m13
∆m13
∆m24
k′k
k′k
−∆m
−∆m
k′k
cid:0
cid:4
cid:5
cid:3
cid:1
cid:2
cid:0
cid:1
cid:0
cid:2
cid:0
cid:1
cid:0
cid:0
cid:1
cid:3
cid:1
cid:2
cid:0
cid:1
cid:0
cid:0
cid:1
cid:0
figure
schematic
illustration
operation
last
equation
derived
necessary
condition
¯vl1l2
l3l4
non-zero
i.e.
∆m13
−∆m24
−∆m
since
density
matrix
two-body
matrix
−∆m
given
one-dimensional
array
two-dimensional
array
respectively
identiﬁed
vector
size
n∆m
matrix
size
n∆m
n∆m
respec-
tively
using
n∆m
n−∆m
thus
regarded
vector
matrix
vector
operation
schematically
il-
lustrated
fig
clearly
seen
sparse
array
¯vl1l2
l3l4
transformed
block-antidiagonal
matrix
whose
blocks
dense
submatrices
paper
refer
numerical
algorithm
based
matrix-vector
method
matrix-matrix
method
matrix-vector
method
computational
time
devoted
matrix
vector
operation
index
omitted
simplicity
previously
mentioned
operation
usually
repeated
number
times
diﬀerent
˜v˜ρ
binding
vectors
nvec
matrix
nvec
repeated
matrix
vector
operations
performed
matrix
matrix
operation
one
time
nvec
˜v˜ρ
˜v˜ρ
nvec
˜vθ
number
columns
nvec
chosen
arbitrar-
ily
hvi
i-th
density
matrix
given
˜v˜ρ
˜vθ
˜vθ
stands
column
matrix
˜vθ
call
method
i.e
way
matrix
matrix
operation
matrix-
matrix
method
seems
substantial
diﬀer-
ence
matrix-matrix
method
matrix-vector
method
equation
keeps
mathematical
identity
also
number
elementary
operations
however
seen
next
section
two
methods
result
quite
diﬀerent
computational
performances
actual
computer
systems
case
quasiparticle
vacuum
state
although
paper
concentrates
hamiltonian
overlap
slater
determinants
useful
mention
applicabil-
ity
hamiltonian
overlap
quasiparticle
vacuum
states
quasiparticle
vacuum
state
generalized
single-
particle
state
widely
used
nuclear
physics
include
pairing
correlation
similar
hamiltonian
overlap
quasiparticle
vacuum
state
written
|h|φ
tl1l2
ρ10
l2l1
l1l2l3l4
ρ10
l3l1
¯vl1l2
l3l4
ρ10
l4l2

l1l2
l1l2l3l4
κ01∗
l1l2
¯vl1l2
l3l4
κ10
l3l4

density
matrix
ρ10
pairing
tensors
κ10
κ01∗
deﬁned
ρ10
ll′
κ10
ll′
κ01∗
ll′
|c†
l′cl|φ
|cl′cl|φ
|c†
diﬀerence
slater
determinant
addition
last
term
computation
matrix-vector
matrix-matrix
method
rather
similar
two-body
matrix
el-
ements
¯vl1l2
l3l4
categorized
according
m12
m34
m12
m34
k′k
indices
m12
m34
respec-
tively
since
necessary
condition
¯vl1l2
l3l4
non-zero
m12
m34
two-body
matrix
elements
block
diagonalized
k′k
dense
matrix
pairing
tensor
regarded
vector
represen-
tation
thus
matrix-vector
matrix-matrix
method
applied
quasiparticle
vacuum
state
one
needs
pre-
pare
two
kinds
matrix
representations
¯vl1l2
l3l4
former
latter
act
vector
representation
density
matrix
vector
representation
pairing
tensor
respectively
measurement
performance
section
computational
performance
compared
among
three
methods
presented
last
section
adopt-
ing
realistic
many-body
system
measuring
elapsed
time
compute
repeatedly
4.1.
benchmark
system
consider
nuclear
many-body
problem
pro-
tons
neutrons
interact
ﬁxed
model
space
adopt
set
single-particle
orbits
consisting
ﬁve
harmonic-
oscillator
major
shells
harmonic-oscillator
quantum
number
nosc
0s1/2
0p3/2
0p1/2
0d5/2
0d3/2
1s1/2
f7/2
f5/2
1p3/2
1p1/2
0g9/2
0g7/2
1d5/2
1d3/2
2s1/2
thus
number
proton
neutron
single-particle
states
70.
proton
neutron
numbers
set
two
two
respectively
number
particles
irrelevant
computational
time
two-body
part
adopted
hamiltonian
arbi-
trary
one
rotational
parity
time-reversal
symme-
tries
due
rotational
time-reversal
symmetries
matrix
elements
¯vl1l2
l3l4
real
numbers
since
assume
symmetries
isospin
calcu-
late
proton-proton
interaction
part
neutron-
neutron
part
proton-neutron
part
independently
system
largest
submatrix
used
matrix-vector
matrix-matrix
method
size
390
390
classiﬁed
ac-
cording
component
angular
momentum
parity
wave
function
taken
single
slater
determinant
total
angular-momentum
parity
projection
single-
particle
state
slater
determinant
assumed
pure
proton
neutron
state
number
mesh
points
three
euler
angles
parity
projector
253
respectively
leading
253
250
times
computa-
tions
since
rotation
wave
function
involves
imaginary
numbers
density
matrix
complex
would
useful
compare
number
elementary
ﬂoating-point
operations
addition
multiplication
among
three
methods
taking
account
loop
length
halved
using
¯vl1l2
l3l4
¯vl2l1
l4l3
number
elementary
ﬂoating-point
operations
becomes
20,992,518
indirect-index
method
10,365,224
matrix-vector
method
matrix-matrix
method
former
almost
double
latter
explained
follows
matrix-
vector
method
˜vk′1
˜ρ1
˜vk′2
˜ρ2
factored
pk′k
˜ρk′
˜vk′k
˜ρk
way
pk′
˜ρk′
˜vk′1
˜ρ1
˜vk′2
˜ρ2
ex-
pression
saves
number
multiplications
impor-
tantly
reduced
operations
multiplication
complex
numbers
costs
many
six
ﬂoating-point
operations
4.2.
computational
environment
computation
carried
single-threaded
process
two
diﬀerent
systems
based
up-to-date
scalar
processors
one
system
based
xeon
x5570
processor
clock
speed
2.93
ghz
based
sparc64
vii
processor
clock
speed
2.5
ghz
theoretical
peak
per-
formances
per
cpu
core
11.72
gflops
gflops
respectively
code
written
fortran
90/95/2003
com-
piled
intel
fortran
compiler
version
11.1
xeon
sys-
tem
fujitsu
fortran
compiler
driver
version
8.2
sparc64
system
two-body
matrix
elements
¯vl1l2
l3l4
density
matrix
elements
ρll′
double-precision
matrix
and/or
vector
calculations
coded
call
blas
interface
blas
facto
standard
programming
in-
terface
basic
linear
algebra
operations
use
optimized
blas
implementations
intel
math
kernel
library
mkl
xeon
system
fujitsu
scientiﬁc
subroutine
library
ssl
sparc64
system
computational
perfor-
mance
executing
measured
wall-clock
time
microsecond-level
resolution
good
enough
present
purpose
sparc64
vii
xeon
x5570
0.5
ind
m-v
nvec=
m-m
100
300
1000
figure
comparison
computational
performance
among
indirect-
index
method
ind
matrix-vector
method
m-v
matrix-matrix
method
m-m
diﬀerent
nvec
measured
sparc64
vii
xeon
x5570
systems
values
normalized
theoretical
peak
performance
see
text
details
4.3.
results
analyses
performance
computation
characterized
in-
version
wall-clock
time
comprehensive
express
performance
flops
t−1
1/second
multiplied
total
number
elementary
ﬂoating-point
operations
ex-
ecuted
since
number
operations
diﬀerent
among
methods
shown
previously
flops
good
mea-
sure
comparing
relative
performances
hence
make
direct
comparison
possible
performance
deﬁned
t−1
multiplied
ﬁxed
factor
number
elementary
ﬂoating-point
operations
matrix-vector
matrix-
matrix
method
serves
actual
flops
figure
compares
measured
performances
normalized
theoretical
peak
performances
adopted
systems
indirect-index
method
gives
lowest
performance
systems
performance
matrix-vector
method
twice
high
indirect-index
method
almost
equivalent
ratio
numbers
ﬂoating-
point
operations
still
far
theoretical
peak
perfor-
mance
vectors
bound
matrix
matrix-
matrix
method
performance
starts
increase
perfor-
mance
improves
sharply
even
small
nvec
saturated
around
nvec
30-100
reach
∼70-80
theoretical
peak
performance
values
two
systems
close
large
nvec
contrast
rather
diﬀerent
behavior
smaller
nvec
although
matrix-vector
matrix-matrix
methods
identical
mathematics
quite
diﬀerent
perfor-
mance
memory
access
major
bottleneck
modern
com-
puter
systems
diﬀerentiates
methods
consider
matrix
size
vector
size
estimate
number
arithmetic
operations
memory
ac-
cesses
involving
since
matrix-times-vector
operation
needs
2n2
ﬂoating-point
operations
memory
ac-
cesses
computational
intensity
deﬁned
ratio
hand
computational
intensity
matrix-
times-matrix
operation
becomes
much
larger
matrix-vector
operation
suﬃciently
large
speciﬁ-
cally
matrix-times-matrix
operation
designed
cpu
time
involved
arithmetic
operations
rather
memory
access
implemented
numerical
li-
braries
mkl
ssl
see
instance
detailed
analyses
performance
basic
linear
alge-
bra
operations
terms
computer
architecture
also
consider
performance
parallel
processes
take
example
31,250
˜ρ˜v
operations
divided
mpi
processes
running
node
cpu
core
xeon
x5570
system
matrix-matrix
method
nvec
100
reaches
8.5
gflops/core
rather
close
9.1
gflops
achieved
single
process
con-
trast
matrix-vector
method
parallel
performance
reduced
1.5
gflops/core
single-process
perfor-
mance
3.1
gflops
diﬀerence
also
accounted
memory
access
since
memory
bandwidth
shared
cpu
cores
board
eﬀective
bandwidth
deﬁned
bandwidth
per
process
thread
reduced
parallel
processes
reduction
eﬀective
bandwidth
leads
reduction
performance
particularly
processes
in-
volving
heavy
memory
access
like
matrix-vector
operation
thus
matrix-matrix
method
superior
matrix-vector
method
absolute
performance
also
parallel
eﬃciency
less
memory
demanding
formalism
4.4.
towards
larger
calculations
benchmark
calculation
carried
model
space
nshell
nshell
stands
number
harmonic
oscil-
lator
major
shells
included
although
model
space
large
shell-model
calculation
large
enough
density-functional
calculation
hence
view
possible
ap-
plication
modern
density-functional
calculations
exam-
ine
computational
requirements
change
model
space
enlarged
figure
shows
increase
nop
deﬁned
number
elementary
ﬂoating-point
operations
computing
single
hvi
matrix-vector
method
estimating
number
assumed
multiplication
addi-
tion
two
complex
numbers
need
six
two
ﬂoating-point
operations
respectively
multiplication
real
number
complex
number
needs
two
ﬂoating-point
oper-
ations
figure
indicates
nop
increases
roughly
exponen-
tially
nshell
slope
decreases
result
computational
time
nshell
instance
103
times
larger
one
nshell
eﬀective
performance
shown
fig
unchanged
assumption
reasonable
eﬀective
performance
multiplication
large
matrices
known
kept
high
indeed
conﬁrmed
almost
performance
obtained
nshell
1012
109
106
103
nop
memory
size
nshell
figure
number
elementary
ﬂoating-point
operations
nop
memory
size
byte
needed
matrix-vector
method
function
nshell
double
precision
data
assumed
estimating
memory
size
practical
side
memory
size
could
problem
demonstrated
fig
gigabytes
memory
required
store
two-body
matrix
elements
¯vl1l2
l3l4
nshell
how-
ever
restriction
due
memory
size
relaxed
matrices
diﬀerent
distributed
diﬀerent
nodes
case
nshell
since
largest
matrix
size
12,444
maximum
memory
size
reduced
finally
noted
memory
size
needed
calculation
multiple
hvi
using
matrix-
matrix
method
almost
unchanged
single
hvi
number
ﬂoating-point
operations
multiplied
nvec
i.e.
number
vectors
bound
see
thus
ratio
number
memory
access
number
operations
decreases
accordingly
discussed
sec
4.3
summary
presented
eﬃcient
numerical
method
com-
puting
hamiltonian
matrix
elements
non-orthogonal
slater
determinants
motivated
recent
ﬁndings
super-
position
non-orthogonal
slater
determinants
ef-
fective
way
solve
many-body
problem
com-
putationally
demanding
computation
four-fold
loop
hvi
pl1l2l3l4
ρl3l1
¯vl1l2
l3l4
ρl4l2
¯vl1l2
l3l4
sparse
array
due
symmetries
hamiltonian
indirectly
in-
dexed
arrays
often
introduced
treating
sparse
matrix
performance
method
measured
much
lower
theoretical
peak
performance
order
formula
calculating
hvi
fast
computation
key
part
transformed
multiplication
dense
matrix
vector
single
hvi
calculation
formula
also
transformed
multiplication
dense
matrices
multiple
hvi
calcu-
lations
method
based
matrix-matrix
multiplication
attains
much
∼80
theoretical
peak
performance
actual
systems
high
performance
accounted
high
computational
intensity
i.e.
large
ratio
ﬂoating-point
operations
memory
accesses
since
hardware
side
predicted
byte/flop
rate
future
systems
decreased
rapid
increase
number
cpu
cores
compared
memory
bandwidth
numerical
meth-
ods
developed
computational
intensity
higher
achieved
present
method
acknowledgement
one
authors
y.u
thanks
prof.
dobaczewski
fruitful
discussions
stay
european
centre
theoretical
studies
nuclear
physics
related
areas
ect*
work
part
supported
mext
grant-
in-aid
young
scientists
21740204
scientiﬁc
re-
search
innovative
areas
20105003
scientiﬁc
re-
search
20244022
23244049
hpci
strategic
pro-
gram
mext
work
part
riken-cns
joint
research
project
large-scale
nuclear-structure
calculations
numerical
calculation
carried
bx900
fx1
supercomputers
japan
atomic
energy
agency
appendix
derivation
formulae
calculating
norm
hamiltonian
overlaps
appendix
derive
formulae
calculating
norm
hamiltonian
overlaps
given
eqs
following
convenient
introduce
unoccupied
states
lmc†
a.1
hereafter
occupied
unoccupied
states
labeled
indices
respectively
using
eqs
a.1
creation
operator
single-particle
basis
state
written
lia†
lma†
anticommutation
relation
δll′
leads
a.2
a.3
identity
matrix
creation
operator
expressed
linear
combination
ing
eqs
a.2
us-
ja†
˜em
ja†
a.4
given
respectively
appendix
a.1
norm
overlap
overlap
calculated
density
matrix
deﬁned
identical
con-
traction
see
a.7
i′=np
ai′
i=1
|−i
ji′a
i′=np
h−|
h−|
σ∈s
i=1
|−i
a.5
×h−|aσ
det
det
cid:16
cid:17
|−i
stands
symmetric
group
degree
appendix
a.2
hamiltonian
overlap
according
thouless
theorem
slater
determinant
orthogonal
slater
determinant
expressed
a.6
zmia†
mai
normalization
constant
given
using
a.6
general
matrix
element
|c†
ck1
ckq|φ
ihφ
¯dl1
¯dlpdk1
dkq
a.7
¯dl
deﬁned
¯dl
ˆz†c†
respectively
creation
operator
deﬁned
ˆz†
ˆz†
cle−
ˆz†
regarded
vacuum
bl|φ
a.8
single-particle
state
hence
useful
represent
¯dl
hereafter
issimply
written
confusion
possible
using
baker-hausdorﬀ
formula
straightforward
derive
¯dl


˜d∗
˜d∗
lmb†
dlib†
˜dlm

midli
a.9
wick
theorem
helpful
calculate
right
hand
side
a.7
use
theorem
contraction
operators
deﬁned
uv−
needed
stands
normal
ordered
product
concerning
diﬀerent
expressions
••v
•••v
•••
etc
also
used
contraction
order
specify
pair
operators
considered
deﬁnition
leads
following
contractions
¯d•
cid:16
˜d†
cid:17
pd•
¯d•
cid:16
dz†
˜d†
cid:17
¯d•
¯d•
pd•
a.10
ρll′
¯d•
l′d•
cid:16
˜d†
cid:17
ll′
a.11
explicit
form
matrix
derived
con-
dition
cid:16
ˆza†
cid:17
a.12
lengthy
calculations
proved
satisﬁed
taken
˜ee−1
a.13
thus
expression
cid:16
cid:17
a.14
obtained
substituting
a.13
a.11
using
a.3
case
two-body
operator
¯dl1
¯dl2dl4dl3
wick
theo-
rem
leads
¯dl1
¯dl1
¯d•
¯d•
¯dl2dl4dl3
¯dl2dl4dl3
¯d•
¯d•
dl4dl3
¯d•
¯dl2d•
dl3
¯d•
¯d••
d••
d••
d••
¯d•
a.15
¯d••
d••
last
three
terms
right
hand
side
a.15
c-numbers
terms
include
and/or
nor-
mal
order
produce
vanishing
diagonal
matrix
elements
a.8
thus
general
matrix
element
two-body
operator
cl4cl3
given
a.7
|c†
cl4cl3
¯dl2dl4dl3
ihφ
¯dl1
¯d••
¯d•
¯d•
d••
d••
¯d•
¯d•
¯d••
d••
ρl3l1
ρl4l2
ρl4l1
ρl3l2
d••
a.16
¯d•
¯d••
d••
¯d••
¯d•
¯d•
d••
¯d•
¯d•
d••
−ρl4l1
ρl3l2
¯d•
ρl3l1
ρl4l2
used
noted
transposition
two
operators
con-
traction
changes
sign
see
rule
gives
straightforwardly
antisymmetrized
two-body
ma-
trix
elements
satisfying
¯vl1l2
l3l4
−¯vl1l2
l4l3
d••
¯d••
d••
¯d••
d••
references
instance
ring
schuck
nuclear
many-body
problem
springer
1980
d.l
hill
j.a
wheeler
phys
rev
1953
1102
j.j.
griﬃn
j.a
wheeler
phys
rev
108
1957
311
bender
p.-h.
heenen
p.-g.
reinhard
rev
mod
phys
2003
121
bender
g.f.
bertsch
p.-h.
heenen
phys
rev
2006
034322
sabbey
bender
g.f.
bertsch
p.-h.
heenen
phys
rev
2007
044305
l.m
robledo
g.f.
bertsch
phys
rev
2011
054302
otsuka
honma
mizusaki
shimizu
utsuno
prog
part
nucl
phys
2001
319
k.w
schmid
prog
part
nucl
phys
2004
565
puddu
phys
2006
321
shimizu
utsuno
mizusaki
otsuka
abe
honma
phys
rev
2010
061305
koch
dalgaard
chem
phys
lett
212
1993
193
tomita
ten-no
tanimura
chem
phys
lett
263
1996
687
n.h.
morgon
phys
chem
102
1998
2050
g.e
scuseria
c.a
jim´enez-hoyos
t.m
henderson
samanta
j.k.
ellis
chem
phys
135
2011
124108
instance
bohr
b.r
mottelson
nuclear
structure
vol
ben-
jamin
1969
c.l
lawson
r.j.
hanson
kincaid
f.t
krogh
acm
trans
math
soft
1979
308
j.j.
dongarra
croz
hammarling
r.j.
hanson
acm
trans
math
soft
1988
j.j.
dongarra
croz
hammarling
r.j.
hanson
acm
trans
math
soft
1988
j.j.
dongarra
croz
i.s
duﬀ
hammarling
acm
trans
math
soft
1990
j.j.
dongarra
croz
i.s
duﬀ
hammarling
acm
trans
math
soft
1990
k.r
wadleigh
i.l
crawford
software
optimization
high
per-
formance
computing
creating
faster
applications
prentice
hall
2000
sarkar
harrod
a.e
snavely
phys
conf
ser
180
2009
012045
d.j
thouless
nucl
phys
1960
225
g.c
wick
phys
rev
1950
268
