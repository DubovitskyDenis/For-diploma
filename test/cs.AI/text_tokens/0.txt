ground
recurs
aggreg
preliminari
report
martin
roland
torsten
aalto
univers
hiit
inria
renn
univers
potsdam
abstract
problem
solv
answer
set
program
consist
two
step
ﬁrst
ground
phase
systemat
replac
variabl
term
second
solv
phase
comput
stabl
model
obtain
ground
gram
intric
part
phase
treatment
aggreg
popular
languag
construct
allow
express
properti
set
paper
elabor
upon
treatment
aggreg
ground
gringo
seri
consequ
approach
applic
ground
base
databas
evalu
techniqu
particular
provid
seri
algorithm
detail
treatment
recurs
aggreg
illustr
run
exampl
introduct
modern
grounder
like
one
dlv
gringo
base
databas
evalu
techniqu
avoid
duplic
work
ground
ground
seen
iter
process
guid
success
expans
program
herbrand
base
set
atom
construct
signatur
program
hand
process
ground
rule
duce
posit
bodi
atom
belong
current
herbrand
base
case
head
atom
ad
current
herbrand
base
basic
idea
databas
evalu
focu
process
new
atom
gener
iter
order
avoid
reproduc
ground
rule
idea
base
observ
product
new
ground
rule
reli
exist
atom
new
previou
iter
accordingli
ground
rule
produc
posit
bodi
contain
least
one
atom
produc
last
iter
follow
show
ground
framework
reli
upon
databas
evalu
techniqu
extend
incorpor
recurs
aggreg
exampl
aggreg
shown
tabl
give
encod
compani
control
problem
compani
control
compani
directli
indirectli
control
share
aggreg
sum
implement
tion
posit
integ
notabl
take
part
recurs
deﬁnit
tabl
correspond
problem
instanc
given
tabl
note
systemat
instanti
four
variabl
tabl
eight
constant
tabl
result
ground
rule
howev
taken
togeth
encod
instanc
equival
program
tabl
consist
four
ground
rule
fact
afﬁliat
simon
fraser
univers
canada
iii
grifﬁth
univers
australia
control
sum
own
control
own
compani
compani
tabl
compani
control
encod
compani
compani
compani
compani
own
own
own
own
tabl
compani
control
instanc
al
tabl
even
evalu
view
problem
instanc
moreov
allow
evalu
aggreg
atom
ground
pani
control
instanc
boil
four
fact
control
control
control
control
accordingli
goal
paper
elabor
upon
efﬁcient
comput
relev
ground
program
recurs
aggreg
section
start
recal
formal
preliminari
section
provid
basic
ground
rithm
pave
way
sophist
algorithm
address
sive
aggreg
section
summar
contribut
relat
state
art
section
develop
approach
implement
gringo
seri
formal
preliminari
section
recal
formal
preliminari
regard
syntax
semant
gringo
input
languag
develop
syntax
alphabet
consid
numer
symbol
constant
variabl
aggreg
name
along
symbol
numer
string
number
option
preced
minu
symbol
constant
string
letter
underscor
number
start
lowercas
letter
abl
string
letter
underscor
number
start
uppercas
term
numer
constant
variabl
term
given
constant
term
tupl
term
well
term
said
ground
equal
includ
treat
special
gringo
descript
beyond
scope
paper
use
denot
anonym
variabl
stand
uniqu
variabl
control
sum
own
compani
compani
control
sum
own
compani
compani
control
sum
own
control
own
compani
compani
control
sum
control
own
compani
compani
tabl
relev
ground
compani
control
interpret
numer
aggreg
numer
correspond
integ
total
order
ground
term
extend
numer
integ
ground
term
tupl
weight
ﬁrst
element
numer
form
otherwis
aggreg
name
associ
function
set
set
ground
term
tupl
set
ground
term
given
set
ground
term
tupl
sider
aggreg
deﬁn
dsum
weight
subset
tupl
weight
ﬁnite
weight
subset
tupl
posit
otherwis
weight
ﬁnite
atom
liter
symbol
atom
form
constant
term
tupl
comparison
atom
form
term
use
atom
denot
comparison
atom
fals
use
analog
simpl
liter
form
symbol
comparison
atom
aggreg
atom
form
aggreg
name
term
tupl
tupl
simpl
liter
one
symbol
term
also
call
guard
hold
numer
final
liter
form
either
symbol
comparison
aggreg
rule
program
rule
form
symbol
atom
liter
program
ﬁnite
set
rule
miscellan
deﬁnit
use
follow
project
function
rule
head
rule
form
bodi
rule
form
bodi
symbol
atom
bodi
symbol
atom
follow
bodi
liter
mark
binari
relat
hold
liter
bodi
rule
mark
mark
bodi
liter
indic
substitut
map
variabl
ground
term
repres
tution
set
form
variabl
ground
term
substitut
form
appli
liter
written
replac
occurr
variabl
correspond
term
moreov
associ
follow
occurr
aggreg
logic
program
uniqu
identiﬁ
use
refer
aggreg
tion
tupl
global
variabl
guard
aggreg
occurr
identiﬁ
refer
ground
guard
variabl
list
tupl
furthermor
replac
correspond
term
tupl
aggreg
togeth
relat
monoton
set
ground
term
tupl
ground
term
impli
semant
semant
program
rest
upon
translat
inﬁnitari
proposit
mula
along
stabl
model
ground
simpl
liter
map
via
proposit
atom
follow
ground
symbol
atom
relat
hold
otherwis
liter
global
variabl
variabl
global
simpl
liter
occur
liter
aggreg
liter
occur
guard
rule
global
head
bodi
liter
gringo
well
semant
underpin
also
allow
doubl
negat
liter
form
aggreg
liter
translat
extend
aggreg
atom
follow
instanc
aggreg
element
obtain
substitut
variabl
ground
term
let
stand
conjunct
applic
ground
simpl
liter
let
set
instanc
aggreg
element
set
justiﬁ
relat
hold
guard
conjunct
formula
set
justifi
neg
aggreg
liter
treat
analog
neg
simpl
liter
rule
program
instanc
rule
obtain
substitut
global
variabl
ground
term
set
formula
instanc
rule
program
stabl
model
stabl
model
logic
program
stabl
model
inﬁnitari
proposit
formula
safeti
rule
depend
graph
global
variabl
safe
rule
bound
posit
symbol
liter
rule
bodi
variabl
safe
aggreg
element
bound
posit
symbol
liter
correspond
aggreg
element
rule
safe
variabl
safe
program
safe
rule
safe
follow
consid
safe
program
rule
depend
graph
normal
logic
program
direct
graph
head
uniﬁ
posit
rule
depend
graph
deﬁn
similarli
consid
edg
induc
posit
liter
basic
ground
algorithm
section
provid
basic
algorithm
underli
evalu
base
ground
see
also
appli
normal
logic
program
thu
independ
treatment
recurs
aggreg
describ
next
section
illustr
basic
algorithm
mean
hamiltonian
cycl
use
graph
figur
graph
repres
problem
instanc
tabl
actual
problem
encod
given
result
hamiltonian
cycl
express
instanc
predic
detail
discuss
encod
found
uniﬁc
assum
variabl
distinct
even
name
http
node
node
node
node
start
edg
edg
edg
edg
edg
edg
edg
fig
hamiltonian
cycl
instanc
graph
tabl
hamiltonian
cycl
instanc
path
edg
omit
edg
path
path
path
path
path
path
node
reach
start
reach
reach
path
node
analyz
logic
program
function
analyz
given
algorithm
take
logic
program
classiﬁ
currenc
recurs
symbol
atom
group
rule
compon
suitabl
success
ground
classiﬁc
atom
use
appli
simpliﬁc
follow
algorithm
algorithm
analyz
ﬁrst
determin
strongli
connect
compon
program
depend
graph
line
graph
contain
depend
induc
itiv
neg
liter
outer
loop
line
iter
compon
topolog
compon
reﬁn
term
posit
pendenc
graph
line
set
recurs
symbol
atom
determin
line
bodi
liter
whose
atom
uniﬁ
head
rule
current
follow
ponent
final
reﬁn
compon
togeth
recurs
atom
append
list
line
list
result
algorithm
return
line
figur
show
depend
graph
encod
given
posit
edg
depict
solid
line
neg
one
dash
line
recurs
atom
typeset
bold
neg
edg
due
fact
path
neg
bodi
uniﬁ
path
head
furthermor
occurr
path
recurs
induc
edg
later
compon
topolog
order
hand
contrast
itiv
liter
recurs
neg
liter
depend
topolog
order
compon
preced
edg
function
analyz
let
depend
graph
strongli
connect
compon
foreach
let
posit
depend
graph
strongli
connect
compon
foreach
let
head
uniﬁ
return
algorithm
analyz
logic
program
ground
omit
edg
path
edg
path
path
path
path
path
path
node
reach
start
reach
reach
path
node
fig
hamiltonian
cycl
depend
graph
instanc
omit
would
recurs
topolog
order
obtain
chang
regard
occurr
reach
bodi
recurs
uniﬁ
head
rule
accordingli
induc
depend
graph
prepar
compon
ground
function
prepar
set
rule
compon
ground
recurs
atom
end
add
one
subscript
predic
name
atom
posit
rule
bodi
given
subscript
alphabet
section
allow
predic
name
subscript
ing
temporarili
extend
alphabet
predic
name
function
prepar
foreach
let
foreach
head
head
return
algorithm
prepar
compon
indic
new
old
atom
belong
current
materi
herbrand
base
turn
use
cours
databas
evalu
avoid
duplic
work
ground
compon
expand
herbrand
base
loop
line
iter
rule
compon
hand
rule
expand
set
rule
loop
line
recurs
atom
bodi
line
ﬁrst
row
line
predic
name
recurs
atom
alreadi
consid
set
receiv
subscript
predic
name
recurs
atom
receiv
subscript
second
row
recurs
atom
yet
consid
well
atom
posit
bodi
receiv
subscript
final
third
row
remain
bodi
liter
kept
unmodiﬁ
recurs
atom
line
subscript
ad
posit
bodi
element
ﬁrst
row
line
case
recurs
atom
remain
bodi
liter
kept
unmodiﬁ
second
row
result
prepar
compon
depend
graph
figur
given
figur
rule
contain
posit
bodi
liter
adorn
subscript
unlik
posit
bodi
liter
path
adorn
recurs
one
reach
receiv
subscript
sinc
one
recurs
bodi
atom
one
rule
gener
ground
rule
rule
ground
algorithm
reli
upon
two
auxiliari
function
first
function
order
return
safe
bodi
order
rule
safe
bodi
order
bodi
tupl
safe
exampl
runtim
instanti
algorithm
sensit
chosen
bodi
order
context
asp
heurist
order
bodi
liter
studi
omit
edg
path
edg
path
path
path
path
path
path
node
reach
start
reach
reachn
path
node
fig
prepar
hamiltonian
cycl
encod
safe
bodi
order
second
given
bolic
atom
substitut
set
ground
atom
function
match
return
set
match
match
substitut
instanc
match
yield
function
hand
assembl
basic
algorithm
groundrul
ground
individu
rule
algorithm
note
origin
rule
along
mark
ignor
context
relev
treat
aggreg
section
algorithm
proce
along
safe
bodi
order
determin
line
bodi
liter
remain
ground
rule
gener
line
provid
head
among
establish
fact
moreov
rule
focu
becom
fact
head
ad
line
remaind
constitut
case
analysi
upon
type
bodi
liter
posit
bodi
liter
instanc
ad
turn
partial
ground
bodi
match
howev
done
liter
mark
instanc
yet
belong
establish
fact
neg
bodi
liter
instanc
obtain
appli
current
substitut
ad
ground
bodi
done
liter
mark
liter
recurs
alreadi
deriv
substitut
instanc
fact
skip
altogeth
final
comparison
liter
directli
evalu
rule
instanti
pursu
test
success
illustr
trace
figur
applic
groundrul
rule
viz
omit
edg
figur
figur
also
give
rule
applic
function
prepar
posit
bodi
liter
free
subscript
condit
line
respect
tautolog
section
function
groundrul
let
origin
version
rule
function
head
head
head
els
foreach
match
els
els
true
rule
instanc
posit
liter
neg
liter
comparison
atom
order
bodi
return
algorithm
ground
rule
edg
omit
path
edg
omit
edg
omit
edg
omit
edg
omit
edg
omit
edg
omit
edg
omit
edg
edg
edg
edg
edg
edg
edg
fig
call
groundrul
content
respect
set
atom
tackl
ﬁrst
compon
figur
header
figur
contain
order
bodi
follow
rule
head
start
ﬁrst
posit
bodi
liter
edg
result
eight
distinct
match
edg
atom
result
set
match
connect
undirect
edg
figur
note
none
instanc
edg
ad
function
ground
foreach
analyz
repeat
foreach
prepar
groundrul
head
return
algorithm
ground
logic
program
empti
bodi
sinc
found
fact
look
trace
ﬁrst
match
observ
groundrul
next
call
empti
bodi
singleton
substitut
given
atom
path
fact
recurs
simpliﬁc
appli
indic
underlin
instanc
ad
bodi
follow
call
bodi
empti
tupl
substitut
result
ground
rule
omit
analog
six
match
result
instanc
ground
logic
program
function
put
togeth
algorithm
ground
entir
normal
logic
program
function
ground
take
partit
program
genuin
rule
atom
stem
fact
return
upon
termin
set
ground
stantiat
rule
latter
increment
construct
follow
topolog
order
compon
determin
analyz
turn
adorn
rule
prepar
compon
instanti
via
groundrul
loop
line
cute
whenev
compon
free
recurs
posit
bodi
liter
otherwis
new
head
atom
forthcom
accomplish
ulat
follow
set
atom
set
relev
atom
current
ground
step
set
atom
atom
newli
instanti
previou
ground
step
set
atom
new
previou
step
set
atom
result
current
ground
step
set
atom
correspond
fact
set
compris
relev
herbrand
base
algorithm
termin
illustr
let
trace
ground
figur
ground
last
one
compon
figur
precis
deal
prepar
version
contain
rule
viz
reach
reachn
path
recurs
natur
rule
result
three
iter
loop
line
reach
path
reach
reach
reach
path
reach
path
reach
reach
path
reach
path
reach
reach
path
reach
path
reach
reach
path
reach
reach
path
path
path
path
path
path
path
reach
reach
reach
reach
fig
ground
accordingli
index
atom
set
figur
reﬂect
state
respect
iter
moreov
provid
part
relev
ground
otherwis
convent
follow
one
figur
ﬁrst
iter
atom
reach
obtain
ground
use
obtain
rule
instanc
reach
path
reach
path
note
reach
remov
rule
bodi
belong
lish
fact
moreov
iter
yield
new
atom
reach
reach
use
next
iter
obtain
four
rule
instanc
reach
reach
path
reach
reach
path
reach
reach
path
reach
reach
path
unlik
simpliﬁc
perform
fact
involv
iter
bring
singl
new
atom
reach
yield
rule
instanc
reach
reach
path
function
rewrit
loop
stand
sign
aggreg
liter
foreach
bodi
let
uniqu
identiﬁ
global
variabl
replac
occurr
simpl
liter
accu
neutral
accu
tupl
aggr
accu
return
algorithm
rewrit
logic
program
iter
produc
new
atom
end
instanti
compon
ground
analog
within
singl
iter
due
lack
recurs
posit
bodi
liter
enforc
second
stop
criterion
line
algorithm
ground
recurs
aggreg
laid
foundat
ground
normal
logic
program
continu
treatment
recurs
aggreg
idea
translat
aggreg
atom
normal
logic
program
roughli
one
rule
per
aggreg
element
reus
basic
ground
machineri
much
possibl
addit
propag
take
place
end
result
aggreg
instanc
correspond
rule
rewrit
logic
program
aggreg
function
rewrit
given
algorithm
take
input
logic
program
possibl
recurs
aggreg
rewrit
normal
logic
program
addit
predic
captur
aggreg
aggreg
aggreg
occurr
replac
atom
form
aggr
line
uniqu
identiﬁ
associ
aggreg
occurr
global
variabl
occur
aggreg
idea
atom
cate
aggr
ground
rewrit
correspond
ground
aggreg
substitut
atom
ﬁnal
ground
repres
aggreg
element
like
auxiliari
rule
deﬁn
atom
form
accu
ad
line
global
variabl
tupl
aggreg
special
constant
neutral
idea
inspect
assum
predic
aggr
accu
use
elsewher
program
control
aggr
accu
neutral
accu
tupl
own
accu
tupl
control
own
aggr
accu
compani
compani
tabl
rewritten
compani
control
encod
ground
rule
atom
accu
head
enough
atom
accumul
satisfi
aggreg
correspond
atom
aggr
ad
herbrand
base
ground
program
ﬁrst
rule
line
handl
special
case
aggreg
satisﬁ
empti
set
tupl
aggreg
like
sum
bodi
contain
comparison
liter
check
whether
empti
aggreg
satisﬁ
furthermor
make
sure
rule
safe
instanti
purpos
simpl
liter
rule
aggreg
occur
ad
rule
bodi
via
function
henc
origin
rule
safe
auxiliari
rule
also
safe
global
variabl
bound
posit
symbol
liter
furthermor
liter
respons
bind
global
variabl
mark
via
second
set
rule
line
charg
accumul
tupl
aggreg
element
rule
bodi
contain
liter
condit
aggreg
element
well
mark
liter
necessari
ensur
rule
safeti
rememb
result
ground
rule
repres
ground
aggreg
atom
mark
use
distinguish
liter
belong
condit
reconstitut
aggreg
element
final
one
last
rule
ad
line
ensur
depend
induc
aggreg
kept
intact
sinc
rule
contain
never
produc
instanc
though
result
rewrit
compani
control
encod
tabl
given
tabl
global
variabl
singl
aggreg
occur
ﬁrst
atom
aggr
accu
sinc
empti
aggreg
satisﬁ
rule
accumul
neutral
tupl
never
produc
instanc
could
principl
drop
rewrit
analyz
prepar
logic
program
aggreg
figur
captur
result
function
analyz
prepar
call
compon
rewritten
compani
control
encod
tabl
rule
depend
fact
thu
induc
singleton
compon
contain
remain
rule
aggreg
compani
control
encod
recurs
compon
view
atom
control
second
aggreg
element
note
aggreg
element
involv
recurs
given
direct
share
accumul
via
rule
accu
neutral
accu
tupl
own
aggr
control
accu
tupl
controlsn
own
compani
compani
fig
depend
graph
compani
control
program
function
propag
foreach
accu
let
accu
tupl
relev
accu
tupl
relev
true
exist
wherebαi
aggreg
monoton
andbαi
aggr
aggr
return
algorithm
propag
aggreg
propag
aggreg
function
propag
inspect
partial
ground
aggreg
instanc
view
ground
aggreg
element
end
check
atom
predic
accu
obtain
ground
loop
line
iter
given
gregat
index
tupl
global
variabl
store
atom
predic
accu
appear
among
atom
whenev
enough
tupl
captur
atom
satisfi
correspond
aggreg
propag
add
atom
predic
aggr
instanti
line
collect
tupl
ili
accumul
aggreg
function
line
gather
tupl
whose
condit
possibl
hold
also
note
relev
check
skip
tupl
chang
result
aggreg
sum
aggreg
amount
exclud
weight
tupl
stipul
weight
given
set
tupl
line
check
whether
aggreg
satisﬁ
use
tupl
accumul
far
sum
aggreg
ﬂag
fals
line
check
whether
empti
relev
tupl
gather
function
assembl
foreach
aggr
occur
bodi
assum
convert
tupl
liter
let
bodi
head
accu
tupl
replac
occurr
aggr
remov
rule
atom
accu
head
return
algorithm
assembl
aggreg
gregat
test
ad
weight
factual
tupl
one
hand
neg
weight
obtain
minimum
min
posit
weight
obtain
maximum
max
depend
relat
aggreg
satisﬁ
max
min
min
true
true
max
true
test
line
succe
ground
aggreg
atom
ad
new
atom
line
addit
given
monoton
aggreg
correspond
ground
aggreg
atom
ad
whenev
aggreg
found
true
point
aggreg
true
element
fact
line
monoton
aggreg
true
enough
fact
satisfi
aggreg
late
line
final
set
new
factual
atom
return
line
assembl
aggreg
rewrit
decompos
aggreg
atom
normal
program
rule
assembl
given
algorithm
reconstruct
ground
counterpart
rewritten
ground
program
occurr
atom
form
aggr
place
correspond
aggreg
aggreg
element
construct
rule
head
atom
accu
tupl
line
element
consist
term
tupl
along
condit
express
rule
actual
replac
take
place
line
follow
delet
obsolet
rule
line
final
reconstruct
ground
program
return
line
ground
logic
program
aggreg
algorithm
extend
ground
function
algorithm
logic
program
aggreg
end
extend
ground
function
us
algorithm
rewrit
propag
assembl
previou
subsect
chang
rithm
highlight
gray
background
part
left
untouch
ﬁrst
chang
line
function
rewrit
call
turn
logic
program
normal
logic
program
call
analyz
line
recal
mark
liter
ad
safeti
strip
groundrul
algorithm
function
ground
foreach
analyz
rewrit
let
aggr
occur
rule
head
head
accu
repeat
foreach
prepar
groundrul
head
propag
fals
propag
true
return
assembl
algorithm
ground
logic
program
aggreg
ad
loop
charg
ground
compon
gregat
index
propag
instanti
compon
collect
first
index
rule
aggr
head
appear
ponent
gather
rememb
rule
contribut
instanc
belong
bodi
third
row
line
algorithm
instead
propag
ad
atom
aggr
second
line
aggreg
index
associ
recurs
aggreg
collect
posit
recurs
involv
gate
element
indic
rule
head
atom
accu
yet
without
consid
auxiliari
bodi
part
mark
collect
index
line
use
propag
correspond
gregat
current
compon
propag
aggreg
trigger
whenev
new
atom
obtain
ground
loop
line
first
recurs
aggreg
instanti
point
least
one
ground
atom
form
accu
aggreg
element
correspond
gate
uniqu
determin
term
global
variabl
gather
aggreg
thu
propag
function
propag
appli
addit
pliﬁcat
line
algorithm
afterward
recurs
aggreg
propag
line
case
assum
aggreg
element
alreadi
accumul
propag
thu
use
simpliﬁc
applic
aggreg
distinct
implement
ting
second
argument
propag
true
final
line
aggreg
reconstruct
intermedi
ground
call
function
assembl
propag
propag
propag
accu
aggr
control
compani
own
neutral
tupl
fig
ground
compani
control
figur
trace
whole
ground
process
rewritten
compani
control
code
given
figur
ground
compon
separ
horizont
doubl
line
instanti
compon
shown
analog
figur
due
lack
space
refrain
give
set
compon
indic
number
right
contain
rule
list
ﬁrst
follow
ground
iter
compon
focu
iter
separ
solid
line
index
iter
number
right
instanc
three
rule
separ
dash
line
symbol
indic
bodi
liter
match
correspond
case
groundrul
function
algorithm
backtrack
ground
produc
rule
instanc
comparison
atom
fals
put
liter
ﬁrst
safe
bodi
order
remain
rule
bodi
complet
ignor
next
ground
direct
share
given
fact
accumul
obtain
atom
accu
classiﬁ
fact
well
trace
ground
ﬁrst
iter
none
rule
produc
instanc
atom
aggr
yet
henc
aggreg
propag
trigger
result
aggreg
atom
aggr
aggr
enough
share
accumul
upon
ground
note
sinc
aggreg
tone
atom
establish
fact
second
iter
newli
obtain
aggreg
atom
use
instanti
second
rule
compon
lead
new
atom
observ
put
aggr
ﬁrst
safe
bodi
order
groundrul
instanti
rule
without
backtrack
third
ation
newli
obtain
atom
yield
accu
via
instanc
third
rule
compon
turn
lead
aggreg
atom
aggr
follow
iter
proceed
similar
fashion
new
tupl
accumul
ground
loop
termin
conﬁn
origin
predic
instanti
gener
four
atom
control
control
control
control
produc
fact
note
util
safe
bodi
order
affect
amount
backtrack
rule
instanti
one
particular
strategi
use
gringo
prefer
recurs
atom
subscript
order
rule
bodi
seen
ground
help
avoid
backtrack
upon
gener
new
rule
instanc
compani
control
encod
simpliﬁc
ensur
program
evalu
fact
gener
guarante
program
stratiﬁ
negat
monoton
aggreg
discuss
present
algorithm
framework
ground
logic
program
base
databas
evalu
techniqu
framework
implement
gringo
seri
constitut
ﬁrst
approach
captur
aggreg
ferrari
semant
evalu
techniqu
trace
back
ﬁeld
databas
system
introduct
ground
asp
pioneer
dlv
system
lay
basic
ground
algorithm
ilar
section
given
proxim
ground
techniqu
handl
recurs
aggreg
could
adopt
within
dlv
far
restrict
ﬁed
aggreg
ground
approach
pursu
gidl
lpars
earlier
version
gringo
latter
two
also
support
recurs
vex
aggreg
limit
necess
bind
variabl
domain
predic
given
program
respect
like
approach
mere
reli
safeti
condit
restrict
impos
input
languag
regard
implement
approach
aim
reus
exist
ground
techniqu
normal
logic
program
end
program
aggreg
rewritten
convent
evalu
extend
propag
step
aggreg
eventu
ground
aggreg
reconstruct
obtain
rule
instanc
step
present
paper
consid
sum
sum
aggreg
approach
applic
aggreg
function
fact
count
min
max
aggreg
also
support
gringo
seri
easili
amen
aggreg
extend
propag
function
acknowledg
work
fund
aof
grant
dfg
grant
scha
well
daad
aof
joint
project
refer
faber
leon
perri
intellig
grounder
dlv
gebser
kaminski
könig
schaub
advanc
gringo
seri
delgrand
faber
ed
proceed
eleventh
intern
confer
logic
ming
nonmonoton
reason
lpnmr
ullman
principl
databas
system
comput
scienc
press
abiteboul
hull
vianu
foundat
databas
mumick
pirahesh
ramakrishnan
magic
duplic
aggreg
mcleod
schek
ed
proceed
sixteenth
intern
confer
larg
data
base
vldb
morgan
kaufmann
publish
gebser
harrison
kaminski
lifschitz
schaub
abstract
gringo
theori
practic
logic
program
connect
asp
logic
reduct
niemelä
logic
program
stabl
model
semant
constraint
program
paradigm
annal
mathemat
artiﬁci
intellig
marek
stabl
model
altern
logic
program
paradigm
apt
marek
warren
ed
logic
program
paradigm
perspect
gebser
kaminski
kaufmann
schaub
answer
set
solv
practic
gan
claypool
publish
leon
perri
scarcello
improv
asp
instanti
method
alviano
calimeri
faber
leon
perri
unfound
set
semant
answer
set
program
aggreg
journal
artiﬁci
intellig
research
ferrari
logic
program
proposit
connect
aggreg
acm
tion
comput
logic
leon
pfeifer
faber
eiter
gottlob
perri
scarcello
dlv
system
knowledg
represent
reason
acm
transact
comput
logic
wittocx
mariën
deneck
ground
bound
journal
artiﬁci
intellig
research
syrjänen
logic
program
gebser
schaub
thiel
gringo
new
grounder
answer
set
program
baral
brewka
schlipf
ed
proceed
ninth
intern
confer
logic
program
nonmonoton
reason
lpnmr
gebser
kaminski
ostrowski
schaub
thiel
input
languag
asp
grounder
gringo
erdem
lin
schaub
ed
proceed
tenth
nation
confer
logic
program
nonmonoton
reason
lpnmr
erdem
lee
lierler
pearc
ed
correct
reason
essay
honour
vladimir
lifschitz
eiter
faber
ed
proceed
sixth
intern
enc
logic
program
nonmonoton
reason
lpnmr
