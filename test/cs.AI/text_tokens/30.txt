consider
public
theori
practic
logic
program
asp
solv
extern
sourc
thoma
eiter
michael
fink
thoma
krennwalln
christoph
institut
informationssystem
technisch
wien
favoritenstraß
vienna
austria
eiter
fink
tkren
redl
submit
januari
revis
januari
accept
januari
abstract
answer
set
program
asp
problem
solv
approach
base
nonmonoton
logic
program
efﬁcient
solver
enabl
access
extern
inform
extend
program
extern
atom
allow
bidirect
commun
logic
program
extern
sourc
comput
descript
logic
reason
web
resourc
current
solver
evalu
translat
asp
valu
extern
atom
guess
veriﬁ
ordinari
answer
set
comput
eleg
approach
scale
number
extern
access
gener
particular
presenc
nondetermin
instrument
asp
paper
present
novel
nativ
algorithm
evalu
us
learn
techniqu
particular
extend
asp
solv
techniqu
prevent
solver
run
conﬂict
ordinari
show
gain
addit
knowledg
extern
sourc
evalu
use
algorithm
ﬁrst
target
uninform
case
extra
inform
extern
sourc
extend
approach
case
addit
avail
experi
show
learn
extern
sourc
signiﬁcantli
decreas
runtim
number
consid
candid
compat
set
keyword
answer
set
program
nonmonoton
reason
claus
ing
introduct
answer
set
program
asp
declar
program
approach
marek
lifschitz
solut
problem
correspond
answer
set
gelfond
lifschitz
logic
program
comput
use
asp
solver
approach
turn
thank
express
efﬁcient
tem
like
smodel
simon
dlv
leon
assat
lin
zhao
cmodel
giunchiglia
clasp
gebser
gebser
fruit
rang
applic
brewka
current
trend
distribut
system
world
wide
web
instanc
reveal
need
access
extern
sourc
program
rang
data
access
xml
rdf
data
base
formal
descript
logic
cater
need
eiter
extend
asp
call
research
support
austrian
scienc
fund
fwf
project
vienna
scienc
technolog
fund
wwtf
project
ict
eiter
extern
atom
user
coupl
extern
data
sourc
logic
program
roughli
atom
pa
inform
program
given
predic
constant
extern
sourc
return
output
valu
abstract
function
comput
extens
conveni
exploit
applic
differ
area
eiter
also
express
sinc
recurs
data
exchang
logic
program
extern
sourc
possibl
advanc
reason
applic
like
default
reason
descript
logic
ontolog
eiter
tran
reason
nonmonoton
system
brewka
eiter
eiter
take
advantag
current
algorithm
evalu
use
translat
approach
rewrit
ordinari
asp
program
idea
guess
truth
valu
extern
atom
whether
particular
fact
output
extern
sourc
access
modiﬁ
program
comput
answer
set
compat
test
check
whether
guess
coincid
actual
sourc
behavior
eleg
approach
bottleneck
advanc
applic
includ
mention
scale
blind
guess
lead
explos
candid
answer
set
mani
might
fail
compat
test
furthermor
blackbox
view
extern
sourc
disabl
prune
search
space
asp
translat
even
properti
would
known
sheer
imposs
make
use
ordinari
asp
evalu
use
standard
solver
overcom
bottleneck
new
evalu
method
need
paper
thu
present
novel
algorithm
evalu
describ
section
avoid
simpl
asp
translat
approach
three
key
featur
first
nativ
build
model
candid
ﬁrst
principl
access
extern
sourc
alreadi
model
search
allow
prune
candid
earli
second
consid
extern
sourc
longer
black
box
exploit
intern
third
take
modern
sat
asp
solv
techniqu
base
claus
ing
bier
led
efﬁcient
algorithm
set
comput
gebser
drescher
extend
extern
sourc
major
contribut
work
end
introduc
extern
behavior
learn
ebl
gener
conﬂict
claus
nogood
extern
sourc
evalu
section
section
ﬁrst
uninform
case
section
extern
sourc
avail
except
certain
put
gener
certain
output
exploit
extern
sourc
properti
monoton
function
learn
even
effect
nogood
restrict
search
space
section
implement
new
algorithm
incorpor
dlvhex
prototyp
design
extens
fashion
provid
extern
sourc
specifi
reﬁn
learn
function
exploit
speciﬁc
knowledg
sourc
theoret
work
conﬁrm
experi
conduct
prototyp
synthet
benchmark
program
motiv
applic
section
confus
semant
annot
data
consid
http
theori
practic
logic
program
sever
case
signiﬁc
perform
improv
compar
previou
algorithm
obtain
show
suitabl
potenti
new
approach
preliminari
section
introduc
syntax
semant
follow
drescher
sat
answer
set
solv
start
basic
deﬁnit
sign
liter
posit
negat
ground
atom
ground
atom
form
predic
free
ground
term
abbrevi
liter
let
denot
negat
assign
ﬁnite
set
atom
consist
set
sign
liter
express
true
fals
write
refer
set
element
refer
extens
predic
symbol
wrt
assign
deﬁn
ext
let
set
sign
liter
atom
form
list
predic
let
nogood
set
sign
liter
assign
solut
nogood
resp
set
nogood
iff
resp
brieﬂi
recal
introduc
eiter
eral
disjunct
extend
logic
program
answer
set
semant
fond
lifschitz
detail
background
refer
eiter
syntax
extend
ordinari
asp
program
extern
atom
enabl
bidirect
interact
program
extern
sourc
comput
extern
atom
list
input
paramet
constant
predic
name
list
output
paramet
inform
evalu
extern
atom
reason
pass
constant
extens
predic
input
tupl
extern
sourc
associ
extern
atom
plug
reason
extern
sourc
comput
output
tupl
match
output
list
formal
ground
extern
atom
form
constant
input
paramet
predic
name
object
constant
constant
output
term
ground
deﬁn
similar
ground
ordinari
asp
program
deﬁnit
ground
ground
consist
rule
form
ground
atom
constant
either
classic
ground
atom
ground
extern
head
rule
bodi
simplic
formal
introduc
strong
negat
see
classic
liter
form
new
atom
togeth
constraint
disallow
simultan
true
eiter
call
rule
bodi
default
liter
posit
bodi
neg
bodi
section
also
make
use
program
howev
restrict
theoret
investig
ground
program
suitabl
safeti
condit
allow
applic
ground
procedur
eiter
semant
evalu
semant
ground
extern
atom
wrt
assign
given
valu
boolean
oracl
function
deﬁn
possibl
valu
thu
true
rel
hold
satisfact
ordinari
rule
asp
program
gelfond
lifschitz
extend
program
obviou
way
notion
extens
ext
extern
predic
input
list
natur
deﬁn
ext
answer
set
determin
dlvhex
solver
use
transform
ordinari
asp
program
follow
extern
atom
replac
ordinari
ground
replac
atom
rule
ad
program
answer
set
result
guess
gram
determin
ordinari
asp
solver
project
atom
howev
result
assign
necessarili
model
valu
differ
one
answer
set
thu
didat
compat
set
model
candid
must
check
extern
sourc
discrep
found
model
candid
compat
set
precis
deﬁnit
compat
set
compat
set
program
assign
answer
set
gelfond
lifschitz
guess
program
iff
extern
atom
guess
valu
coincid
actual
output
input
compat
set
comput
dlvhex
includ
modulo
answer
set
deﬁn
eiter
use
flp
reduct
faber
refer
set
addit
test
candid
answer
set
easili
formul
compat
set
exist
variant
set
obtain
default
dlvhex
comput
compat
set
smallest
true
part
origin
atom
lead
answer
set
follow
deﬁnit
answer
set
dlvhex
answer
set
set
compat
set
everi
compat
set
answer
set
deﬁnit
includ
set
fact
often
coincid
exampl
consid
comput
minim
compat
set
thu
key
problem
focu
claus
learn
nonchronolog
backtrack
recal
sat
solver
reli
altern
draw
determinist
quenc
guess
truth
valu
atom
toward
complet
interpret
minist
consequ
drawn
basic
oper
unit
propag
whenev
theori
practic
logic
program
one
sign
liter
nogood
satisﬁ
last
one
must
fals
solver
store
integ
decis
level
written
postﬁx
sign
liter
atom
set
unit
propag
get
highest
decis
level
alreadi
assign
atom
wherea
guess
increment
current
decis
level
modern
sat
solver
learn
addit
nogood
current
assign
violat
nogood
prevent
solver
run
conﬂict
learn
nogood
determin
initi
set
conﬂict
nogood
violat
one
long
contain
multipl
liter
decis
level
resolv
reason
one
liter
nogood
impli
exampl
consid
nogood
suppos
assign
third
good
unit
impli
violat
fourth
nogood
contain
multipl
liter
set
decis
level
resolv
reason
set
fals
nogood
result
nogood
contain
singl
liter
set
decis
level
thu
learn
nogood
standard
claus
notat
nogood
set
correspond
violat
claus
resolv
result
learn
claus
sat
asp
solver
backtrack
decis
level
learn
nogood
exampl
decis
level
assign
decis
level
undon
variabl
remain
assign
make
new
nogood
unit
deriv
decis
level
asp
solv
subsect
summar
disjunct
solv
gebser
drescher
correspond
algorithm
without
part
section
also
discu
part
subsequ
provid
summari
base
algorithm
detail
refer
gebser
drescher
employ
techniqu
sat
solv
asp
program
sent
set
nogood
program
let
set
atom
occur
let
set
rule
bodi
view
fresh
atom
ﬁrst
deﬁn
set
nogood
encod
set
default
liter
must
assign
term
conjunct
element
conjunct
true
iff
liter
true
clark
complet
program
atom
set
nogood
bodi
rule
true
iff
liter
true
bodi
true
head
liter
must
eiter
also
true
unless
program
tight
fage
clark
complet
fulli
captur
semant
program
unfound
set
may
occur
set
atom
cyclic
support
call
loop
avoid
unfound
set
requir
addit
loop
nogood
exponenti
mani
introduc
disjunct
program
requir
addit
concept
neglect
detail
common
use
addit
nogood
θsh
deriv
shift
program
encod
loop
formula
singleton
loop
comprehens
studi
avail
drescher
concept
readi
describ
basic
algorithm
answer
set
tation
shown
algorithm
keep
set
θsh
static
nogood
clark
complet
singular
loop
set
dynam
nogood
learn
conﬂict
unfound
set
execut
construct
assign
algorithm
store
atom
decis
level
decis
level
initi
increment
choic
determinist
consequ
set
assign
valu
decis
level
highest
decis
level
set
main
loop
iter
deriv
determinist
consequ
use
propag
tri
complet
assign
includ
unit
propag
unfound
set
agat
unit
propag
deriv
nogood
one
liter
nogood
satisﬁ
therefor
last
one
need
falsiﬁ
unfound
set
propag
detect
atom
cyclic
support
falsiﬁ
part
check
conﬂict
violat
nogood
case
need
backtrack
purpos
use
analysi
comput
learn
nogood
backtrack
decis
level
learn
nogood
ad
set
dynam
good
assign
decis
level
undon
otherwis
part
check
assign
complet
case
ﬁnal
unfound
set
check
necessari
due
disjunct
head
candid
found
answer
set
otherwis
select
violat
loop
nogood
set
loop
nogood
unfound
set
deﬁnit
see
drescher
conﬂict
analysi
backtrack
determinist
consequ
deriv
assign
still
incomplet
need
guess
part
increment
decis
level
function
select
implement
variabl
select
heurist
simplest
case
choos
arbitrari
yet
unassign
variabl
heurist
sophist
goldberg
novikov
prefer
variabl
involv
recent
conﬂict
algorithm
solv
present
new
genuin
algorithm
evalu
base
drescher
integr
addit
novel
learn
techniqu
captur
semant
extern
atom
term
learn
refer
process
ad
nogood
nogood
set
search
space
explor
classic
deriv
conﬂict
situat
avoid
similar
conﬂict
search
describ
add
second
type
learn
captur
behavior
extern
sourc
call
extern
behavior
learn
ebl
whenev
extern
atom
evalu
algorithm
theori
practic
logic
program
algorithm
input
output
answer
set
ext
atom
replac
add
guess
rule
replac
atom
set
dynam
nogood
set
compat
set
inconsist
fals
inconsist
fals
inconsist
true
els
compat
true
extern
atom
evalu
let
add
compat
fals
compat
inconsist
fals
compat
set
algorithm
input
program
guess
program
set
correct
nogood
output
answer
set
candid
compat
set
solut
nogood
none
exist
decis
level
true
propag
θsh
return
analysi
els
unfoundedset
let
return
analysi
els
return
els
heurist
decid
evalu
evalu
set
return
els
select
might
learn
call
inform
intern
sourc
may
learn
gener
inform
learn
effect
nogood
gener
associ
extern
sourc
sake
introduc
evalu
algorithm
howev
section
abstractli
consid
set
nogood
learn
evalu
extern
predic
input
list
evalu
assign
denot
next
section
provid
deﬁnit
particular
nogood
learn
variou
type
extern
sourc
instanti
crucial
ment
learn
nogood
correct
intuit
hold
nogood
ad
without
elimin
compat
set
deﬁnit
correct
nogood
nogood
correct
wrt
program
compat
set
solut
subsequ
exposit
assum
program
clear
context
overal
approach
consist
two
part
first
comput
model
candid
essenti
ordinari
asp
solver
includ
call
extern
sourc
order
learn
addit
nogood
extern
call
algorithm
requir
ness
algorithm
may
inﬂuenc
perform
dramat
discuss
tion
second
algorithm
us
algorithm
produc
model
didat
check
extern
sourc
follow
minim
check
extern
call
crucial
correct
algorithm
comput
model
candid
basic
employ
proach
present
drescher
summar
section
main
eiter
ferenc
addit
part
extens
driven
follow
idea
whenev
unit
unfound
set
propag
deriv
atom
assign
still
incomplet
algorithm
possibl
evalu
extern
atom
driven
heurist
instead
simpli
guess
truth
valu
might
lead
addit
new
nogood
turn
caus
propag
procedur
deriv
atom
guess
truth
valu
becom
necessari
determinist
conclus
drawn
evalu
extern
atom
yield
nogood
guess
also
occur
heurist
decid
evalu
formal
treatment
let
set
extern
predic
input
list
occur
let
set
sign
liter
atom
learn
function
map
extend
notion
correct
nogood
correct
learn
function
follow
deﬁnit
learn
function
correct
program
iff
correct
restrict
learn
function
correct
follow
result
hold
proposit
input
return
interpret
answer
set
solut
compat
set
solut
proof
sketch
proof
mainli
follow
drescher
algorithm
potenti
nogood
never
produc
answer
set
inat
henc
produc
interpret
answer
set
plete
drescher
need
justifi
ad
evalu
elimin
compat
set
purpos
need
show
one
ad
nogood
ﬁre
interpret
incompat
extern
sourc
anyway
follow
correct
deriv
nogood
complet
drescher
basic
idea
comput
compat
set
loop
check
afterward
comput
compat
set
loop
us
comput
answer
set
candid
compat
set
subsequ
check
compat
extern
atom
extern
call
crucial
correct
howev
differ
translat
approach
ternal
sourc
evalu
serf
compat
check
also
gener
addit
dynam
nogood
part
follow
result
proposit
comput
answer
set
proof
sketch
ﬁrst
show
loop
yield
termin
compat
set
solut
stage
enter
loop
iff
compat
set
exist
yield
iff
compat
set
exist
suppos
loop
assign
return
proposit
follow
answer
set
solut
thu
deﬁnit
hold
compat
true
loop
guarante
compat
extern
sourc
deﬁnit
sourc
output
input
compat
guess
reject
ad
theori
practic
logic
program
nogood
otherwis
coincid
behavior
extern
sourc
satisﬁ
deﬁnit
thu
compat
set
wrt
call
time
correct
nogood
ad
also
compat
set
wrt
initi
set
otherwis
loop
inconsist
true
mean
call
return
proposit
answer
set
solut
correct
nogood
ad
exist
also
answer
set
solut
origin
set
thu
loop
oper
desir
loop
enumer
one
one
compat
set
termin
updat
prevent
recomput
thu
number
compat
set
decreas
deﬁnit
answer
set
compat
set
true
part
origin
liter
overal
algorithm
correctli
output
answer
set
exampl
let
empti
extern
atom
one
nonmonoton
predic
input
output
extens
empti
otherwis
consid
program
consist
rule
dom
dom
dom
dom
empti
algorithm
transform
guess
program
ˆπe
dom
dom
dom
dom
empti
empti
empti
dom
tradit
evalu
strategi
without
learn
produc
model
date
subsequ
check
instanc
guess
tne
empti
empti
tne
empti
lead
model
candid
tne
empti
empti
tne
empti
neglect
fals
atom
fact
also
model
candiat
pass
compat
check
alway
true
therefor
empti
must
also
true
due
deﬁnit
extern
atom
allow
deriv
ﬁrst
rule
program
atom
fals
due
minim
answer
set
effect
addit
learn
nogood
discuss
section
formal
speciﬁ
concret
variou
type
extern
sourc
nogood
extern
behavior
learn
discu
nogood
gener
extern
behavior
learn
ebl
detail
ebl
trigger
extern
sourc
evalu
instead
conﬂict
basic
idea
integr
knowledg
extern
sourc
behavior
program
guid
search
program
evalu
start
empti
set
learn
nogood
preprocessor
gener
guess
rule
ground
extern
atom
discuss
section
ther
nogood
ad
evalu
inform
extern
sourc
becom
avail
contrast
tradit
evalu
extern
atom
assign
arbitrari
truth
valu
check
assign
complet
ﬁrst
show
construct
use
learn
nogood
evalu
extern
atom
inform
intern
extern
sourc
call
inform
learn
case
learn
simpl
relationship
quentli
consid
inform
learn
addit
inform
properti
extern
sourc
avail
allow
use
elabor
learn
strategi
eiter
tabl
learn
nogood
exampl
tne
empti
learn
nogood
guess
empti
empti
tne
empti
empti
tne
empti
empti
empti
empti
empti
empti
empti
empti
empti
tne
empti
empti
uninform
learn
ﬁrst
assum
inform
intern
consid
extern
sourc
black
box
henc
appli
gener
rule
learn
ever
extern
predic
input
list
evalu
assign
learn
input
extern
atom
produc
output
ext
formal
follow
set
nogood
deﬁnit
learn
function
gener
extern
predic
input
list
program
assign
deﬁn
ext
simplest
case
extern
atom
input
learn
nogood
unari
form
thu
learn
certain
tupl
output
extern
sourc
must
fals
extern
sourc
input
predic
ad
rule
encod
relationship
output
tupl
provid
input
exampl
ctd
recal
exampl
without
learn
algorithm
produc
model
candid
check
subsequ
turn
ebl
allow
cation
guess
without
actual
evalu
extern
atom
suppos
reason
ﬁrst
tri
guess
contain
liter
empti
check
extern
sourc
describ
learn
function
allow
ad
nalli
learn
nogood
shown
tabl
observ
combin
reconstruct
also
differ
choic
guess
variabl
fact
true
independ
choic
empti
empti
guess
empti
empti
empti
lead
extens
allow
reus
nogood
immedi
invalid
without
evalu
extern
atom
differ
guess
input
extern
sourc
allow
reus
learn
nogood
latest
candid
complet
ternal
sourc
call
valid
howev
often
learn
allow
discard
guess
even
earlier
instanc
deriv
empti
good
resolut
step
deriv
nogood
learn
run
coupl
conﬂict
deriv
empti
even
truth
valu
empti
set
extern
learn
guid
search
tradit
uation
algorithm
consid
behavior
extern
sourc
postprocess
theori
practic
logic
program
next
result
let
program
contain
extern
atom
form
lemma
assign
nogood
def
correct
wrt
proof
sketch
ad
nogood
output
tupl
ext
contain
negat
replac
atom
nogood
ﬁre
guess
wrong
replac
atom
guess
fals
tupl
output
henc
interpret
compat
answer
set
anyway
inform
learn
learn
nogood
form
becom
quit
larg
includ
whole
input
extern
sourc
howev
known
properti
extern
sourc
ploit
order
learn
smaller
gener
nogood
exampl
one
input
paramet
extern
sourc
monoton
necessari
includ
tion
fals
atom
extens
output
shrink
given
larger
input
properti
inform
learn
state
level
either
predic
vidual
extern
atom
former
mean
usag
predic
properti
understand
consid
predic
union
take
two
predic
input
comput
set
element
least
one
extens
alway
monoton
paramet
independ
usag
program
extern
sourc
may
lack
properti
gener
may
hold
particular
usag
exampl
consid
extern
atom
queri
interfac
sql
queri
processor
evalu
given
queri
given
string
tabl
tion
provid
predic
gener
atom
nonmonoton
special
queri
simpl
select
tupl
monoton
next
discu
two
particular
case
inform
learn
custom
default
learn
function
gener
extern
sourc
exploit
properti
extern
sourc
ﬁnalli
present
exampl
learn
nogood
might
use
monoton
atom
paramet
extern
atom
call
monoton
impli
learn
nogood
evalu
requir
includ
fpi
monoton
extern
predic
put
list
monoton
input
paramet
nonmonoton
paramet
set
learn
nogood
restrict
follow
deﬁnit
learn
function
extern
predic
input
list
gram
assign
monoton
deﬁn
ext
exampl
consid
extern
atom
diﬀ
comput
set
ement
extens
extens
suppos
evalu
ext
ext
output
atom
ext
diﬀ
naiv
learn
nogood
diﬀ
howev
due
monoton
diﬀ
necessari
includ
nogood
eiter
output
extern
sourc
shrink
even
becom
true
therefor
gener
nogood
diﬀ
sufﬁc
correctli
describ
behavior
function
atom
evalu
function
assign
one
output
tupl
contain
ext
formal
assign
therefor
ing
nogood
may
ad
right
begin
deﬁnit
learn
function
function
extern
predic
input
list
program
assign
deﬁn
howev
implement
learn
rule
gener
pair
output
tupl
beforehand
instead
memor
gener
output
tupl
evalu
extern
sourc
whenev
new
output
tupl
ad
also
add
nogood
forc
previous
deriv
output
tupl
fals
exampl
consid
rule
concat
string
dom
string
dom
concat
true
iff
string
concaten
string
observ
extern
atom
involv
cycl
negat
extens
domain
dom
larg
mani
ground
instanc
extern
atom
ate
old
evalu
algorithm
guess
truth
valu
complet
uninform
concat
replac
atom
concat
dom
dom
suppos
fact
guess
set
randomli
true
fals
independ
previou
guess
contrast
learn
extern
sourc
algorithm
learn
ﬁrst
evalu
concat
must
true
know
concat
function
atom
concat
must
also
fals
next
result
let
program
contain
extern
atom
form
lemma
assign
nogood
def
correct
wrt
function
nogood
def
correct
wrt
proof
sketch
monoton
extern
sourc
must
show
neg
input
liter
monoton
paramet
remov
learn
nogood
without
affect
correct
uninform
learn
argu
output
tupl
ext
replac
atom
must
guess
fals
input
assign
howev
output
grow
monoton
extens
monoton
paramet
appli
larger
consequ
henc
neg
liter
relev
wrt
output
tupl
remov
nogood
function
must
show
nogood
correct
due
function
extern
sourc
return
one
output
ple
input
therefor
guess
answer
set
compat
henc
nogood
elimin
possibl
answer
set
theori
practic
logic
program
learn
mani
case
develop
extern
atom
format
intern
behavior
allow
deﬁn
effect
nogood
therefor
beneﬁci
give
user
possibl
custom
learn
function
current
function
need
directli
specifi
learn
nogood
velop
languag
write
learn
function
subject
futur
work
exampl
consid
program
guess
set
node
subgraph
complet
graph
suppos
check
edg
select
transit
close
case
output
empti
otherwis
set
miss
transit
edg
return
instanc
extens
output
edg
miss
order
make
graph
transit
close
second
rule
elimin
subgraph
transit
close
note
nonmonoton
guess
program
naiv
implement
guess
node
subgraph
check
sitiv
closur
costli
consid
domain
check
one
select
know
select
tain
three
liter
transit
close
formal
deﬁn
learn
function
suppos
check
ﬁrst
guess
compar
nogood
learn
eral
learn
function
nogood
gener
descript
conﬂict
reason
contain
relev
edg
immedi
violat
futur
guess
contain
avoid
exampl
linear
use
learn
function
diﬀ
follow
whenev
element
belong
output
extern
atom
function
work
elementwis
produc
nogood
three
liter
call
properti
linear
contrast
naiv
learn
function
section
includ
complet
extens
nogood
le
gener
learn
correct
learn
function
must
assert
implement
evalu
integr
clasp
reason
dlvhex
previou
version
dlvhex
use
dlv
order
learn
nogood
extern
sourc
exploit
clasp
smt
face
previous
use
special
case
constraint
answer
set
solv
implement
clingcon
system
gebser
ostrowski
schaub
compar
three
conﬁgur
dlvhex
dlv
backend
dlvhex
driven
clasp
backend
without
ebl
dlvhex
clasp
backend
ebl
eiter
experi
use
variant
exampl
dlvhex
test
suit
default
reason
ontolog
appear
learn
high
potenti
duce
number
candid
model
also
number
total
variabl
assign
backtrack
search
decreas
drastic
mani
case
suggest
candid
reject
often
need
part
interpret
possibl
earli
evalu
benchmark
carri
machin
two
amd
opteron
cpu
ram
run
linux
use
clasp
dlv
dec
solver
backend
benchmark
instanc
averag
three
run
calcul
timeout
second
memout
run
report
runtim
second
gain
speedup
given
factor
set
partit
follow
program
partit
set
two
subset
partit
criterion
express
two
rule
implement
use
extern
atom
diﬀ
exampl
dom
dom
nsel
dom
diﬀ
dom
sel
sel
dom
diﬀ
dom
nsel
sel
sel
sel
result
tabl
compar
run
reason
differ
conﬁgur
comput
model
resp
ﬁrst
model
case
use
clasp
reason
instead
dlv
backend
alreadi
improv
efﬁcienc
ad
ebl
lead
improv
case
formerli
exponenti
grow
runtim
becom
almost
constant
comput
answer
set
runtim
still
exponenti
nential
mani
subset
choic
must
consid
due
encod
howev
also
case
mani
prune
earli
learn
make
runtim
appear
linear
shown
rang
instanc
size
moreov
experi
show
delay
model
decreas
time
ebl
use
shown
tabl
constant
without
ebl
due
gener
addit
nogood
default
reason
descript
logic
ontolog
consid
alist
scenario
use
eiter
dlvhex
integr
descript
logic
knowledg
base
nonmonoton
logic
program
plugin
allow
access
ontolog
use
descript
logic
reason
racerpro
http
ﬁrst
experi
consid
program
shown
left
terminolog
part
knowledg
base
right
bird
bird
ﬂie
bird
neg
ﬂie
flier
penguin
bird
neg
ﬂie
bird
flier
ﬂie
penguin
nonflier
encod
realiz
classic
tweeti
bird
exampl
use
tern
syntax
extern
atom
exampl
allow
express
queri
descript
logic
access
way
ontolog
state
flier
disjoint
nonflier
penguin
bird
rule
express
bird
default
unless
contrari
deriv
program
amount
default
logic
ontolog
last
rule
ensur
consist
guess
ontolog
assert
part
knowledg
base
contain
penguin
tweeti
ﬂie
tweeti
inconsist
theori
practic
logic
program
tabl
benchmark
result
runtim
second
timeout
set
partit
element
dlv
model
clasp
clasp
ebl
ebl
ﬁrst
model
dlv
clasp
clasp
ebl
ebl
individu
dlv
clasp
clasp
ebl
ebl
wine
ontolog
mc
concept
complet
clasp
ebl
clasp
max
ebl
gain
avg
context
dlv
clasp
clasp
ebl
ebl
instanc
wine
wine
wine
wine
wine
wine
wine
wine
wine
given
neg
ﬂie
tweeti
deriv
monoton
atom
ﬂie
tweeti
lose
support
note
default
encod
standard
monoton
descript
logic
achiev
cyclic
interact
knowledg
base
individu
appear
extens
predic
ﬂier
ere
simultan
requir
guess
abil
individu
subsequ
check
lead
combinatori
explos
intuit
howev
properti
determin
individu
independ
henc
queri
may
split
independ
subqueri
achiev
learn
function
linear
sourc
exampl
learn
nogood
smaller
candid
model
elimin
tabl
show
runtim
differ
number
individu
evalu
without
ebl
run
ebl
exhibit
signiﬁc
speedup
exclud
mani
model
candid
wherea
perform
dlv
clasp
backend
without
ebl
almost
ident
unlik
ﬁrst
exampl
time
spent
call
descript
logic
reason
evalu
logic
program
ﬁnding
carri
larg
ontolog
knowledg
base
use
applic
similar
experi
scale
version
wine
ontolog
http
instanc
differ
size
abox
rang
individu
wine
wine
sever
eiter
paramet
number
concept
inclus
concept
equival
motik
sattler
describ
particular
instanc
wine
implement
number
default
rule
use
analog
encod
wine
deriv
dri
dri
wine
sweet
assum
dri
wine
white
default
unless
known
red
discu
result
latter
scenario
experi
classiﬁ
wine
main
concept
ontolog
ate
subconcept
concept
wine
dessertwin
italianwin
vari
number
known
concept
membership
rang
averag
wine
percentil
red
wine
among
averag
result
summar
tabl
entri
concept
tion
state
number
classiﬁ
concept
almost
differ
dlv
clasp
backend
without
ebl
ebl
lead
signiﬁc
improv
concept
ontolog
size
gain
concept
wine
run
ebl
exploit
linear
furthermor
observ
addit
instanc
solv
within
second
time
limit
concept
could
classiﬁ
without
ebl
could
observ
gain
averag
expect
larger
categori
proﬁt
ebl
reus
learn
nogood
instanc
besid
describ
transform
default
rule
descript
logic
experi
transform
reveal
structur
result
prohibit
effect
reus
learn
nogood
henc
overal
pictur
show
signiﬁc
gain
ebl
encod
could
howev
still
observ
small
improv
run
system
mc
mc
brewka
eiter
formal
link
multipl
system
context
eiter
deﬁn
sistenc
explan
mc
present
system
ﬁnding
explan
top
dlvhex
benchmark
comput
explan
inconsist
context
system
context
number
comput
averag
runtim
sever
instanc
differ
topolog
tree
zigzag
diamond
domli
creat
avail
benchmark
gener
report
result
tabl
unlik
previou
benchmark
could
alreadi
observ
speedup
use
clasp
instead
dlv
backend
two
reason
ﬁrst
clasp
efﬁcient
dlv
given
problem
second
clasp
tightli
integr
dlvhex
wherea
use
dlv
requir
interprocess
commun
howev
import
aspect
ebl
lead
signiﬁc
speedup
factor
compar
clasp
without
ebl
logic
puzzl
anoth
experi
concern
logic
puzzl
encod
sudoku
logic
program
make
guess
assign
ﬁeld
extern
atom
use
verifi
answer
case
neg
veriﬁc
result
extern
atom
indic
learn
rule
reason
inconsist
encod
pair
assign
ﬁeld
contradict
one
uniqu
rule
expect
instanc
time
without
ebl
logic
program
inform
rule
puzzl
blindli
guess
assign
subsequ
check
extern
atom
ebl
sudoku
instanc
could
solv
sever
second
theori
practic
logic
program
detail
experi
link
benchmark
benchmark
gener
found
http
discuss
conclus
basic
idea
algorithm
relat
constraint
asp
solv
present
ser
ostrowski
schaub
realiz
clingcon
system
extern
atom
evalu
algorithm
superﬁci
regard
straint
propag
howev
gebser
ostrowski
schaub
consid
particular
applic
deal
abstract
interfac
extern
sourc
import
differ
clingcon
ebl
constraint
solver
seen
black
box
wherea
exploit
known
properti
extern
sourc
moreov
support
learn
custom
default
construct
conﬂict
claus
incorpor
knowledg
sourc
discuss
section
anoth
ferenc
construct
conﬂict
claus
asp
special
constraint
atom
may
contradictori
learn
claus
set
constraint
liter
kept
small
possibl
algorithm
alli
conﬂict
ground
extern
atom
output
atom
mostli
independ
except
function
sourc
instead
strong
relationship
input
output
reﬂect
conﬂict
claus
usual
sist
relev
input
atom
negat
one
output
atom
constraint
asp
solv
key
efﬁcienc
keep
conﬂict
claus
small
extend
asp
solv
techniqu
ordinari
asp
program
allow
use
extern
atom
access
extern
sourc
approach
us
two
type
learn
classic
type
claus
learn
deriv
conﬂict
nogood
conﬂict
situat
search
tree
travers
ad
nogood
prevent
algorithm
run
similar
conﬂict
main
contribut
second
type
learn
call
extern
behavior
learn
ebl
whenev
extern
atom
evalu
nogood
may
ad
captur
part
extern
sourc
behavior
simplest
case
nogood
encod
certain
input
sourc
lead
certain
output
default
learn
function
custom
learn
shorter
gener
nogood
custom
either
done
explicitli
user
learn
function
deriv
automat
known
properti
extern
atom
state
either
level
extern
predic
level
atom
current
exploit
monoton
function
futur
work
includ
identiﬁc
properti
allow
automat
deriv
learn
function
plan
develop
guag
write
learn
function
current
requir
specifi
learn
nogood
hand
may
conveni
write
rule
certain
input
extern
sourc
lead
certain
output
restrict
variant
asp
venient
languag
challeng
evalu
learn
rule
introduc
addit
overhead
henc
anoth
tradeoff
cost
beneﬁt
ebl
final
also
develop
heurist
lazi
evalu
extern
sourc
subject
futur
work
eiter
refer
bier
heul
van
maaren
walsh
ed
handbook
satisﬁ
frontier
artiﬁci
intellig
applic
vol
io
press
brewka
eiter
equilibrium
heterogen
nonmonoton
system
aaai
aaai
press
brewka
eiter
truszczi
answer
set
program
glanc
commun
acm
eiter
krennwalln
realiz
default
logic
tion
logic
knowledg
base
ecsqaru
springer
drescher
gebser
grote
kaufmann
ostrowski
schaub
disjunct
answer
set
solv
aaai
press
eiter
fink
ianni
krennwalln
sch
push
efﬁcient
evalu
hex
program
modular
decomposit
lpnmr
springer
eiter
fink
sch
weinzierl
find
explan
sistenc
system
aaai
press
eiter
ianni
krennwalln
schindlauer
exploit
conjunct
queri
descript
logic
program
ann
math
artif
intel
eiter
ianni
lukasiewicz
schindlauer
tompit
combin
answer
set
program
descript
logic
semant
web
artif
intel
eiter
ianni
schindlauer
tompit
uniform
integr
ijcai
reason
extern
evalu
program
profession
book
center
eiter
ianni
schindlauer
tompit
effect
integr
ativ
rule
extern
evalu
reason
eswc
springer
faber
leon
pfeifer
semant
complex
recurs
aggreg
answer
set
program
artif
intel
fage
consist
clark
complet
exist
stabl
model
meth
logic
comp
sci
gebser
kaufmann
kaminski
ostrowski
schaub
schneider
potassco
potsdam
answer
set
solv
collect
commun
gebser
kaufmann
schaub
answer
set
solv
theori
practic
artif
intel
gebser
ostrowski
schaub
constraint
answer
set
solv
iclp
springer
gelfond
lifschitz
classic
negat
logic
program
disjunct
databas
new
generat
comput
giunchiglia
lierler
maratea
answer
set
program
base
proposit
satisﬁ
autom
reason
goldberg
novikov
berkmin
fast
robust
discret
appl
math
leon
pfeifer
faber
eiter
gottlob
perri
scarcello
dlv
system
knowledg
represent
reason
acm
tran
comput
logic
lifschitz
answer
set
program
plan
gener
artif
intel
lin
zhao
assat
comput
answer
set
logic
program
sat
solver
artif
intel
theori
practic
logic
program
marek
truszczi
stabl
model
altern
logic
ming
paradigm
logic
program
paradigm
springer
motik
sattler
comparison
reason
techniqu
queri
larg
descript
logic
abox
lpar
springer
niemel
logic
program
stabl
model
semant
constraint
program
paradigm
ann
math
artif
intel
ostrowski
schaub
asp
modulo
csp
clingcon
system
theor
pract
log
special
issu
intl
conf
logic
program
appear
simon
niemel
soininen
extend
implement
stabl
model
semant
artif
intel
