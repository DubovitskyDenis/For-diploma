cosolver2b
efﬁcient
local
search
heuristic
travelling
thief
problem
mohamed
yafrani
bela¨ıd
ahiod
lrit
associated
unit
cnrst
urac
lrit
associated
unit
cnrst
urac
faculty
science
mohammed
university
rabat
faculty
science
mohammed
university
rabat
b.p
1014
rabat
morocco
email
m.elyafrani
gmail.com
b.p
1014
rabat
morocco
email
ahiod
fsr.ac.ma
abstract—real-world
problems
difﬁcult
optimize
however
many
researchers
solving
benchmark
prob-
lems
extensively
investigated
last
decades
even
direct
applications
traveling
thief
problem
ttp
np-hard
optimization
problem
aims
provide
realistic
model
ttp
targets
particularly
routing
problem
packing/loading
constraints
found
supply
chain
management
transportation
paper
ttp
presented
formulated
mathematically
combined
local
search
algorithm
proposed
compared
random
local
search
rls
evolutionary
algorithm
obtained
results
quite
promising
since
new
better
solutions
found
introduction
travelling
thief
problem
ttp
novel
np-hard
problem
introduced
provide
model
better
represents
real-world
problems
particularity
ttp
composed
two
np-hard
problems
namely
travelling
salesman
problem
knapsack
problem
interdependent
problem
introduced
following
simpli-
ﬁed
statement
given
cities
items
scattered
among
cities
thief
rented
knapsack
visit
cities
pick
items
knapsack
gets
heavier
thief
becomes
slower
best
path
picking
plan
adopt
achieve
best
beneﬁt
two
particular
properties
extracted
state-
ment
first
overall
problem
composed
two
sub-problems
choosing
best
path
picking
proﬁtable
items
second
sub-problems
interdependent
knapsack
gets
heavier
speed
thief
de-
creases
composition
increases
number
possible
solutions
interdependence
makes
impossible
isolate
sub-problems
kind
multiple
interdependent
components
widely
found
logistics
supply
chain
management
neverthe-
less
attempts
made
study
solve
problems
whole
lot
effort
made
solve
components
independently
authors
explain
gap
work
done
evolution-
ary
computation
researchers
real-world
applications
far
know
observations
extended
metaheuristics
community
examples
realistic
problems
multiple
interde-
pendent
sub-problems
include
supply
chain
optimization
problems
routing
problems
loading
constraints
2l-cvrp
3l-cvrp
water
tank
delivery
since
ttp
introduced
algorithms
proposed
solve
evolutionary
algorithm
random
local
search
proposed
provide
starting
point
researchers
approach
named
cosolver
introduced
solve
ttp
separating
sub-problems
managing
communication
lastly
inter-
esting
work
ttp
introduces
many
complexity
reduction
techniques
order
solve
large
instances
time
budget
minutes
paper
follow
ideas
proposed
propose
improvements
introduce
algorithm
based
cosolver
framework
solve
ttp
instances
efﬁciently
paper
organized
follows
section
ttp
mathematically
deﬁned
investigated
section
iii
dedi-
cated
introduce
approach
solving
ttp
tests
results
presented
section
section
concludes
paper
outlines
areas
future
research
background
section
present
background
information
ttp
problem
formulated
abstract
algo-
rithm
presented
travelling
thief
problem
herein
formulate
travelling
thief
problem
ttp
combines
two
well
known
benchmark
problems
namely
travelling
salesman
problem
tsp
knap-
sack
problem
ttp
consider
cities
associated
distance
matrix
dij
items
scattered
cities
item
proﬁt
weight
thief
knapsack
going
visit
cities
978-1-5090-0478-2/15/
31.00
cid:13
2015
ieee
personal
use
material
permitted
permission
ieee
must
obtained
uses
current
future
media
including
reprinting/republishing
material
advertising
promotional
purposes
creating
new
collective
works
resale
redistribution
servers
lists
reuse
copyrighted
component
work
works
pick
items
ﬁll
knapsack
note
maximum
capacity
knapsack
vmin
vmax
minimum
maximum
possible
velocity
respectively
also
consider
also
following
constraints
param-
knapsack
route
problem
krp
consists
ﬁnding
best
picking
plan
maximizes
total
gain
combined
last
found
tour
figure
represents
ﬂowchart
cosolver
framework
eters
item
available
one
city
note
availability
vector
...
contains
reference
city
contains
item
suppose
knapsack
rented
note
renting
price
per
time
unit
velocity
thief
changes
accordingly
knapsack
weight
note
vxi
velocity
thief
city
see
equation
vxi
vmax
wxi
vmax−vmin
represents
weight
knapsack
city
constant
value
wxi
goal
problem
ﬁnd
tour
picking
plan
optimize
total
travel
gain
deﬁned
equation
total
value
items
subject
pn−1
i=1
txi
xi+1
txn
total
travel
time
solutions
could
naturally
coded
follows
tour
...
vector
containing
ordered
list
cities
picking
plan
...
binary
vector
equal
item
picked
otherwise
interdependence
tsp
inves-
tigated
shown
optimizing
sub-problems
isolation
even
optimality
guarantee
ﬁnding
good
solutions
overall
problem
therefore
ﬁnding
good
global
solutions
requires
algorithm
takes
interdepen-
dence
components
consideration
makes
design
algorithm
quite
difﬁcult
cosolver
cosolver
abstract
algorithm
proposed
solve
ttp
idea
behind
algorithm
simple
decompose
overall
problem
solve
components
separately
using
ﬁtness
function
takes
consideration
interdependence
two
components
thus
given
initial
solution
ttp
decomposed
following
problems
travelling
salesman
knapsack
problem
tskp
consists
ﬁnding
best
tour
combined
last
found
picking
plan
optimizes
ttp
ob-
jective
function
also
total
proﬁt
function
depend
tour
instead
maximizing
consider
minimizing
total
travel
cost
see
equation
iii
proposed
approach
section
propose
algorithm
implements
cosolver
framework
uses
techniques
proposed
solution
initialization
ttp
initial
solution
big
impact
search
algorithm
thus
initialization
strategy
chosen
carefully
implementation
use
heuristic
approach
initialize
tour
picking
plan
firstly
tour
generated
using
good
tsp
algorithm
lin-kernighan
heuristic
ant
colony
optimization
algorithm
picking
plan
initialized
using
following
approach
insertion
heuristic
proposed
used
ﬁll
knapsack
items
according
three
ﬁtness
approximations
simple
bit-ﬂip
search
inserted
items
performed
eliminate
useless
items
picking
plan
using
objective
function
refer
heuristic
insertion
elimination
heuristic
complexity
reduction
techniques
algorithm
uses
following
complexity
reduction
techniques
tskp
neighborhood
reduction
delaunay
triangu-
lation
used
candidate
generator
2-opt
heuristic
strategy
also
proposed
objective
value
recovery
instead
using
objective
function
calculate
objective
value
neighbors
value
recovered
keeping
track
time
weight
information
tour
city
following
vectors
used
perform
operation
time
accumulator
tacc
vector
contains
current
time
city
tour
weight
accumulator
wacc
vector
contains
current
weight
city
tour
time
register
treg
vector
contains
added
time
city
tour
weight
register
wreg
vector
contains
added
weight
city
tour
figure
shows
effect
gray
mutating
ttp
solution
total
travel
time
two
mutations
shown
black
one-bit-ﬂip
picking
plan
2-opt
exchange
tour
similar
technique
named
incremental
evaluation
proposed
implementation
use
techniques
also
recover
vectors
fig
simpliﬁed
cosolver
ﬂowchart
bit-
i-1
2-opt
fig
example
changes
applied
ttp
solution
black
effect
total
traveling
time
function
gray
objective
function
calculation
objective
function
complexity
proposed
number
items
number
cities
complexity
could
reduced
k∗n
number
items
per
city
cec
2015
competition
website
java
implementations
already
reduced
complexity
uses
technique
highly
dependent
ttp
instance
generator
believe
better
way
class
items
per
city
figure
explains
technique
using
simple
example
example
cities
considered
city
contains
items
city
contains
items
city
contains
items
city
contains
items
fig
cosolver2b
cosolver
2-opt
bit-ﬂip
algorithm
starts
tour
generated
using
lin-
kernighan
heuristic
insertion
elimination
heuristic
used
initialize
picking
plan
obtained
tour
picking
plan
given
tskp
optimizer
tries
improve
current
tour
using
2-opt
heuristic
resulting
tour
combined
current
picking
plan
given
krp
optimizer
uses
simple
bit-ﬂip
ﬁnd
decent
picking
plan
improvement
new
picking
plan
combined
current
tour
given
tskp
optimizer
process
repeated
improvement
experimental
results
tested
algorithm
ttp
instances
various
sizes
obtained
results
compared
rls
fig
data
structure
classing
items
cities
proposed
algorithm
heuristic
namely
cosolver2b
based
local
search
algorithms
implements
cosolver
framework
addition
techniques
presented
use
2-opt
heuristic
solve
tskp
bit-ﬂip
search
solve
krp
algorithm
summarized
ﬂowchart
ﬁgure
1http
//cs.adelaide.edu.au/
optlog/cec2015comp/
results
cosolver2b
compared
rls
table
instance
berlin52
n255
uncorr-similar-weights
kroa100
n495
uncorr-similar-weights
ch150
n745
uncorr-similar-weights
ts225
n1120
uncorr-similar-weights
a280
n1395
uncorr-similar-weights
05.ttp
lin318
n1585
uncorr-similar-weights
u574
n2865
uncorr-similar-weights
dsj1000
n4995
uncorr-similar-weights
rl1304
n6515
uncorr-similar-weights
ﬂ1577
n7880
uncorr-similar-weights
d2103
n10510
uncorr-similar-weights
pcb3038
n15185
uncorr-similar-weights
fnl4461
n22300
uncorr-similar-weights
rl11849
n59240
uncorr-similar-weights
usa13509
n67540
uncorr-similar-weights
pla33810
n169045
uncorr-similar-weights
objective
20591
38864
40922
84907
104365
75387
223165
320165
573667
589756
801110
1119168
1477673
2152954
2226676
-9929644
time
1.28
1.92
2.69
3.82
5.64
6.87
127
214
427
600
600
600
600
rls
objective
20591
38864
40922
84907
104365
75387
223165
320165
573667
589756
801110
1119169
1478963
4328939
5077892
-3158915
time
0.89
1.06
1.38
1.69
1.84
3.81
5.42
101
265
600
600
600
cosolver2b
ﬁrstﬁt
cosolver2b
bestﬁt
time
objective
0.11
25440
39599
0.27
52225
0.43
0.92
88925
1.09
107233
114915
1.54
243571
6.51
8.44
332916
571634
148
665866
869584
389
600
1117659
600
1220469
600
1785671
4420300
600
600
14887314
objective
26658
39597
53075
89079
112003
114915
253770
332917
586576
684731
869584
1086092
696650
478884
4082169
15085752
time
0.13
0.21
0.38
0.61
0.88
1.25
5.36
5.95
139
357
600
600
600
600
600
proposed
paper
implemented
two
versions
cosolver2b
ﬁrst
best
also
known
best
improvement
searches
entire
neighborhood
given
iteration
selects
best
neighbor
second
ﬁrst
also
known
ﬁrst
improvement
stops
neighborhood
search
better
solution
found
since
algorithms
deterministic
one
run
per
instance
sufﬁcient
algorithms
maximum
runtime
limit
600
seconds
note
implementation
uses
java
platform
tests
performed
core
i3-2370m
cpu
2.40ghz
machine
ram
running
linux
hand
due
random
behavior
runs
per
instance
performed
using
rls
tests
rls
performed
different
machine
matlab
2014
core
2600
cpu
3.4
ghz
4gb
ram
running
windows
thus
runtimes
algorithms
given
guidance
furthermore
comparison
select
best
found
solution
two
algorithms
results
reported
table
note
runtimes
measured
seconds
best
objective
values
made
bolder
results
show
algorithm
able
ﬁnd
new
better
solutions
tested
instances
combining
local
search
algorithms
furthermore
made
fol-
lowing
observations
cosolver2b
surpasses
rls
various
ttp
sizes
runtime
cosolver2b
decent
small
mid-size
instances
however
large
instances
runtime
quite
high
compared
rls
rls
unpredictable
behavior
cosolver2b
deterministic
garantees
decent
solu-
tions
instances
many
instances
optimization
runtime
gain
improvement
done
krp
sub-problem
best
strategy
performed
better
ﬁrst
small
mid-size
instances
conclusion
paper
combined
local
search
heuristic
proposed
approach
based
cosolver
framework
complexity
reduction
techniques
experimental
results
shown
promising
results
terms
solution
quality
runtime
good
performance
cosolver2b
memetic
algorithm
malts
large
scale
instances
proves
importance
making
strong
assumptions
problem
domain
dealing
multi-component
problems
furthermore
engage
improve
algorithm
terms
space
exploration
runtime
using
sophisticated
search
heuristics
acknowledgment
authors
express
gratefulness
following
persons
contributed
work
useful
comments
asmae
ghazi
aziz
ouaarab
mehdi
krari
references
2for
instance
ﬁles
raw
results
rls
reader
referred
https
//sites.google.com/site/mohammadrezabonyadi/standarddatabases/travelling-
thief-problem-data-bases-and-raw-results
mohammad
reza
bonyadi
zbigniew
michalewicz
luigi
barone
travelling
thief
problem
ﬁrst
step
transition
theoretical
problems
realistic
problems
evolutionary
computation
cec
2013
ieee
congress
pages
1037–1044
ieee
2013
mohammad
reza
bonyadi
zbigniew
michalewicz
micha˘o
ro-
man
przyby˘oek
adam
wierzbicki
socially
inspired
algorithms
travelling
thief
problem
proceedings
2014
conference
genetic
evolutionary
computation
pages
421–428
acm
2014
andreas
bortfeldt
hybrid
algorithm
capacitated
vehicle
routing
problem
three-dimensional
loading
constraints
computers
operations
research
:2248–2257
2012
boris
delaunay
sur
sphere
vide
izv
akad
nauk
sssr
otdelenie
matematicheskii
estestvennyka
nauk
793-800
:1–2
1934
marco
dorigo
luca
maria
gambardella
ant
colonies
travelling
salesman
problem
biosystems
:73–81
1997
keld
helsgaun
effective
implementation
lin–kernighan
traveling
salesman
heuristic
european
journal
operational
research
126
:106–130
2000
maksud
ibrahimov
arvind
mohais
sven
schellenberg
zbigniew
michalewicz
evolutionary
approaches
supply
chain
optimisation
part
single
two-component
supply
chains
international
journal
intelligent
computing
cybernetics
:444–472
2012
maksud
ibrahimov
arvind
mohais
sven
schellenberg
zbigniew
michalewicz
evolutionary
approaches
supply
chain
optimisation
part
multi-silo
supply
chains
international
journal
intelligent
computing
cybernetics
:473–499
2012
manuel
iori
silvano
martello
routing
problems
loading
constraints
top
:4–27
2010
stephen
leung
zhenzhen
zhang
defu
zhang
xian
hua
ming
lim
meta-heuristic
algorithm
heterogeneous
ﬂeet
vehicle
routing
problems
two-dimensional
loading
constraints
european
journal
operational
research
225
:199–210
2013
mei
xiaodong
xin
yao
improving
efﬁciency
heuristics
large
scale
traveling
thief
problem
simulated
evolution
learning
pages
631–643
springer
2014
mei
xiaodong
xin
yao
investigation
interdependence
sub-problems
travelling
thief
problem
soft
computing
pages
1–16
2014
sergey
polyakovskiy
mohammad
reza
markus
wagner
zbigniew
michalewicz
frank
neumann
comprehensive
benchmark
set
heuristics
traveling
thief
problem
proceedings
ge-
netic
evolutionary
computation
conference
gecco
vancouver
canada
2014
jacob
stolk
isaac
mann
arvind
mohais
zbigniew
michalewicz
combining
vehicle
routing
packing
optimal
delivery
schedules
water
tanks
insight
:167–190
2013
