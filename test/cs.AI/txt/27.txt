international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
semantic
approach
automatic
structuring
analysis
software
process
patterns
nahla
jlaiel
riadi
research
laboratory
national
school
computer
science
khouloud
madhbouh
higher
institute
multimedia
computer
science
university
campus
erriadh
city
manouba
2010
tunisia
6072
zirig
gabès
tunisia
mohamed
ben
ahmed
riadi
research
laboratory
national
school
computer
science
manouba
2010
tunisia
abstract
main
contribution
paper
propose
novel
semantic
approach
based
natural
language
processing
technique
order
ensure
semantic
unification
unstructured
process
patterns
expressed
different
formats
also
different
forms
approach
implemented
using
gate
text
engineering
framework
evaluated
leading
high-quality
results
motivating
continue
direction
general
terms
software
patterns
reuse
language
processing
semantic
annotation
information
extraction
natural
keywords
software
process
patterns
patterns
unification
patterns
analysis
patterns
structuring
patterns
reuse
context
many
formalisms
languages
proposed
describe
software
process
patterns
multiplicity
makes
capitalization
and/or
reuse
process
patterns
difficult
achieved
paper
propose
semantic
approach
named
asap
acronym
automatic
structuring
analysis
process
patterns
based
linguistic
method
natural
language
processing
nlp
order
provide
architectural
semantic
unification
unstructured
patterns
described
different
formats
e.g
pdf
word
html
etc
different
forms
e.g
ambler
störrle
ppdl
uml-pp
ppl
etc
using
gate
api
remainder
paper
organized
six
sections
section
introduces
context
research
work
section
provides
background
information
process
patterns
unification
nlp
methodology
section
describes
proposed
approach
named
asap
section
details
experimentations
results
proposed
approach
section
concludes
paper
giving
discussion
contibiution
well
overview
future
work
process
patterns
reuse
patterns
increasingly
recognized
software
development
communities
effective
method
reuse
knowledge
best
practices
gained
software
development
processes
indeed
growing
widely
used
proven
solutions
recurring
problems
consisting
essentially
triplet
problem
context
solution
addition
patterns
restricted
particular
domain
applied
emerge
instead
developed
several
domains
e.g
architecture
software
engineering
organization
pedagogy
well
human
computer
interaction
consequently
software
patterns
nowadays
exist
wide
range
topics
including
requirement
patterns
analysis
design
implementation
code
patterns
test
patterns
even
maintenance
patterns
latters
consist
product
result
patterns
whose
role
capitalize
specifications
implementations
goal
concerning
process
patterns
whose
main
role
capitalize
good
specifications
implementations
method
followed
achieve
goal
become
commonly
used
software
development
communities
excellent
medium
share
software
development
knowledge
often
encapsulated
experiences
best
practices
indeed
process
patterns
growingly
adopted
different
development
processes
agile
processes
object-oriented
software
development
processes
component
based
software
development
processes
service-oriented
development
processes
well
aspect-oriented
development
processes
consequence
huge
proliferation
process
patterns
practice
latters
used
informal
manner
traditional
textbooks
better
modest
hypertext
systems
providing
weak
semantic
relationships
addition
huge
number
process
patterns
available
significantly
differ
format
coverage
scope
architecture
terminology
used
books
web-based
resources
observations
conspire
create
barriers
efficient
use
reuse
process
patterns
fact
patterns
users
expected
investigate
different
patterns
resources
books
magazines
papers
web
collections
find
appropriate
patterns
investigation
really
needs
cognitive
efforts
abilities
time
identify
understand
select
adapt
apply
relevant
ones
reasons
argued
previous
work
efforts
needed
formally
capitalize
patterns
software
development
knowledge
order
help
introduction
software
process
patterns
considered
valuable
mechanism
capture
disseminate
best
practices
software
development
processes
consequently
successfully
increasingly
used
within
software
development
communities
reuse
proven
solutions
communities
use
reuse
create
process
patterns
given
software
development
process
consequently
set
overall
goal
research
build
intelligent
framework
supporting
process
patterns
capitalization
reuse
purpose
proposed
holistic
approach
named
scatter
acronym
semantic
approach
software
process
paterns
capitalization
reuse
aims
disseminate
software
process
best
practices
making
process
patterns
described
unified
formal
form
proposed
approach
based
two
main
processes
namely
process
patterns
warehousing
process
patterns
mining
present
work
takes
place
targeted
framework
forms
first
part
overall
proposed
approach
context
implement
semantic
approach
process
patterns
unification
analyzing
structuring
description
order
facilitate
enhance
patterns
reuse
within
software
development
communities
background
section
intended
provide
background
information
proposed
approach
asap
first
subsection
devoted
description
process
pattern
unification
model
building
block
proposed
approach
next
subsection
deals
natural
language
processing
method
tools
adopted
methodology
work
3.1
process
patterns
unification
3.1.1
process
patterns
reality
different
initiatives
carried
literature
patterns
dealing
process
patterns
description
formalization
classified
description
models
ambler
rhodes
gnatz
p-sigma
störrle
languages
promenade
ppdl
propel
plmlx
uml-pp
ppl
previous
work
concerning
several
lacks
revealed
survey
carried
aforementioned
works
based
eleven
evaluation
criteria
detailed
latters
conspire
create
barriers
patterns
knowledge
capitalization
reuse
among
notice
lacks
architectural
well
terminological
consent
patterns
descriptions
description
lack
architectural
consent
means
different
process
pattern
descriptions
proposed
using
disparate
architectures
fact
comparing
eleven
selected
works
literature
identified
eleven
different
pattern
identification
classification
problem
context
solution
role
artifact
relationship
guidance
management
evaluation
addition
differently
covered
process
patterns
descriptions
pay
attention
four
main
facets
context
solution
problem
relationships
pattern
namely
facets
lack
terminological
consent
refers
problems
polysemy
synonymy
addressed
labels
used
describe
patterns
indeed
find
terms
consequences
used
express
resulting
context
ppl
well
guideline
gnatz
moreover
others
different
terms
used
address
concept
intention
rhodes
describe
pattern
problem
instead
term
intent
used
störrle
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
3.1.2
unified
description
process
patterns
overcome
afore
mentioned
lacks
first
step
create
unified
conceptualization
process
patterns
thus
mappings
efforts
necessary
achieve
goal
leading
process
patterns
meta-model
unifying
patterns
knowledge
representations
latter
consider
process
pattern
information
description
six
facets
identification
facet
encapsulates
set
properties
identifying
pattern
pattern
name
author
keywords
pattern
classification
type
category
abstraction
level
aspect
well
pattern
origin
project
participants
pattern
artifacts
used
and/or
produced
core
information
main
pattern
facet
embodying
details
well-known
triplet
problem
context
solution
relationships
facet
expresses
pattern
could
interact
patterns
e.g
similar
patterns
refinement
patterns
subsequent
patterns
anti-patterns
guidance
facet
refers
support
level
provided
pattern
comprehended
used
e.g
known
uses
example
literature
illustration
etc.
evaluation
facet
provides
feedbacks
pattern
application
e.g
discussion
confidence
maturity
etc.
management
facet
provides
general
information
given
pattern
e.g
version
creation-date
figure
illustrates
proposed
unified
description
process
patterns
according
mentioned
facets
figure
adopted
unified
description
process
pattern
3.2
nlp
methodology
3.2.1
natural
language
processing
natural
language
processing
nlp
computerized
approach
analyzing
language
data
expressed
language
called
natural
spoken
written
nlp
based
set
theories
set
technologies
active
area
research
development
single
agreed-upon
definition
would
satisfy
everyone
aims
model
reproduce
using
computers
human
capacity
produce
understand
natural
languages
nlp
involves
different
areas
investigation
namely
computer
science
linguistic
mathematics
artificial
intelligence
figure
reveals
main
tasks
commonly
included
nlp
applications
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
precision
programm
java
ing
language
java
pytho
java
c++
java
architectu
well
defined
absent
well
defined
absent
usage
high
medium
medium
weak
documenta
rich
medium
tion
quite
rich
weak
maturity
high
medium
medium
weak
capacity
integration
good
weak
uima
indicated
good
gate
opennl
performan
metrics
support
indicated
indicated
indicated
figure
processing
levels
nlp
morpholexical
processing
level
aims
recognize
structure
words
syntactic
processing
level
strives
structuring
formal
relationships
words
statement
semantic
processing
level
searches
understanding
meaning
individual
words
statement
pragmmatic
procesing
looks
contextualizing
words
analyzing
meaning
context
different
nlp
systems
implement
tasks
even
combination
3.2.2
nlp
tools
many
nlp
tools
created
research
well
industry
however
already
tools
well
recognized
mastery
nlp
namely
gate
general
architecture
text
engineering
open
nlp
uima
unstructured
information
management
architecture
ide
insight
discoverer
extractor
moreover
since
targeted
approach
nlp
text
mining
based
argued
need
reinvent
wheel
rebuilding
nlp
tool
scratch
choose
reuse
one
latters
searched
characteristics
assessed
table
sums
assessment
results
provides
comparisons
four
well
known
tools
gate
opennlp
uima
ide
table
comparison
nlp
tools
gate
opennlp
uima
ide
creation
1995
1998
2001
2002
licence
gnu
lgpl
lgpl
input
text
text
type
commerci
text
apache
since
2005
text
image
audio
video
supported
language
without
precision
many
without
examination
results
reveals
gate
suitable
tool
since
open
source
well
documented
well
used
research
industry
indeed
gate
open
source
general
framework
text
engineering
capable
solve
text
processing
problem
also
supports
diversity
formats
doc
pdf
html
xml
rtf
email
etc
multilingual
data
processing
using
unicode
default
text
encoding
order
analyze
process
patterns
use
gate
information
extraction
tool
named
annie
acronym
nearly-new
information
extraction
system
illustrated
figure
annie
corresponds
pipelined
components
consisting
tokeniser
gazetteer
system
lexicons
sentence
splitter
named
entity
transducer
figure
annie
components
sentence
splitter
identifies
annotates
beginning
end
sentence
tokeniser
applies
basic
rules
input
text
identify
textual
objects
e.g
punctuation
numbers
symbols
different
types
gazetteer
creates
annotation
offer
information
entities
e.g
persons
organizations
etc
using
lookup
lists
pos
tagger
corpus
doc
xml
html
gate
document
management
gate
documents
annotated
corpus
sentence
splitter
tokenizer
gazetteer
named
entity
transducer
annie
produces
tags
words
symbols
named
entity
transducer
applies
jape
java
annotations
pattern
engine
rules
input
text
order
generate
new
annotations
asap
acronym
automatic
structuring
analysis
process
patterns
asap
aims
improve
process
patterns
reuse
structuring
unifying
patterns
descriptions
linguistic
approach
using
performing
nlp
technique
identification
key
segments
descriptions
process
patterns
semantic
annotation
xml
structuring
following
unified
format
asap
comprises
two
main
phases
figure
first
analysis
phase
consisting
performing
lexical
syntactic
semantic
analysis
different
unstructered
descriptions
process
patterns
second
structuring
phase
converting
analysed
patterns
patterns
semantically
annotated
following
adopted
unification
model
figure
hence
asap
consists
information
extraction
process
heterogenous
unstructured
patterns
descriptions
especially
recognition
relevant
parts
patterns
descriptions
annotation
patterns
become
described
unified
manner
order
reach
goal
implementing
proposed
approach
process
patterns
analyzed
using
extended
version
gate
platform
fact
perform
desired
annotations
extended
gate
additional
gazetteer
lists
well
additional
extraction
rules
jape
rules
help
identify
relevant
entities
patterns
figure
pattern
context
problem
solution
role
etc
perform
approch
considered
corpus
patterns
different
formats
ambler
gnatz
propel
etc.
figure
illustrates
implementation
details
asap
asap
implementation
taking
place
two
main
phases
analysis
structuring
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
figure
proposed
asap
approach
figure
added
concepts
lists
rules
annie
first
phase
analysis
patterns
analyzed
using
gate
based
added
concepts
rules
fact
annie
component
begins
recognizing
sentences
processed
patterns
using
sentence
splitter
component
sentences
consequently
identified
using
annotations
generated
sentence
splitter
tokeniser
splits
text
simple
tokens
numbers
punctuation
words
different
types
next
named
ambler
patterns
p-sigma
patterns
störrle
patterns
gnatz
patterns
ppdl
patterns
propel
patterns
uml-pp
patterns
analysis
lexical
syntactic
semantic
unification
model
analysed
annotated
patterns
invalid
format
promenade
patterns
rhodes
patterns
plmlx
patterns
text
mining
java
code
unification
model
unified
structuring
java
code
structured
pattern
unified
structuring
xml
format
validated
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
entities
identified
sentence
using
annotations
context
problem
solution
etc
generated
gazetteer
lists
named
entity
transducer
named
entity
transducer
works
based
reference
annotation
model
storing
annotations
annotation
graphs
gate
annotation
consists
unique
type
denotes
type
annotation
start
end
nodes
set
features
provides
additional
information
result
xml
file
gate
output
generated
pattern
provided
input
xml
files
involve
desired
annotations
also
ones
useless
purpose
name
sentence
token
etc
annotations
removed
structuring
phase
activity
formal
solution
intent
process
rule
sample
execution
semi-formal
solution
solution
solution
modèle
solution
démarche
figure
solution
list
terminology
phase
solution
input
token
options
control
appelt
rule
solution
token.string
activity
token.string
activity
token.string
activity
token.string
token.string
token.string
process
token.string
process
token.string
process
token.string
token.string
token.string
rule
token.string
rule
token.string
token.string
solution
token.string
solution
token.string
solution
token.string
solution
token.string
token.string
token.string
sample
token.string
sample
token.string
execution
token.string
execution
token.string
execution
token.string
token.string
token.string
semi
token.string
semi
token.string
semi-
formal
solution
solution
solution.solution
kind=
solution
rule=
solution
figure
implementation
details
asap
structuring
phase
aims
clean
validate
xml
generated
files
order
obtain
valid
xml
files
according
adopted
unified
pattern
description
model
indeed
phase
asap
system
check
integrity
information
obtained
analysis
phase
respect
grammar
used
representing
desired
unified
format
process
patterns
gate
extensions
made
concerns
gazetteer
lists
lists
store
terminologies
used
represent
pattern
concepts
evaluation
list
artifact
list
classification
list
domain
list
type
list
context
list
guidance
list
identification
list
name
list
identifier
list
management
list
problem
list
relationships
list
alternative
list
similar
list
use
list
roles
list
solution
list
author
list
abstraction
level
list
collection
list
new
lists
successfully
integrated
tested
patterns
corpus
figure
provides
illustration
gazetteer
list
representing
pattern
solution
figure
solution
jape
rule
jape
rules
jape
rules
added
recognize
terminology
used
given
pattern
description
annotate
unified
manner
rules
regrouped
phases
context
phase
solution
phase
problem
phase
classification
phase
relationship
phase
identification
phase
role
phase
artifact
phase
guidance
phase
evaluation
phase
management
phase
figure
shows
excerpt
jape
rule
identifying
pattern
solution
whose
candidate
terms
illustrated
figure
i.e
activity
intent
process
solution
etc
experimentations
stated
built
corpus
collecting
patterns
different
forms
formats
proposed
approach
asap
java
programming
language
netbeans
ide
6.8.
asap
system
integrates
gate
well
annie
apis
order
reach
approach
goals
implemented
figure
illustrates
experimentation
result
proposed
approach
given
one
process
pattern
beginning
gate
loaded
asap
system
processing
pipeline
performed
generate
xml
file
containing
targeted
annotations
file
automatically
cleaned
structured
removing
unnecessary
tags
like
sentence
token
via
asap
system
according
unification
model
figure
illustrative
example
order
evaluate
asap
system
performance
compared
gate
framework
term
response
time
table
reveals
comparison
results
finally
total
number
patterns
fact
goal
evaluate
response
time
analysis
increasing
size
corpus
table
response
time
evaluation
patterns
number
response
time
response
time
gate
seconds
asap
seconds
given
response
time
asap
system
presents
response
time
analysis
structuring
notice
response
time
sensitive
size
corpus
example
corpus
patterns
take
response
time
analyzing
pattern
asap
asap
faster
gate
increasing
size
patterns
corpus
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
speed
justified
use
java
programming
language
gate
embedded
library
well
annie
rather
loading
general
gate
platform
another
kind
evaluation
concerns
annotation
extraction
performance
latter
could
evaluated
terms
three
metrics
precision
recall
f-measure
precision
metric
measures
number
items
correctly
identified
compared
number
elements
identified
words
measures
many
terms
correctly
identified
system
precision
close
identification
annotation
correct
precision
calculated
follows
precision
recall
metric
measures
number
correctly
identified
items
percentage
total
number
correct
items
indeed
measures
many
items
identified
identified
regardless
much
false
identifications
made
higher
recall
better
system
could
correctly
identify
elements
recall
calculated
follows
recall
f-measure
metric
combines
precision
recall
weights
measure
calculated
follows
f-mesure
measure
calculated
using
three
different
criteria
strict
lenient
average
measure
strict
considers
partially
correct
answers
incorrect
answers
however
measure
lenient
considers
partially
correct
answers
correct
answers
measure
average
affects
half
weight
partially
correct
answers
order
measure
annotation
extraction
performance
gate
provides
tool
named
annotationdiff
enabling
two
sets
annotations
one
two
documents
compared
order
either
compare
system-annotated
text
reference
hand-annotated
text
compare
output
two
diﬀerent
versions
system
two
diﬀerent
systems
annotation
type
e.g
context
problem
solution
relationship
etc
ﬁgures
generated
precision
recall
f-measure
calculated
according
different
criteria
strict
lenient
average
measure
performance
annotation
extraction
manually
identified
semantic
annotations
pattern
description
using
annotationdiff
tool
compared
generated
set
annotations
ones
extracted
asap
system
depicted
figure
10.
document
hand
key
document
patrons.xml
represents
annotated
document
response
patrons.docx
asap
system
one
document
annotationdiff
tool
could
compare
two
documents
annotation
annotation
example
figure
comparison
concerns
annotation
problem
gate
output
pattern
token
business
/token
token
architecture
/token
sentence
token
identification
/token
token
/identification
/sentence
/token
sentence
token
classification
/token
token
type
/token
token
/type
/token
sentence
token
/classification
/token
token
problem
/token
/sentence
sentence
token
/token
token
/token
token
/token
token
make
/token
token
sure
/token
token
/token
token
/token
token
/token
token
applications
/token
token
/token
token
/token
token
enterprise
/token
token
inter-operate
/token
token
properly
/token
token
/sentence
sentence
/problem
context
initialcontext
building
system
need
inter-operate
applications
within
enterprise
/initialcontext
resultingcontext
business
objects
may
become
quite
large
due
varied
requirements
many
applications
use
may
find
necessary
use
business
object
extensions2
add
additional
behavior
attributes
required
business
processes
/resultingcontext
/context
solution
define
business
architecture
based
structure
business
business
architecture
defines
vocabulary
business
ensure
applications
mean
thing
use
particular
noun
assign
architect
architectureteam
artifactowner
validate
using
businessusecases
capture
businessprocesses
business
architecture
describe
businessobjects
domain
complete
operations
including
attributes
support
associations
may
businessobjects
/solution
unified
xml
file
pattern
business
architecture
problem
make
sure
applications
enterprise
inter-operate
properly
/problem
context
initialcontext
building
system
need
inter-operate
applications
within
enterprise.
/initialcontext
resultingcontext
business
objects
may
become
quite
large
due
varied
requirements
many
applications
use
them.
/resultingcontext
/context
solution
define
business
architecture
based
structure
business
business
architecture
defines
vocabulary
business
ensure
applications
mean
thing
use
particular
noun
/solution
pattern
process
pattern
business
architecture
context
building
system
need
inter-operate
applications
within
enterprise
resulting
context
business
objects
may
become
quite
large
due
varied
requirements
many
applications
use
problem
make
sure
applications
enterprise
inter-operate
properly
solution
define
business
architecture
based
structure
business
business
architecture
defines
vocabulary
business
ensure
applications
mean
thing
use
particular
noun
analysis
structuring
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
conte
fredj
giraudin
j.p.
rieu
2001.
sigma
formalism
unified
representation
patterns
french
proceedings
19ème
congrès
informatique
systèmes
d'information
décision
67-86.
des
organisations
hagen
2002.
support
definition
usage
european
process
patterns
proceedings
conference
pattern
languages
programs
hagen
gruhn
2004.
process
patterns
means
describe
processes
flexible
way
proceedings
international
workshop
software
process
simulation
modeling
icse
32-39
tran
h.n.
coulette
dong
b.t
2007.
modeling
ieee
process
patterns
proceedings
international
conference
software
engineering
advances
15-20.
application
tasharofi
raman
2007.
process
patterns
agile
methodologies
situational
method
engineering
fundamentals
experiences
proceedings
ifip
8.1
working
conference
222-237
ambler
s.w
1998.
process
patterns
building
large-
scale
systems
using
object
technology
cambridge
university
press/sigs
books
kouroshfar
yaghoubi
shahir
ramsin
2009.
process
patterns
component-based
software
development
proceedings
component-based
software
engineering
cbse
lncs
5582
54-68
fahmideh
sharifi
jamshidi
feridoon
haghighi
2011.
process
patterns
service-
oriented
software
development
proceedings
ieee
international
conference
research
challenges
information
science
rcis
1-9
khaari
ramsin
2010.
process
patterns
aspect-oriented
software
development
proceedings
ieee
international
conference
engineering
computer-based
systems
ecbs
241-250
jlaiel
ben
ahmed
2012.
towards
novel
semantic
approach
process
patterns
capitalization
reuse
appear
proceedings
international
conference
software
engineering
knowledge
engineering
seke
coulette
crégut
dong
t.b.
tran
d.t
2000.
rhodes
process
component
centered
software
engineering
environment
international
conference
enterprise
information
systems
253-260.
proceedings
gnatz
marschall
popp
rausch
schwerin
2001.
towards
tool
support
living
software
development
process
proceedings
european
workshop
software
process
technology
ewspt
lncs
2077
182-202
störrle
2001.
describing
process
patterns
uml
proceedings
european
workshop
software
process
technology
ewspt
lncs
2077
173-181
ribó
j.m.
franch
2002.
supporting
process
reuse
promenade
research
report
politechnical
university
catalonia
hagen
gruhn
2004.
towards
flexible
software
processes
using
process
patterns
figure
annotation
quality
evaluation
results
shown
left
side
represent
problem
annotations
extracted
system
ones
right
side
concern
problem
annotations
manually
created
interpretation
results
regarding
three
introduced
metrics
reveals
annotations
correct
correct
annotations
recall
precision
f-measure
measures
always
equal
explains
good
performance
system
conclusion
paper
presents
part
ongoing
research
work
propose
semantic
approach
process
patterns
unification
automatic
analysis
structuring
descriptions
conducted
experimentations
show
approach
implementation
generate
high-quality
annotations
unstructured
heterogeneous
descriptions
process
patterns
proposed
approach
asap
provides
good
starting
point
well
strong
foundation
holistic
semantic
approach
improving
process
patterns
capitalization
reuse
future
work
aim
extend
asap
developing
method
automatically
convert
process
patterns
provided
xml
unified
files
asap
outputs
semantic
owl
files
ontology
instances
addition
planning
information
extraction
possibilities
images
diagrams
figures
tables
could
achieved
using
uima
java
library
integrate
acknowledgments
authors
would
like
thank
gate
users
developers
attention
help
references
jlaiel
ben
ahmed
2011.
metapropos
meta-process
patterns
ontology
software
development
communities
proceedings
kes
conference
knowledge-based
information
engineering
systems
part
lncs
6881
springer
516-
527.
intelligent
buschmann
henney
schmidt
d.c.
2007.
pattern-oriented
software
architecture
patterns
pattern
languages
wiley
sons
henninger
corrêa
2007.
software
pattern
communities
current
practices
challenges
acm
proceedings
international
conference
pattern
languages
programming
1-19.
international
journal
computer
applications
0975
8887
volume
54–
no.15
september
2012
proceedings
iasted
conference
software
engineering
applications
436-441
taln
http
//aune.lpl.univ-aix.fr/
bigi/doc/seminairetaln-2011.pdf
plmlx
http
//www.cs.kent.ac.uk/people/staff/saf/patterns/diethel
m/plmlx_doc
meng
x.x.
wang
y.s.
shi
wang
f.j.
2007.
process
pattern
language
agile
methods
proceedings
pacific
software
engineering
conference
374-381
jlaiel
ben
ahmed
2010.
reflections
improve
software
process
patterns
capitalization
reuse
proceedings
international
conference
information
knowledge
engineering
ike
30-35
liddy
natural
language
processing
encyclopedia
library
information
science
gate
http
//gate.ac.uk/
opennlp
http
//opennlp.apache.org/
uima
http
//uima.apache.org/
ide
www.temis-group.com
annie
http
//gate.ac.uk/sale/tao/splitch6.html
chap
annie
jape
http
//gate.ac.uk/sale/tao/splitch8.html
chap
jape
van
rijsbergen
butterworth
1979.
information
retrieval
annotationdiff
http
//gate.ac.uk/sale/tao/splitch10.html
x14-26800010.2
