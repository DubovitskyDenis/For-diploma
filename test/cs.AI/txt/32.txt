appear
theory
practice
logic
programming
relative
expressiveness
defeasible
logics
michael
maher
school
engineering
information
technology
university
new
south
wales
canberra
act
2600
australia
e-mail
m.maher
adfa.edu.au
abstract
address
relative
expressiveness
defeasible
logics
framework
relative
expres-
siveness
formulated
ability
simulate
reasoning
one
logic
within
another
logic
show
simulations
must
modular
sense
also
work
applied
part
theory
order
achieve
useful
notion
relative
expressiveness
present
simulations
showing
logics
without
capability
team
defeat
equally
expressive
also
show
logics
handle
ambiguity
differently
ambiguity
blocking
versus
ambiguity
propagating
distinct
expressiveness
neither
able
simulate
different
formulation
expressiveness
keywords
defeasible
logic
non-monotonic
reasoning
relative
expressiveness
introduction
defeasible
reasoning
concerns
reasoning
chain
reasoning
defeated
considered
basis
inference
another
chain
reasoning
perhaps
sev-
eral
chains
reasoning
defeasible
logics
class
non-monotonic
logics
designed
support
defeasible
reasoning
rule-based
approach
inspired
logic
programming
nute
1994
close
relationship
logics
logic
programming
semantics
maher
governatori
1999
defeasible
logics
similarity
default
logic
reiter
1980
important
dif-
ference
default
logic
performs
credulous
reasoning
whereas
defeasible
logics
sceptical
particular
application
default
rule
proceed
without
reference
default
rules
contrast
defeasible
logics
rule
applied
oppos-
ing
rules
defeated
defeasible
logics
address
distinguished
choices
two
orthogonal
issues
ﬁrst
issue
one
team
defeat
competing
claims
inferring
say
single
claim
required
overcome
competing
claims
order
validate
inference
sufﬁcient
every
claim
overcome
claim
claims
team
overcome
competing
claims
second
issue
addresses
ambiguity
situation
resolution
competing
claims
neither
derived
ambiguity
block
inferences
relying
simply
fail
apply
fact
claims
m.j.
maher
say
overcome
claims
allowed
inﬂuence
later
inferences
ambiguity
propagates
ambiguity
blocking
prop-
agating
logics
respectively
employing
team
defeat
corresponding
logics
without
team
defeat
logics
fall
within
framework
antoniou
2000
defeasible
logics
paper
investigate
notion
relative
expressiveness
respect
four
logics
named
relative
expressiveness
establish
whether
different
logics
substantively
different
simply
provide
capabilities
different
formulations
logic
less
expressive
another
require
dedicated
implementation
theory
implemented
via
translation
expressive
logic1
hand
logic
less
expressive
logics
requires
separate
implementation
explore
alternative
notions
relative
expressiveness
defeasible
logics
make
considered
choice
formulation
main
result
logics
without
team
defeat
viz
separately
equally
expressive
formulation
surprising
team
defeat
appears
sophisticated
powerful
way
adjudi-
cate
competing
claims
requiring
one
claim
overwhelm
others
also
surpris-
ing
terms
relative
inference
strength
incomparable
strictly
weaker
second
result
shows
treatments
ambiguity
incomparable
terms
different
formulation
relative
expressiveness
also
surprising
compared
relative
inference
strength
paper
structured
follows
next
section
provides
overview
defeasible
logics
followed
discussion
formulation
notion
simulation
central
formulation
relative
expressiveness
next
two
sections
present
sim-
ulation
non-team
defeat
within
logic
team
defeat
conversely
simulation
team
defeat
within
logic
without
capability
section
ambiguity
show
two
treatments
ambiguity
incomparable
terms
different
notion
expressiveness
finally
short
discussion
results
related
work
defeasible
logic
section
present
outline
defeasible
logics
investigate
fur-
ther
details
obtained
billington
2010
references
therein
address
propositional
defeasible
logics
might
restrictive
one
sense
use-
ful
notion
relative
expressiveness
work
propositional
logics
well
ﬁrst-order
counterparts
defeasible
theory
consists
set
facts
ﬁnite
set
rules
acyclic
relation
called
superiority
relation
syntax
uniform
logics
considered
facts
individual
literals
expressing
indisputable
truths
rules
relate
set
literals
body
via
arrow
literal
head
one
three
types
strict
rule
arrow
defeasible
rule
arrow
defeater
practice
however
since
logics
addressed
linear
computational
complexity
maher
2001
billington
2010
implementation
translation
might
efﬁcient
direct
implementation
relative
expressiveness
defeasible
logics
arrow
strict
rules
represent
inferences
unequivocally
sound
based
deﬁ-
nite
knowledge
defeasible
rules
represent
inferences
generally
sound
inferences
suggested
defeasible
rule
may
fail
due
presence
theory
rules
defeaters
support
inferences
may
impede
inferences
suggested
rules
superiority
relation
provides
local
priority
rules
strict
defeasible
rules
whose
bodies
established
defeasibly
represent
claims
head
rule
concluded
superiority
relation
contributes
adjudication
claims
inference
rule
leading
possibly
conclusion
every
theory
language
containing
literals
addressed
assume
closed
negation
defeasible
logics
derive
conclusions
outside
syntax
theories
conclu-
sions
may
form
+dq
denotes
inference
rule
literal
concluded
−dq
denotes
logic
establish
infer-
ence
rule
literal
concluded
syntactic
element
called
tag
general
neither
conclusion
may
derivable
concluded
logic
unable
establish
tags
represent
monotonic
provability
unprov-
ability
inference
based
facts
strict
rules
modus
ponens
assume
tags
inference
rules
present
every
defeasible
logic
distinguishes
logic
inference
rule
defeasible
reasoning
four
logics
discussed
intro-
duction
correspond
four
different
pairs
inference
rules
labelled
produce
conclusions
form
respectively
+∂q
−∂q
+δq
−δq
etc
inference
rules
require
auxiliary
tags
inference
rules
denoted
respectively
four
main
defeasible
tags
corresponding
logic
denoted
times
refer
set
rules
theory
implicitly
choosing
set
facts
superiority
relation
empty
general
every
rule
label
name
labels
used
superiority
relation
labels
needed
omitted
size
theory
total
number
symbols
used
expressing
theory
inference
rules
presented
given
defeasible
theory
set
conclusions
denotes
set
conclusions
inferred
using
one
application
inference
rule
inference
rules
implicit
deﬁnition
function
monotonic
function
complete
lattice
sets
conclusions
ordered
containment
least
ﬁxedpoint
set
conclusions
drawn
follow
standard
notation
every
inference
rule
closely
related
inference
rule
allowing
infer
literals
consequences
via
relationship
described
principle
strong
negation
antoniou
2000
notation
inference
rules
requires
explanation
given
literal
comple-
ment
deﬁned
follows
proposition
form
say
rules
literal
head
oppose
rsd
denotes
set
strict
rules
strict
defeasible
rules
etc
denotes
set
rules
respectively
strict
rules
head
given
rule
denotes
set
literals
body
m.j.
maher
+∆q
iff
either
−∆q
iff
+∆a
−∆a
+∂q
iff
either
+∆q
following
three
conditions
hold
rsd
+∂a
−∆∼q
either
−∂a
rsd
+∂a
−∂q
iff
−∆q
either
rsd
−∂a
+∆∼q
+∂a
rsd
either
−∂a
iff
either
+∆q
rsd
iff
−∆q
rsd
either
−∆∼q
either
+∆∼q
inference
rules
clause
inference
rules
+∂∗
literals
derived
mono-
tonic
part
logic
also
considered
defeasible
consequences
see
+∂∗
relies
single
rule
overcome
competing
rules
clause
strict
defeasible
rule
must
found
literals
body
established
.2.1
every
competing
rule
.2.3
either
fails
established
.2.3.1
inferior
comparison
relies
team
consisting
.2.1
rules
.2.3.2
needed
overcome
competing
rules
.2.3
thus
employs
team
defeat
+∂∗
relies
single
rule
overcoming
oppo-
sition
example
consider
following
defeasible
theory
whether
animals
mammals
antoniou
2001
monotreme
mammal
hasf
mammal
layseggs
¬mammal
hasbill
¬mammal
platypus
facts
monotreme
hasf
layseggs
hasbill
rules
¬mammal
over-ruled
respectively
consequently
un-
der
inference
team
defeat
conclude
+∂mammal
+δmammal
un-
der
inference
without
team
defeat
rule
overrules
oppos-
relative
expressiveness
defeasible
logics
ing
rules
consequently
make
positive
conclusion
conclude
−∂∗mammal
−∂∗¬mammal
similarly
ambiguity
blocking
consider
following
theory
ambiguous
neither
overcome
via
superiority
relation
thus
−∂¬p
inferred
body
fails
rule
left
compete
+∂q
inferred
also
conclude
−∂¬q
thus
ambiguity
arguments
apply
hand
ambiguity
propagating
−δ¬p
inferred
conse-
quently
−δ¬q
inferred
however
ambiguity
propagating
logics
like
support
conclusion
+δq
possibility
holds
given
overcome
via
superiority
relation
simply
failed
overcome
competitor
hence
possibility
holds
since
explicitly
overcome
via
superiority
relation
conclusion
+δq
justiﬁed
fact
−δq
concluded
idea
possibly
holding
called
support
expressed
auxiliary
tag
deﬁned
corresponding
inference
rule
similarly
auxiliary
tag
theory
among
conclusions
+σp
+σ¬p
+σ¬q
+σq
since
possibly
hold
ambiguous
clearly
ambiguity
propagated
detailed
discussion
ambiguity
team
defeat
framework
given
billington
2010
inference
deﬁned
mutually
recursively
+δq
either
+∆q
following
three
conditions
hold
rsd
+δa
−∆∼q
either
−σa
rsd
+δa
−δq
−∆q
either
rsd
−δa
+∆∼q
+σa
rsd
either
−δa
+σq
either
+∆q
rsd
−σq
−∆q
rsd
either
+σa
either
−δa
−σa
+δa
m.j.
maher
+δ∗
+δ∗q
either
+∆q
rsd
−δ∗
−δ∗q
−∆q
rsd
either
+δ∗a
−∆∼q
either
−σ∗a
−δ∗a
+∆∼q
+σ∗a
+σ∗
+σ∗q
either
−σ∗
−σ∗q
+∆q
rsd
+σ∗a
either
−δ∗a
−∆q
rsd
either
−σ∗a
+δ∗a
inference
rules
surface
similarities
defeasible
logic
reither
default
logic
reiter
1980
also
substantial
differences
default
logic
employs
credu-
lous
semantics
based
model-theoretic
view
extensions
whereas
defeasible
logics
take
proof-theoretic
view
hence
defeasible
theory
defeasible
log-
ics
draw
conclusion2
whereas
corresponding
default
theory
default
logic
separately
conclude
theory
extended
ﬁnd
defeasible
logics
draw
conclusion
appears
extensions
corresponding
default
theory
thus
formula-
tion
scepticism
intersection
extensions
different
proof-theoretic
formulation
horty
1994
discussion
two
views
context
inheritance
networks
simulating
defeasible
logics
natural
deﬁnition
relative
expressiveness
logics
rely
sets
conclusions
able
express
deﬁnition
theory
logic
simulated
strict
defeasible
conclusions
modulo
tag
logic
uses
say
equal
expressive
every
theory
simulated
theory
simulates
±d1q
iff
±d2q
logic
logic
appears
quite
restrictive
deﬁnition
since
use
larger
language
also
requires
tag
represented
tag
rather
expressed
indirectly
nevertheless
turns
refer
positive
conclusions
using
tag
relative
expressiveness
defeasible
logics
coarse
notion
relative
expressiveness
unsuitable
separating
different
logics
theorem
every
pair
logics
every
defeasible
theory
logic
defeasible
theory
logic
simulates
construction
straightforward
let
set
conclusions
construct
follows
every
literal
+∆q
add
fact
+∆q
−∆q
add
−∆q
nothing
added
+d1q
+∆q
nothing
added
+d1q
−∆q
add
possible
logic
infer
+d1q
+∆q
−∆q
case
arise
−d1q
nothing
added
+d1q
−d1q
add
simplicity
theory
constructed
conclusions
theory
tags
veriﬁcation
theorem
requires
checking
rules
interfere
brevity
part
proof
omitted
sidenote
observe
conclusions
concerning
support
properties
simulated
main
tags
particular
theory
conclu-
sions
+σq
+σ∼q
similarly
none
main
tags
conclude
+dq
+d∼q
consistency
property
logics
proposition
billington
2010
previous
theorem
structure
constructed
theory
nothing
like
theory
freedom
choose
without
restriction
reason
theory
logic
simulated
theory
logic
necessary
require
reﬂects
structure
indirectly
requiring
simulating
theory
robust
certain
changes
introduce
idea
addition
theory
denoted
general
defeasible
theory
may
contain
facts
rules
superiority
relation
let
would
like
consider
theory
logic
able
simulate
two
theories
conclusions
modulo
tags
matter
added
theories
however
strong
requirement
example
simulated
deﬁnition
addition
fact
produces
different
behaviours
make
two
adjustments
restrict
additions
class
theories
allow
hide
internal
symbols
interference
permit
use
symbols
used
require
symbols
available
thus
following
language
separation
condition
deﬁnition
let
language
defeasible
theory
let
class
defeasible
theories
say
logic
simulated
respect
class
every
addition
conclusions
modulo
tags
say
logic
simulated
logic
respect
class
every
theory
simulated
theory
respect
m.j.
maher
use
class
gives
ﬂexibility
expressing
degree
simulation
varying
class
among
deﬁned
many
others
example
consists
empty
theory
notion
simulation
notionally
weaker
deﬁnition
weaker
allows
simulation
use
larger
language
larger
classes
additions
represent
notionally
stronger
forms
simulation
consider
addition
limited
set
facts
allowing
arbitrary
addition
facts
corresponds
treating
theory
logic
deﬁning
non-
monotonic
inference
relation
facts
consequences
similar
dix
treat-
ment
logic
programs
dix
1995
logic
program
viewed
deﬁning
non-
monotonic
inference
relation
input
atoms
output
atoms
also
reﬂects
common
practice
keeping
rules
static
facts
vary
simulation
requires
inference
relation
expressed
expressed
however
clear
addition
facts
sufﬁciently
discriminating
ex-
ample
attempt
extend
construction
theorem
adding
conditions
bodies
rules
construction
given
defeasible
theory
deﬁne
several
parts
follows
deﬁne
set
rules
¬not
set
deﬁne
conjunction
literals
set
−da
ˆa−q
denotes
conjunction
omission
literal
also
use
conjunction
literals
deﬁne
contain
ˆa−q
ˆa−q
+∆q
+∆q
−∆q
+dq
+dq
−dq
describes
behaviour
way
similar
transformation
theorem
preﬁxes
defeasible
rules
ˆa−q
ensure
applicable
addition
consequence
addition
strict
rules
preﬁx
necessary
since
greater
addition
also
allow
inference
+∆q
reﬂection
monotonicity
strict
inference
deﬁne
consist
facts
rules
sa⊆σ
superiority
relation
empty
general
size
exponential
size
proved
simulates
possibility
construction
prompts
require
simulating
theory
limited
polynomial
size
computation
simulating
theory
achieved
polynomial
time
poly-
nomial
simulation
mapping
theory
theory
polynomial
function
size
size
td1d2
size
td1d2
time
compute
simulates
leads
deﬁnition
relative
expressiveness
deﬁnition
relative
expressiveness
defeasible
logics
logic
expressive
logic
iff
polynomial
simulation
respect
addition
facts
alternative
deﬁnition
might
use
addition
rules
without
restriction
polynomial
simulations
suitability
current
deﬁnition
alternatives
de-
pend
results
obtained
notion
expressiveness
strict
logic
expressive
another
lenient
logics
equivalent
expressiveness
practical
use
following
sections
establish
results
showing
deﬁnition
strict
team
defeat
simulates
non-team
defeat
show
every
theory
logic
employ
team
defeat
simulated
theory
corresponding
logic
employ
team
defeat
defeasible
theory
transformed
new
theory
new
theory
employs
new
propo-
sitions
rule
employs
labels
rule
labels
ordered
pair
rules
opposing
heads
let
defeasible
theory
language
deﬁne
transformation
follows
facts
facts
rule
֒→r
contains
֒→r
rule
֒→r′
contains
֒→r′
every
rules
opposite
literals
contains
transformation
literal
rule
essentially
create
copy
opposed
copy
rules
rules
labelled
respectively
derived
copy
rule
able
overcome
opposed
rules
derived
without
team
defeat
example
see
operation
transformation
consider
following
theory
conclude
−∂∗p
−∂∗¬p
whereas
con-
clude
+∂∗p
−∂∗¬p
contains
following
rules
superiority
relation
m.j.
maher
rule
four
rules
−∂p
−∂¬p
reﬂecting
non-team
defeat
behaviour
within
general
size
quadratic
size
thus
remains
establish
simulates
respect
addition
facts
theorem
logic
simulated
simulated
respect
addition
facts
proof
theorem
available
online
appendix
pages
1–5
ﬁrst
shows
induction
tagged
literal
td+a
tagged
literal
corresponding
conversely
shows
together
establish
simulated
transformation
similarly
simulated
thus
equal
expressive
equal
expressive
notice
result
extend
simulation
respect
adding
arbitrary
defeasible
theories
case
use
following
defeasible
theory
theory
distinguishes
demonstrate
non-simulation
directions
similarly
non-team
defeat
simulates
team
defeat
deﬁne
transformation
follows
facts
facts
literal
strict
rule
contains
strict
strict
relative
expressiveness
defeasible
logics
literal
deﬁned
least
one
strict
rule
contains
strict
ordered
pair
opposing
rules
֒→i
֒→j
defeater
contains
r1ij
r2ij
r3ij
strict
ail
֒→i
ail
ail
r2ij
r1ij
iff
r3ij
r1ij
every
every
strict
defeasible
rule
last
three
rules
appear
literal
strict
defeasible
rule
֒→r
contains
one
literal
contains
one
rules
say
body
fails
−dp
derived
succeeds
+db
derived
defeasible
tag
logic
interest
say
rule
defeats
another
opposing
heads
body
succeeds
resulting
theory
derived
iff
defeated
either
body
succeeds
strict
opposing
rule
body
strictly
provable
derived
iff
rule
defeats
body
fails
one
derived
iff
strict
defeasible
rule
body
rule
succeeds
thus
derived
strict
defeasible
rule
succeeds
every
rule
defeated
way
transformed
theory
expresses
team
defeat
elements
deﬁnition
deserve
detailed
explanation
ﬁrst
three
points
together
deﬁne
inference
point
defeasible
rule
supe-
rior
strict
rule
effect
somewhat
counter-intuitive
construction
ensure
+∂∗strict
derived
iff
+∆strict
derived
iff
+∆b
derived
+∂∗¬strict
derived
iff
−∆b
derived
restricts
strict
rule
used
strict
infer-
ences
defeasible
inferences
result
ensures
inferences
via
point
strict
inferences
point
identiﬁes
rule
defeated
part
process
inferring
expresses
defeated
expresses
defeated
strict
+∆bi
established
defeated
rule
use
֒→i
r1ij
ensures
defeated
must
+∂∗bj
m.j.
maher
stronger
+∆q
established
defeated
unless
case
defeated
expressed
r3ij
defeasible
rule
ﬁrst
case
ap-
plies
+∆¬d
established
hence
+∂∗d
derived
however
r3ij
r1ij
circumstances
+∆q
established
de-
feated
normal
case
+∂∗bj
established
defeated
either
−∂∗bi
established
r2ij
achieves
superiority
relation
r2ij
r1ij
reﬂecting
finally
last
three
classes
rules
point
identify
defeated
body
fails
point
deﬁnes
one
succeeds
iff
body
strict
defeasible
rule
succeeds
point
reﬂects
team
defeat
approach
inferred
strict
defeasible
rule
whose
body
succeeds
one
every
rule
defeated
example
see
operation
transformation
consider
following
theory
conclude
+∂∗p
−∂∗¬p
whereas
con-
clude
−∂∗p
−∂∗¬p
contain
facts
strict
rules
parts
contribute
contains
following
rules
superiority
relation
r113
r213
r313
strict
r114
r214
r314
strict
r123
r223
r323
strict
r124
r224
r324
strict
r131
r231
r331
strict
r132
r232
r332
strict
r141
r241
r341
strict
r142
r242
r342
strict
ail
ail
ail
ail
ail
ail
ail
ail
ail
ail
ail
ail
one
one
one
r231
r131
r242
r142
one
one
one
r3ij
r1ij
every
opposing
every
relative
expressiveness
defeasible
logics
draw
conclusions
one
+∂∗d
+∂∗d
among
others
consequently
conclude
+∂∗d
+∂∗d
hence
+∂∗p
re-
ﬂects
team
defeat
behaviour
within
non-team
defeat
logic
general
size
quadratic
size
thus
remains
establish
simulates
respect
addition
facts
theorem
logic
simulated
simulated
respect
addition
facts
proof
theorem
available
online
appendix
page
result
theorems
logics
equal
expressive
power
similarly
equal
expressive
power
ambiguity
consider
different
notion
expressiveness
simulation
must
performed
respect
addition
rules
facts
show
ambiguity
propagating
logics
simulate
ambiguity
blocking
logics
respect
additions
rules
vice
versa
show
logic
simulate
sufﬁces
identify
theory
addition
consequences
theorem
consider
simulation
respect
addition
rules
logics
simulated
conversely
logics
simulated
ﬁrst
address
case
mentioned
sufﬁcient
identify
single
theory
addition
simulated
consider
theory
rules
consider
addition
rules
+∂q
suppose
theory
simulates
respect
rules
must
+δq
furthermore
−∆p
−∆¬p
−∆q
−∆¬q
consequences
also
consequences
language
separation
condition
contain
men-
tion
two
rules
rules
consideration
inferences
since
+δq
inference
rule
+δq
case
rule
either
literal
body
support
i.e
−σ¬p
rule
over-rules
m.j.
maher
however
part
part
language
separation
condition
hence
must
−σ¬p
inference
rule
every
strict
defeasible
rule
either
literal
body
support
rule
over-rule
consider
rule
over-rule
language
separation
condition
body
empty
contradiction
shows
theory
simulates
consequences
whether
used
argument
valid
well
thus
neither
simulated
either
respect
addition
rules
theory
addition
used
show
ambiguity
blocking
logics
simulate
ambiguity
propagating
logics
given
−δq
suppose
theory
simulates
respect
rules
−∂q
−∆p
−∆¬p
−∆q
−∆¬q
consequences
rules
directly
affect
inferences
furthermore
−∂¬p
since
−δ¬p
consequence
hence
coherence
property
proposition
billington
2010
+∂¬p
since
−∂q
inference
rule
−∂q
clause
−∂.2.3
apply
thus
must
+∂¬p
clause
−∂.2.3.1
gives
contradiction
hence
exists
simulated
consequences
whether
used
argument
valid
well
thus
neither
simulated
either
respect
addition
rules
results
comments
end
section
simulating
non-team
defeat
clear
simulation
respect
addition
arbitrary
defeasible
theory
strict
provide
viable
notion
relative
expressiveness
simulation
respect
addition
rules
stronger
simulation
respect
addition
facts
addition
facts
emulated
addition
strict
rules
empty
antecedents
weaker
simulation
respect
full
theories
thus
non-simulation
results
section
necessarily
extend
addition
facts
remains
open
problem
could
also
consider
simulation
respect
addition
rules
instead
facts
basis
notion
relative
expressiveness
seen
notion
able
distinguish
ambiguity
propagating
blocking
logics
would
want
strengthen
theorems
support
notion
discussion
results
paper
summarized
figure
arrow
ex-
presses
polynomially
simulated
respect
addition
facts
question
marks
tags
denote
relationship
unknown
picture
rel-
ative
expressiveness
quite
different
one
relative
inference
strength
relative
inference
strength
logics
described
figure
see
billington
2010
expresses
theory
set
literals
+d1
consequences
subset
equal
set
literals
+d2
consequences
furthermore
relative
expressiveness
defeasible
logics
fig
relative
expressiveness
logics
using
simulation
wrt
addition
facts
fig
relative
inference
strength
logics
theory
containment
strict
addition
−d2
consequences
contained
−d1
consequences
interesting
simulate
even
though
relation
two
logics
terms
relative
strength
furthermore
simulate
even
though
terms
relative
inference
strength
strictly
weaker
hand
weaker
inference
strength
yet
unable
simulate
addition
rules
similarly
less
inference
strength
unable
simulate
addition
rules
however
able
simulate
weaker
inference
strength
thus
see
relative
expressiveness
defeasible
logics
directly
related
relative
inference
strength
logics
work
part
long
line
work
addressing
relative
expressibility
for-
malisms
mention
interpretation
one
theory
another
classical
logic
example
shoenﬁeld
1967
essentially
maps
functions
one
lan-
guage
terms
another
way
axioms
one
theory
map
the-
orems
extends
easily
interpretation
theories
different
similar
logics
technique
provides
basis
transferring
results
consistency
decidability
one
theory
another
idea
used
cox
1992
trans-
fer
complexity
results
clp
languages
similarly
idea
conservative
extension
extension
deﬁnitions
theory
shoenﬁeld
1967
used
establish
programming
language
features
extend
expressive
power
language
landin
1966
felleisen
1991
general
sequential
programming
language
sim-
ulate
another
turing
tarpit
requiring
mapping
one
language
another
homomorphic
enforces
preservation
structure
observing
behaviour
context
meaningful
notion
relative
expressiveness
devel-
oped
felleisen
1991
ideas
extended
concurrent
languages
shapiro
1989
boer
palamidessi
1994
boer
palamidessi
1991
addition
required
parallel
composition
nondeterministic
choice
simulated
language
represented
parallel
composition
nondeterministic
choice
simulating
language
general
treatment
shapiro
1991
recently
janhunen
2006
m.j.
maher
investigated
relative
expressiveness
logic
programs
using
polynomial
bound
translation
weak
form
modularity
also
related
work
defeasible
logic
early
work
antoniou
2001
demonstrated
features
logic
facts
defeaters
supe-
riority
relation
add
expressiveness
logic3
furthermore
idea
simulation
respect
additions
similar
idea
modular
transformation
antoniou
2001
maher
governatori
1999
failure
operators
added
shown
conservative
extension
maher
governatori
1999
antoniou
2006
simulation
logic
programs
kunen
seman-
tics
shown
antoniou
2006
shown
transformation
provide
simulation
logic
programs
stable
model
semantics
conclusion
introduced
notion
relative
expressiveness
defeasible
logics
based
sim-
ulation
respect
addition
facts
shown
strict
simulation
logic
team
defeat
logic
without
team
defeat
surprising
demonstration
fact
however
remains
open
question
whether
relative
expressiveness
relationship
ambiguity
blocking
propagating
logics
also
investigated
alternative
notions
relative
expressiveness
seen
simulation
respect
rules
lenient
remains
determine
whether
strict
already
seen
section
ambiguity
simulation
respect
full
defeasible
theories
strict
acknowledgements
author
thanks
referees
careful
reviewing
references
antoniou
billington
governatori
maher
2000.
ﬂexible
framework
defeasible
logics
aaai/iaai
aaai
press
mit
press
405–410
antoniou
billington
governatori
maher
2001.
representation
results
defeasible
logic
acm
trans
comput
log
255–287
antoniou
billington
governatori
maher
2006.
embedding
defeasible
logic
logic
programming
tplp
703–735
billington
antoniou
governatori
maher
2010.
inclusion
theorem
defeasible
logics
acm
trans
comput
log
cox
mcaloon
tretkoff
1992.
computational
complexity
constraint
logic
programming
languages
ann
math
artif
intell
2-4
163–189
boer
palamidessi
1991.
embedding
tool
language
comparison
csp
hierarchy
concur
baeten
groote
eds
lecture
notes
computer
science
vol
527.
springer
127–141
boer
palamidessi
1994.
embedding
tool
language
comparison
inf
comput
108
128–157
dix
1995.
classiﬁcation
theory
semantics
normal
logic
programs
strong
properties
fundam
inform
227–255
results
extend
ambiguity
propagating
logics
lam
governatori
2011
relative
expressiveness
defeasible
logics
felleisen
1991.
expressive
power
programming
languages
sci
comput
pro-
gram
1-3
35–75
horty
1994.
direct
theories
nonmonotonic
inheritance
handbook
logic
ar-
tiﬁcial
intelligence
logic
programming
volume
nonmonotonic
reasoning
uncertain
reasoning
oxford
university
press
111–187
janhunen
2006.
translatability
results
normal
logic
programs
propositional
theories
journal
applied
non-classical
logics
1-2
35–86
lam
h.-p.
governatori
2011.
necessity
rules
defeasible
reasoning
proceedings
11th
international
conference
logic
programming
nonmonotonic
reasoning
lpnmr-11
delgrande
faber
eds
lecture
notes
computer
science
vol
6645.
springer
berlin
heidelberg
vancouver
canada
187–192
landin
1966.
next
700
programming
languages
commun
acm
157–166
maher
2001.
propositional
defeasible
logic
linear
complexity
tplp
691–711
maher
governatori
1999.
semantic
decomposition
defeasible
logics
aaai/iaai
aaai
press
299–305
nute
1994.
defeasible
logic
handbook
logic
artiﬁcial
intelligence
logic
pro-
gramming
gabbay
hogger
robinson
eds
number
oxford
university
press
353–395
reiter
1980.
logic
default
reasoning
artif
intell
1-2
81–132
shapiro
1989.
family
concurrent
logic
programming
languages
acm
comput
surv
413–510
shapiro
1991.
separating
concurrent
languages
categories
language
embeddings
extended
abstract
stoc
koutsougeras
vitter
eds
acm
198–208
shoenfield
1967.
mathematical
logic
addison-wesley
