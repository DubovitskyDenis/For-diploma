evolving
shepherding
behavior
genetic
programming
algorithms
joshua
brul´e
kevin
engel
department
computer
science
department
computer
science
university
maryland
jtcbrule
gmail.com
university
maryland
kevin.t.engel
gmail.com
nick
fung
isaac
julien
department
computer
science
department
computer
science
university
maryland
nfung13
gmail.com
university
maryland
ijulien6
gmail.com
outperform
naive
human-designed
algo-
rithm
abstract
apply
genetic
programming
techniques
shepherding
problem
group
one
type
animal
sheep
dogs
attempts
control
movements
second
group
animals
sheep
obeying
ﬂocking
behavior
genetic
programming
algorithm
evolves
expression
tree
governs
move-
ments
dog
operands
tree
hand-selected
features
simu-
lation
environment
may
allow
dogs
herd
sheep
eﬀectively
algorithm
uses
tournament-style
selection
crossover
re-
production
point
mutation
ﬁnd
evolved
solutions
generalize
well
introduction
ﬂocking
popular
topic
algorithms
shepherding
less
well-studied
exist-
ing
approaches
shepherding
typically
train
predictive
model
employ
pre-
deﬁned
strategies
may
combined
achieve
goal
typically
goal
shep-
herding
herd
ﬂock
location
refer
pen
approach
shepherding
system
predeﬁned
strategies
predictive
modeling
using
standard
genetic
program-
ming
techniques
evolve
expression
tree
pure
stateless
function
acts
force
update
simulated
sheep
dog
time
step
parameters
function
include
combination
dog
position
position
dogs
cooperative
herding
position
nearest
free
uncaptured
sheep
center
mass
ﬂock
steering
point
position
line
steer-
ing
point
entrance
pen
crosses
sheep
simulated
sheep
obey
sim-
ple
ﬁxed
ﬂocking
rules
designed
sheep
attempt
cluster
avoid
sheep
dog
ﬁtness
evolved
dog-ai
fraction
sheep
captured
ﬁxed
number
simu-
lation
steps
related
work
lien
2005
studies
shepherding
be-
havior
environment
multiple
shep-
herds
cooperating
control
ﬂock
shep-
herds
exert
repulsive
force
ﬂock
must
ﬁnd
steering
points
inﬂuence
direction
ﬂock
desired
steering
points
group
shepherds
form
either
line
arc
side
ﬂock
shepherd
chooses
steering
point
approach
based
one
several
pro-
posed
heuristics
sumpter
1998
presents
machine
vision
system
models
position
velocity
ﬂock
animals
point
dis-
tribution
mode
used
generate
features
based
input
camera
mounted
robotic
sheepdog
features
used
estimate
probability
distribu-
tion
movement
ﬂock
time
conditional
previous
locations
ve-
locities
probability
distribution
esti-
mated
using
competitive
learning
neural
network
finally
robot
herd
ﬂock
animals
toward
goal
maximum
like-
lihood
estimate
robot
path
bennet
trafankowski
2012
provides
analysis
ﬂocking
herding
algo-
rithms
also
introduces
herding
algo-
rithm
based
speciﬁc
strategies
inspired
real
sheepdogs
also
considers
using
one
several
ﬂocking
strategies
animals
herded
ﬁnds
success
diﬀerent
herding
algorithm
often
depen-
dent
ﬂocking
behavior
cowling
gmeinwieser
2010
uses
combined
top-down
bottom-up
approach
provide
realistic
sheep
herding
con-
text
game
ﬁnite
state
machine
associ-
ated
sheepdog
represents
possible
herding
strategies
circling
state
fsm
controlled
top
level
shepherd
simulation
3.1
environment
simulation
environment
takes
place
within
enclosed
square
area
designated
ﬁeld
ﬁeld
boundaries
thought
fences
act
barriers
sheep
dogs
agent
attempts
pass
fence
penetrating
coordinate
reset
fence
coordinate
cor-
responding
velocity
set
zero
rules
updating
position
based
set
force
vectors
sheep
clustering
force
sheep
within
distance
one
another
at-
tracted/repelled
magnitude
cid:18
cid:19
cid:126
xs1
cid:126
xs2|2
dog
avoidance
force
sheep
within
distance
dog
repelled
magnitude
cid:18
cid:19
cid:126
cid:126
xd|2
fence
avoidance
force
sheep
within
distance
fence
repelled
magnitude
figure
screenshot
simulation
environment
goal
sheep
dogs
move
sheep
pen
located
top
left
cor-
ner
ﬁeld
bottom
side
pen
open
ﬁeld
fence
right
side
pen
present
increase
diﬃculty
task
help
prevent
sheep
randomly
drifting
3.2
agents
simulation
agents
consist
sheep
dogs
sheep
follow
ﬁxed
perpendicular
distance
be-
tween
sheep
fence
forces
apply
free
sheep
mov-
ing
open
ﬁeld
area
upon
entering
pen
sheep
captured
position
ﬁxed
corner
pen
longer
updated
eﬀectively
removing
sheep
simulation
dogs
hand
con-
trolled
evolved
genetic
program
dog
outputs
force
dog
time
step
simulation
constraint
dog
behavior
like
sheep
allowed
penetrate
fences
described
previous
section
3.3
initial
conditions
simulation
parameters
encourage
evolution
general
solu-
tions
shepherding
problem
random
initial
conditions
used
agents
dogs
spawn
randomly
inside
pen
initial
velocity
sheep
spawn
randomly
right
half
ﬁeld
random
initial
velocities
right
half
ﬁeld
cho-
sen
minimize
possibility
sheep
wan-
dering
pen
without
guidance
dogs
simulation
run
500
time
steps
returning
number
cap-
tured
sheep
end
ﬁeld
pen
chosen
squares
sizes
100
100
respectively
majority
results
discussed
paper
follow-
ing
parameters
used
.05
last
two
parameters
maximum
al-
lowed
velocities
force
increases
veloc-
ity
past
maximum
rescaled
sheep
dogs
genetic
program
4.1
expression
trees
dog
pair
pure
memoryless
functions
act
set
parameters
passed
simulation
experi-
mented
several
diﬀerent
parameter
sets
detailed
section
functions
stored
s-expressions
i.e
trees
whose
leaves
either
one
parameters
function
random
number
drawn
normal
distribution
since
updating
dog
position
requires
two
values
root
node
tree
always
pair
two
subtrees
rep-
resenting
logic
forces
re-
spectively
internal
nodes
dog
expression
tree
one
following
opera-
tors
unary
binary
div
div
protected
division
attempting
divide
zero
return
instead
addition
basic
mathematical
op-
erations
included
qif
quater-
nary
evaluates
otherwise
note
functions
ex-
pression
trees
functions
real
numbers
implemented
jvm
doubles
guarantee-
ing
closure
genetic
operators
4.2
genetic
operators
initial-
ization
design
genetic
programming
sys-
tem
closely
followed
standard
practice
de-
scribed
used
generational
ﬁxed
population
size
initialized
using
ramped
half-and-half
method
half
ini-
tial
population
fully
grown
ramp
depth
dramp
set
evaluations
half
initial
population
grown
randomly
beginning
root
node
ei-
ther
leaf
terminal
node
interior
function
node
equal
probability
trees
depth
limited
dmax
due
lim-
itations
jvm
set
runs
parent
selection
done
binary
tour-
nament
selection
oﬀspring
generated
either
via
point
mutation
probability
crossover
point
mutation
done
replacing
uni-
formly
randomly
selected
subtree
par-
ent
new
randomly
grown
tree
depth
limited
oﬀspring
size
would
re-
spect
dmax
crossover
performed
ran-
domly
selecting
crossover
point
par-
ent
generating
new
oﬀspring
swapping
subtrees
parent
event
one
oﬀspring
resulting
crossover
exceeded
dmax
discarded
addition
generated
oﬀspring
one
elite
clone
carried
previous
generation
next
4.3
fitness
ﬁtness
algorithm
measured
percentage
sheep
success-
fully
shepherded
pen
main
dis-
advantage
ﬁtness
measure
dif-
ﬁculty
obtaining
ﬁtness
greater
zero
initial
random
population
another
ﬁtness
measurement
considered
av-
erage
distance
sheep
pen
however
ﬁtness
measurement
often
misleading
sheep
opposite
side
pen
fence
high
ﬁtness
despite
require
additional
complex
inﬂuences
force
around
fence
pen
average
distance
ﬁtness
ultimately
dis-
carded
favor
original
ﬁtness
func-
tion
additional
problem
ﬁtness
functions
high
variance
results
simulation
run
due
random
initial
conditions
simple
test
cases
genetic
algorithm
could
make
signiﬁcant
progress
due
misleading
ﬂuctuations
ﬁtness
issues
partially
mitigated
redeﬁning
ﬁtness
average
ﬁtness
simulations
experimentation
5.1
one
dog
initial
experimentation
took
place
conditions
single
dog
attempting
shep-
herd
sheep
pen
dog
given
access
limited
set
pa-
rameters
position
coordinates
well
nearest
free
sheep
simpliﬁed
scenario
targeted
early
goal
restricts
complexity
problem
provides
good
conditions
evolved
behaviors
experiment
took
place
using
population
size
250
220
generations
mutation
rate
held
0.05
5.2
multiple
dogs
achieving
reasonable
success
sin-
gle
dog
scenario
extended
simulation
multiple
dogs
determine
dogs
could
develop
team-like
behaviors
genetic
algorithm
would
rediscover
successful
single
dog
algorithm
simulations
run
dogs
attempting
herd
sheep
encourage
teamwork
dog
given
expanded
set
param-
eters
dog
position
dog
positions
near-
est
free
sheep
average
sheep
position
steering
point
steering
point
de-
ﬁned
point
constant
distance
behind
nearest
free
sheep
position
line
pen
note
dogs
spawn
diﬀerent
locations
many
parameters
unique
dog
allowing
divergent
behavior
simulation
parameters
mostly
carried
single
dog
sce-
nario
case
population
size
250
used
algorithms
evolved
100
generations
results
baseline
behavior
evolved
ge-
netic
algorithms
could
compared
hand-
crafted
algorithm
referred
simple-dog
created
evaluated
maintain
fair-
ness
handcrafted
algorithm
limited
parameters
operators
available
genetic
algorithms
algorithm
applied
single
dog
scenario
000
simulation
runs
achiev-
ing
average
ﬁtness
0.640
0.002.
comparison
also
evaluated
eﬀective-
ness
rand-dog
dog
applies
uni-
formly
random
force
vector
time
step
achieved
average
ﬁtness
0.054
0.001.
earliest
evolved
algorithm
suc-
ceeded
shepherding
sheep
pen
dubbed
split-dog
due
tendency
shepherd
sheep
moving
towards
ﬂock
maximum
velocity
splitting
ﬂock
apart
remarkably
algorithm
evolved
split
ﬂock
apart
way
sheep
clustering
force
would
cause
ﬂock
reassemble
pen
despite
interactions
dog
tended
get
stuck
bottom
right
cor-
ner
simulation
environment
one
particularly
successful
simulation
split-dog
achieved
15/20
ﬁtness
however
relied
speciﬁc
environmental/initial
condi-
tions
split-dog
achieved
poor
ﬁt-
ness
average
however
given
suﬃcient
generations
genetic
program
produced
evolved
behav-
ior
performed
well
figure
shows
growth
maximum
average
ﬁtness
values
genetic
algorithm
population
generation
maximum
ﬁtness
value
converges
close
perfect
shepherding
within
generations
although
ﬁtness
growth
change
trials
due
nondeterministic
nature
genetic
program-
ming
simulation
environment
typical
results
matched
growth
curve
seen
220
generations
best
evolved
al-
gorithm
average
ﬁtness
0.743
figure
growth
fitness
generation
single
dog
150
population
run
figure
evaluated
fitness
10,000
trials
0.003
surpassing
simple-dog
human-
written
algorithm
although
genetically
evolved
code
practically
unreadable
basic
strategy
inferred
sim-
ulation
visualization
dog
waits
sheep
cluster
moves
right
ﬁeld
pushing
sheep
cluster
left
underneath
pen
dog
moves
back
left
pushing
majority
sheep
pen
best
evolved
multiple
dog
algorithm
ﬁtness
0.780
0.003
slightly
bet-
ter
single
dog
dogs
behaved
similar
manner
overlapping
simulation
near
end
sheep
neared
pen
would
sep-
arate
pushing
others
nearer
pen
pushing
sides
keep
sheep
escaping
although
lim-
ited
teamwork
enough
improve
upon
results
single
dog
algorithm
due
stochastic
nature
sim-
ulation
caused
random
initial
place-
ment
sheep
tested
evolved
al-
gorithms
large
number
trials
conﬁrm
eﬀectiveness
results
show
evolved
single
three
dog
al-
gorithms
obtained
high
average
ﬁtness
10,000
trials
split-dog
serves
com-
parison
best
evolved
algorithms
split-
dog
evolved
generations
actually
fails
outperform
rand-dog
6.1
adaptability
environ-
mental
conditions
one
danger
genetic
programming
potential
overﬁt
algorithm
cases
evolved
algorithm
could
excel
completing
intended
task
falter
confronted
slightly
diﬀerent
task
end
genetic
algorithms
mea-
sured
ﬁtness
tasks
al-
tered
training
task
split-dog
serves
interesting
demon-
stration
genetic
programming
abil-
ity
ﬁnd
novel
solutions
tendency
produce
drastically
overﬁt
solutions
how-
ever
given
suﬃcient
generations
random
initial
sheep
positions
appeared
success-
fully
force
genetic
program
develop
generally
good
solutions
evolved
solutions
still
perform
well
even
un-
der
environmental
conditions
genetic
program
trained
unfortunately
however
evolved
genetic
programs
generally
diﬃcult
impossible
humans
understand
ample
room
investiga-
tion
using
presented
framework
in-
teresting
adaptation
would
increase
complexity
problem
moving
pen
away
corner
limiting
vision
dogs
addition
sheep
could
also
allowed
evolve
adapt
dog
pop-
ulation
implementation
entire
genetic
programming
system
simulation
environment
project
implemented
clojure
dialect
lisp
us-
ing
standard
library
functions
avail-
able
language
simulation
visu-
alizations
implemented
java
full
code
repository
links
videos
simulations
available
online
https
//github.com/jtcb/ﬂock
figure
effect
changing
simulation
parameters
algorithmic
fitness
small
sample
shown
figure
in-
cluding
runs
less
sheep
sheep
100
faster
sheep
weaker
sheep
clustering
force
diﬀerent
ini-
tial
conditions
sheep
spawn
lower
half
ﬁeld
comparing
human
written
simple-dog
algorithm
evolved
three-
dog
one
see
remain
reasonably
eﬀective
despite
changes
environ-
ment
simple
tests
evolved
al-
gorithm
appears
adaptive
general
human
written
one
discussion
experimental
results
demonstrates
potential
evolving
complex
behaviors
genetic
programming
although
operators
parameters
made
available
genetic
algorithms
quite
limited
successful
capabilities
evolved
within
generations
references
sumpter
a.j
rulpitt
vaughan
r.d
tillett
r.d
boylel
learning
models
animal
behaviour
robotic
sheepdog
1998
iapr
wotkrhop
ma-
chine
vision
applications
nov
17-t9
brandon
bennett
matthew
trafankowski
comparative
inves-
tigation
herding
algorithms
2012
proceeding
proceedings
sym-
posium
understanding
modeling
collective
phenomena
umocop
artiﬁcial
intelligence
simulation
behaviour
world
congress
aisb-12
peter
cowling
christian
gmein-
wieser
herding
sheep
2010
pro-
ceedings
sixth
aaai
conference
artiﬁcial
intelligence
interactive
digital
entertainment
jyh-ming
lien
samuel
rodriguez
jean-
phillipe
malric
nancy
am-
ato
shepherding
behaviors
multi-
ple
shepherds
2005.
proceedings
2005
ieee
international
conference
robotics
automation
eiben
a.e
smith
j.e
2007
intro-
duction
evolutionary
computing
new
york
new
york
springer
