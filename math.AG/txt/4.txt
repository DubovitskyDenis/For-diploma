inertia
operator
motivic
hall
algebra
kai
behrend
pooya
ronagh
october
2018
abstract
study
action
inertia
operator
motivic
hall
alge-
bra
prove
diagonalizable
leads
ﬁltration
hall
algebra
whose
associated
graded
algebra
commutative
par-
ticular
degree
subspace
forms
lie
algebra
call
lie
algebra
virtually
indecomposable
elements
following
joyce
prove
integral
virtually
indecomposable
elements
admits
euler
characteristic
specialization
order
take
advantage
fact
inertia
groups
unit
groups
algebras
introduce
notion
algebroid
contents
introduction
algebroids
motivic
hall
algebra
example
spectrum
semi-simple
inertia
results
discussion
acknowledgements
linear
algebraic
stacks
algebroids
1.1
algebraic
stacks
sheaves
algebraic
stacks
coherent
sheaves
representable
sheaves
modules
1.2
linear
algebraic
stacks
examples
substacks
fibered
products
lack
locality
special
linear
stacks
1.3
finite
type
algebras
inertia
representation
algebra
bundles
central
idempotents
primitive
idempotents
degree
stratiﬁcation
semi-simple
elements
semi-simple
centre
permanence
rank
split
rank
families
idempotents
group
units
1.4
algebroids
morphisms
algebroids
algebroid
inertia
idempotents
algebroids
algebroid
representations
clear
algebroids
spectrum
semi-simple
inertia
stack
functions
ﬁltration
split
central
rank
2.1
idempotent
operators
2.2
spectrum
semisimple
inertia
2.3
graded
structure
multiplication
combinatorial
lemma
order
ﬁltration
hall
algebra
3.1
filtered
structure
hall
algebra
analysis
decomposing
proof
main
lemma
3.2
semi-classical
hall
algebra
3.3
epsilon
functions
epsilons
logarithms
hopf
algebra
integration
vector
bundle
relations
regular
motivic
weights
integral
4.1
poles
theorem
4.2
integral
vs.
hall
product
γ-indexed
integral
semi-classical
limit
appendix
comparison
joyce
virtual
projections
example
introduction
simplicity
let
work
ﬁeld
later
replaced
noetherian
ring
let
abelian
k-linear
algebraic
stack
roughly
means
time
k-linear
abelian
category
ﬁnite-dimensional
hom-spaces
algebraic
stack
locally
ﬁnite
type
precise
deﬁnition
linear
algebraic
stack
deﬁnition
1.9.
body
paper
work
exact
instead
abelian
categories
see
beginning
section
examples
interested
include
cohy
moduli
stack
coherent
-modules
projec-
tive
k-variety
repq
moduli
stack
representations
quiver
ﬁnite-dimensional
k-vector
spaces
iii
case
spec
vect
stack
ﬁnite-dimensional
k-vector
spaces
case
vect
k-scheme
exact
-linear
category
vector
bundles
vect
abelian
k-linear
category
ﬁnite-dimensional
k-vector
spaces
algebraic
stack
vect
vect
spec
bgl1
bgl2
algebroids
canonical
sheaf
algebras
set
sections
s-valued
point
-algebra
end
vect
point
vector
bundle
end
-module
endomorphisms
also
canonical
isomorphism
group
sheaves
inertia
stack
recall
sections
s-valued
point
automorphisms
words
units
algebra
endomorphisms
call
triple
algebroid
see
deﬁnition
1.38
re-
mark
1.44
algebraic
stack
representable
sheaf
ﬁnite
-algebras
ﬁnite
type
algebras
call
see
deﬁnition
1.18
open
immersion
relative
group
schemes
making
canonical
diagram
autx
commute
canonical
sheaf
algebras
example
al-
gebroid
case
isomorphism
yielding
call
strict
algebroid
algebroids
generalizations
linear
algebraic
stacks
linear
coarse
moduli
spaces
strict
slightly
ﬂexible
example
schemes
considered
algebroids
canonical
way
algebraic
stack
base
algebroid
connected
component
inertia
stack
group
units
algebra
main
signiﬁcance
algebroids
like
algebraic
stacks
algebroids
form
2-category
ﬁbered
products
exist
whenever
algebroid
inert
morphism
algebraic
stacks
i.e
x|y
see
deﬁnition
1.47
stack
endowed
natural
structure
algebroid
via
examples
inert
morphisms
include
monomorphisms
projections
schemes
locally
closed
immersion
algebroids
morphism
locally
closed
immersion
algebraic
stacks
every
scheme
algebroid
via
deﬁnition
key
observation
algebroid
another
algebroid
fact
inertia
stack
stack
total
space
sheaf
algebras
equal
subalgebra
a|ix
ﬁxed
tautological
automorphism
call
inertia
algebroid
comes
canonical
morphism
also
semi-simple
connected
version
algebroid
inertia
denoted
motivic
hall
algebra
deﬁne
stack
functions
representable
morphisms
algebroids
ﬁnite
type
hall
algebra
q-vector
space
isomorphism
classes
stack
functions
modulo
scissor
relations
relative
bundle
relations
relative
denotes
hall
algebra
element
deﬁned
stack
func-
tion
base
also
closed
immersion
algebroids
open
complement
inert
ﬁbre
bundle
deﬁni-
tion
1.53
special
structure
group
ﬁbre
endowed
canonical
algebroid
structure
strict
algebroids
bundle
relations
follow
scissor
relations
following
structures
hall
algebra
module
structure
let
var
denote
grothendieck
ring
varieties
denote
motivic
weight
aﬃne
line
var
deﬁne
var
-module
structure
multiplication
⊕−→
deﬁnes
commutative
multiplication
var
-algebra
multiplication
hall
product
using
stack
short
exact
sequences
deﬁne
hall
algebra
product
details
see
section
module
var
-algebra
also
respect
hall
product
unit
multiplicative
unit
respect
products
represented
spec
0−→
via
unit
get
inclusion
var
inertia
endomorphism
algebroid
inertia
deﬁnes
op-
erator
via
inertia
operator
linear
var
multiplicative
respect
commutative
multiplication
facts
hold
connected
semi-simple
inertia
operators
also
non-representable
version
hall
algebra
drop
representability
requirement
stack
functions
simply
deﬁne
stack
function
morphism
algebroids
ﬁnite
type
representable
hall
algebra
subalgebra
respect
products
non-representable
one
results
diagonalizability
various
operators
hold
true
also
non-representable
hall
algebra
algebraic
results
structure
hall
algebra
need
representability
simplicity
restrict
therefore
representable
case
usually
deﬁning
hall
algebra
one
requires
bundle
relations
also
non-inert
morphisms
connected
inertia
operator
respect
relations
therefore
include
example
stack
function
vect
thing
algebroid
together
faithful
representation
examples
stack
functions
values
vect
include
subalgebras
mn×n
elements
vect
deﬁned
mn×n
mn×n
equal
conjugate
mn×n
subalgebra
vect
respect
hall
product
gener-
ated
gln
vect
free
elements
unitary
q-algebra
literature
known
hopf
algebra
non-commutative
symmetric
functions
see
example
4.1
add
non-inert
vector
bundle
relations
relative
vect
see
e.g
get
gln
...
cid:1
cid:0
denotes
q-deformed
multinomial
coeﬃ-
cient
gives
motivic
weight
ﬂag
variety
type
also
denoted
parabolic
subgroup
gln
type
hence
q-algebra
obtained
dividing
vector
bundle
relations
commutative
polynomial
algebra
symbols
hopf
algebra
symmetric
functions
spectrum
semi-simple
inertia
main
point
work
study
spectral
theory
semi-
simple
inertia
operator
announcing
results
let
sample
calculations
contain
central
ideas
paper
strict
algebroids
occur
write
instead
consider
vect
linear
stack
line
bundles
deﬁnes
stack
function
bgl1
vect
vect
bgl1
vect
glss
bgl1
vect
gl1
bgl1
vect
bgl1
vect
proves
bgl1
vect
eigenvector
correspond-
ing
eigenvalue
var
algebra
morphism
respect
commutative
product
immediately
follows
every
eigen-
value
corresponding
eigenvector
bglr
bgln
vect
vect
eigenvalues
fact
let
consider
stack
function
rank
vector
bundles
bgl2
vect
recall
inertia
stack
bgl2
quotient
stack
gl2
/ad
gl2
gl2
acts
adjoint
action
semi-simple
part
gl2
decomposes
according
whether
two
eigenvalues
element
gl2
equal
equal
scissor
relations
glneq
bgl2
gleq
/ad
gl2
glneq
bgl2
∗/adn
bgl2
/ad
gl2
one-parameter
subgroup
scalar
matrices
maximal
torus
diagonal
matrices
gl2
notation
normalizer
gl2
∗/adn
next
calculate
ssx
fact
∗/n
∗/n
∗×t
stabilizer
formula
inertia
stack
quotient
stack
note
acts
diagonally
via
quotient
swapping
entries
embed
equivariantly
respect
decompose
gl1
gl1
gives
gl1
gl1
pullback
diagram
algebroids
∗/n
/z2
∗/z2
shows
vector
bundle
∗/n
pullback
vector
bundle
/z2
∗/z2
latter
vector
bundle
scheme
therefore
zariski-locally
trivial
hilbert
theorem
90.
true
pullback
bundle
hence
conclude
∗/n
using
scissor
relations
conclude
q2x
ssx
∗/t
solve
ssx
get
ssx
already
know
conclude
bgl2
generate
ss-invariant
subspace
vect
matrix
subspace
2
matrix
lower
triangular
distinct
scalars
diagonal
therefore
diagonalizable
ﬁeld
subspace
diagonalizable
eigenvalues
decompose
bgl2
sum
eigenvectors
get
eigenvectors
q−1
bgl2
q−1
q−2
eigenvalue
eigenvalue
eigenvalue
important
observation
add
together
eigen-
components
whose
eigenvalues
order
vanishing
get
coeﬃcients
instead
example
add
together
components
bgl2
eigenvalues
obtain
bgl2
another
important
observation
diagonalizing
de-
spite
appearances
require
invert
fact
algebroid
appearing
argument
divisible
although
quo-
tient
strict
algebroid
longer
fact
reason
considering
non-strict
algebroids
calculations
suppressed
algebra
part
various
algebroids
leave
reader
supply
natural
algebra
algebroid
mentioned
results
summarize
main
results
paper
theorem
diagonalizability
operator
diagonalizable
eigenvalues
indexed
partitions
eigenvalue
corresponding
partition
cyclotomic
polynomial
words
direct
sum
decomposition
qλi
=mλ
subspaces
invariant
ss|kλ
multiplication
theorem
holds
operator
context
strict
algebroids
also
prove
stronger
version
avoiding
denominators
divis-
ible
version
works
algebroids
proof
theorem
generalization
sample
calculation
stack
rank
vector
bundles
one
goal
section
paper
set
necessary
notation
theorem
graded
structure
direct
sum
de-
composition
=mr≥0
mordq=1
moreover
commutative
product
graded
respect
theorem
holds
context
strict
algebroids
fact
gradedness
commutative
product
expected
fact
semi-simple
inertia
respects
commutative
prod-
uct
follows
fact
true
geometrically
descending
ﬁltration
induced
grad-
ing
described
follows
q-span
stack
functions
algebra
global
sections
admits
least
orthogonal
non-zero
central
idempotents
algebra
algebroid
direct
summands
common
eigenspaces
fam-
ily
commuting
operators
n≥0
stack
decom-
positions
sum
orthogonal
labelled
idempotents
eigenvalues
operators
integers
whole
family
operators
diagonalizable
proof
fact
proceeds
proving
preserve
descending
ﬁltration
described
ge-
ometrically
distinct
integer
diagonal
entries
turns
ascending
ﬁltration
associated
grading
theorem
described
ker
en+1
let
also
point
var
context
strict
algebroids
denote
projection
operator
onto
summand
form
generating
series
=pr≥0
πrtr
=xn≥0
results
could
proved
pairs
algebraic
stacks
endowed
ﬁnite
type
algebras
instead
algebroids
strict
algebroids
one
simply
replaces
theorem
filtered
nature
hall
algebra
hall
prod-
uct
ﬁltered
respect
ﬁltration
induced
grad-
ing
moreover
associated
graded
algebra
cid:0
cid:1
cid:0
cid:1
words
≤r+s
mod
≤r+s−1
proof
theorem
uses
much
simple
com-
binatorics
involving
relabelling
direct
sum
decompositions
com-
patibilities
direct
sum
decompositions
short
exact
sequences
splittings
short
exact
sequences
theorem
implies
one
parameter
family
algebras
cid:0
cid:1
given
rees
construction
=mn≥0
tnk
deformation
quantization
i.e.
one-parameter
ﬂat
family
alge-
bras
special
ﬁbre
commutative
algebra
cid:0
cid:1
hence
graded
algebra
cid:0
cid:1
inherits
poisson
bracket
degree
particular
lie
algebra
turns
lie
bracket
equal
commutator
bracket
associated
following
joyce
call
lie
algebra
virtually
inde-
composable
elements
notation
vir
denote
projection
onto
vir
πvir
notation
special
case
πvir
=xn
n+1
terms
eigenspaces
semi-simple
inertia
vir
q−1
q2−1
q3−1
theorem
hall
algebra
logarithms
let
small
enough
substack
closed
extensions
direct
summands
intersect-
ing
spec
0−→
particular
∗-logarithm
=xn≥0
=xn≥1
n+1
vir
virtually
indecomposable
precise
deﬁnition
small
enough
see
section
3.3.
exam-
ple
cohy
curve
could
take
consists
non-zero
semi-stable
vector
bundles
ﬁxed
slope
since
typically
nite
type
make
sense
pass
certain
completion
see
section
3.3
details
theorem
poles
theorem
let
k-ring
alge-
braic
stacks
modulo
bundle
relations
special
structure
group
inert
consider
map
7−→
forgets
structure
map
algebroid
structure
stack
regular
element
i.e.
identiﬁcation
var
q−1
q2−1
written
denominator
vanish
moreover
suppose
grading
monoid
aγ∈γ
say
degree
need
endowed
z-valued
bilinear
form
every
object
every
extension
mβ+γ
stack
extensions
quotient
vector
space
another
vector
space
acting
trivially
dim
dim
precise
assumptions
see
section
4.2.
satisﬁed
repq
cohy
smooth
curve
generally
hereditary
commutative
diagram
cid:0
cid:1
t7→
q−1
t7−→0
cid:0
cid:1
q7→1
var
reg
q7−→1
var
use
γ-graded
integral
essentially
generating
func-
tion
indexed
integrals
components
degree
given
stack
function
upper
horizontal
arrow
diagram
specialization
map
exists
theorem
left
vertical
arrow
exists
poles
theorem
standard
fact
map
algebra
morphism
i.e.
respects
∗-product
target
var
reg
endowed
q-deformed
product
twisted
formal
consequence
commutativity
diagram
right
vertical
map
morphism
poisson
algebras
target
var
endowed
bracket
induced
particular
deduce
vir
var
7−→
cid:0
cid:1
cid:12
cid:12
q=1uγ
resq=1
morphism
lie
algebras
proof
poles
theorem
combines
results
diagonalizability
especially
form
avoiding
denominators
divisible
result
algebroid
stack
regular
motivic
weight
i.e.
reg
think
motivic
version
burnside
lemma
nat-
ural
looking
conjecture
algebraic
stack
motivic
weight
contained
var
likely
false
discussion
produce
counting
invariants
need
look
subcategories
apply
theorem
giving
virtually
indecom-
posable
elements
apply
integral
yielding
generating
functions
coeﬃcients
var
apply
euler
characteristic
elements
var
obtain
rational
numbers
hereditary
case
fact
morphism
lie
algebras
gives
relations
among
generating
functions
one
in-
terested
leads
wall-crossing
formulas
results
details
refer
works
joyce
joyce-song
many
others
deal
calabi-yau
case
one
needs
insert
correct
motivic
vanishing
cycle
weights
deﬁne
integral
done
joyce
song
work
joyce
conﬁgurations
abelian
categories
contains
results
correspond
deﬁnitions
ad-hoc
fact
one
reason
writing
present
article
give
conceptual
treatment
joyce
results
prove
notion
virtual
indecomposable
object
coincides
joyce
except
case
vect
see
appendix
instead
prove
notion
properties
joyce
useful
course
counting
invariants
obtain
ones
obtained
joyce
depend
deﬁnition
virtual
indecomposable
object
think
lie
algebra
vir
analogue
lie
algebra
primitive
elements
cocommutative
hopf
algebra
fact
one
may
ask
whether
cid:0
cid:1
equal
universal
enveloping
algebra
lie
algebra
vir
deduce
statement
structure
theorems
hopf
algebras
one
would
need
enhance
cocommutative
hopf
algebra
able
construct
necessary
coproduct
view
family
operators
somewhat
replacement
lets
prove
least
results
expected
cocommutative
hopf
algebra
particular
theorems
acknowledgements
idea
consider
inertia
stack
operator
k-groups
stacks
motivic
hall
algebras
study
eigenspace
decomposition
understand
joyce
work
conceptual
fashion
due
tom
bridgeland
particular
conjecture
semi-simple
inertia
operator
diagonalizable
due
would
like
thank
tom
bridgeland
sharing
ideas
would
also
like
thank
dominic
joyce
arend
bayer
fruitful
discussions
linear
algebraic
stacks
algebroids
1.1
algebraic
stacks
let
brieﬂy
summarize
conventions
algebraic
stacks
choose
noetherian
base
ring
commutative
unit
base
category
category
r-schemes
endowed
´etale
topology
canonical
sheaf
r-algebras
represented
spec
called
structure
sheaf
assume
algebraic
stacks
locally
ﬁnite
type
thus
algebraic
stack
stack
site
admits
presentation
smooth
groupoid
algebraic
spaces
locally
ﬁnite
type
source
target
morphisms
smooth
diagonal
ﬁnite
type
fact
algebraic
stacks
encounter
aﬃne
diagonal
stratiﬁcation
algebraic
stack
mean
morphism
algebraic
stacks
surjective
monomorphism
admits
ﬁnite
decomposition
every
locally
closed
embedding
algebraic
stacks
algebraic
group
acting
algebraic
space
denote
quotient
stack
x/g
fear
common
notation
x/g
would
lead
confusion
notation
elements
various
k-groups
schemes
stacks
suppose
relative
group
scheme
stack
connected
component
notation
subsheaf
deﬁned
requiring
section
factor
points
equivalently
geometric
points
smooth
connected
component
represented
open
substack
smooth
group
scheme
geometrically
connected
ﬁbers
see
expos´e
vib
th´eoreme
3.10
inertia
stack
algebraic
stack
smooth
connected
component
exists
apply
rigidiﬁcation
con-
struction
see
example
appendix
obtain
uniquely
determined
deligne-mumford
stack
together
mor-
phism
making
connected
gerbe
means
relative
inertia
connected
ﬁbres
structure
morphism
smooth
gerbe
isotrivial
gerbe
admits
section
ﬁnite
´etale
x-stack
smooth
gerbe
deligne-mumford
stack
exists
stratiﬁcation
restriction
gerbe
piece
isotrivial
follows
fact
quasi-
ﬁnite
morphism
deligne-mumford
stacks
generically
ﬁnite
turn
follows
zariski
main
theorem
section
let
also
remark
every
deligne-mumford
stack
admits
strat-
iﬁcation
integral
normal
deligne-mumford
stacks
although
use
fact
sheaves
algebraic
stacks
need
clarify
notions
vector
bundle
coherent
sheaf
rep-
resentable
sheaf
-modules
relate
particular
algebraic
stack
ﬁbered
category
category
inherits
topology
called
´etale
topology
endowed
topology
big
´etale
site
sheaves
deﬁnition
sheaves
big
´etale
site
example
induces
sheaf
r-algebras
denoted
called
structure
sheaf
represented
sheaf
induces
every
object
lying
object
sheaf
usual
small
´etale
site
u´et
scheme
denoted
moreover
every
morphism
lying
obtain
morphism
sheaves
satisfy
obvious
cocycle
condition
condition
isomorphisms
´etale
example
structure
sheaf
induces
structure
sheaf
u´et
every
x/u
data
small
´etale
sheaves
together
compatibility
morphisms
satisfying
two
parenthetical
conditions
equivalent
data
deﬁning
see
exp
4.10
functor
sheaf
pullback
morphism
morphism
sites
u´et
small
´etale
site
big
particular
exact
u´et
´etale
site
ringed
sites
also
sheaf
modules
pullback
morphism
ringed
sites
u´et
therefore
functor
also
exact
considered
functor
category
big
sheaves
-modules
category
small
sheaves
u´et
-modules
sheaves
-modules
sheaf
-modules
particular
sheaf
-modules
dual
note
general
natural
homomorphism
isomorphism
see
1.6
coherent
sheaves
sheaf
-modules
locally
coherent
every
x/u
sheaf
coherent
sheaf
u´et
-modules
terminology
inspired
tag
06wj
cartesian
compatibility
morphisms
∗fu
isomorphisms
sheaves
v´et
-modules
sheaf
locally
coherent
cartesian
coherent
example
groupoid
presentation
coherent
sheaf
together
isomorphism
s∗f0
t∗f0
satisfying
usual
cocycle
condition
×x0
give
rise
coherent
sheaf
sheaf
sections
vector
bundle
coherent
fact
notion
vector
bundle
locally
free
coherent
sheaf
equivalent
use
interchangeable
even
though
two
categories
anti-equivalent
cokernel
homomorphism
vector
bundles
coherent
fact
every
cokernel
homomorphism
coherent
sheaves
coherent
cokernel
homomorphism
vector
bundles
locally
free
call
homomorphism
strict
homomorphism
vector
bundles
strict
homomorphism
vector
bundles
image
kernel
well
cokernel
locally
free
strict
monomorphism
vector
bundles
strict
homomorphism
whose
kernel
zero
homomorphism
vector
bundles
strict
monomorphism/an
epimorphism
every
geometric
point
induced
linear
map
injective/surjective
homomorphism
vector
bundles
monomorphism
sheaves
strict
monomor-
phism
bundles
let
homomorphism
vector
bundles
alge-
braic
stack
ﬂattening
stratiﬁcation
cok
serves
also
strictening
stratiﬁcation
means
object
lifts
strict
general
kernel
category
big
sheaves
-modules
homomorphism
vector
bundles
locally
coherent
coherent
tag
06wk
sheaf
-modules
coherent
exists
smooth
covering
ﬁnite
type
aﬃne
schemes
every
restriction
big
´etale
site
isomorphic
cokernel
homomorphism
vector
bundles
proposition
1.1.
suppose
coherent
sheaf
algebraic
stack
every
x/u
locally
coherent
iii
represented
algebraic
stack
ﬁnite
type
aﬃne
namely
specx
symo
canonical
homomorphism
isomorphism
sheaves
-modules
locally
free
coherent
vector
bundle
moreover
functor
fully
faithful
functor
category
coherent
sheaves
category
locally
coherent
sheaves
-modules
maps
right
exact
sequences
coherent
sheaves
left
exact
sequences
locally
coherent
sheaves
proof
ﬁrst
claim
follows
directly
deﬁnitions
main
fact
adjunction
homo
f∗o
homo
∗fu
homo
every
morphism
x-schemes
second
claim
follows
ﬁrst
see
also
tag
06wm
third
claim
see
14.2.6
fourth
claim
consider
sheaf
gm-equivariant
x-morphisms
equal
specx
symo
sheaf
homomorphisms
graded
-algebras
hence
equal
sections
give
rise
-linear
symo
homomorphisms
gm-equivariant
ones
hence
denoted
homgm
homgm
omo
ﬁfth
claim
clear
moreover
follows
fact
reconstruct
degree
one
part
graded
sheaf
specx
symo
-modules
projection
morphism
cid:3
representable
sheaves
modules
homomorphism
vector
bundles
ker
constructed
category
big
sheaves
representable
sheaf
-modules
fact
ker
equal
ﬁbered
product
stacks
ker
sheaves
ker
belong
class
-modules
dual
coherent
sheaves
proposition
1.2.
let
sheaf
-modules
following
equivalent
exists
coherent
sheaf
isomorphic
exists
smooth
cover
ﬁnite
type
aﬃne
schemes
every
restriction
big
´etale
site
isomorphic
kernel
homomorphism
vector
bundles
proof
fact
implies
follows
results
proved
let
indicate
prove
implies
let
ﬁrst
assume
isomorphic
kernel
homomor-
phism
vector
bundles
one
checks
represented
specx
symo
cok
thus
isomorphic
dual
coherent
sheaf
cok
suppose
locally
isomorphic
kernel
homomor-
phism
vector
bundles
suﬃces
prove
coherent
isomorphism
claims
checked
locally
true
duals
coherent
sheaves
cid:3
deﬁnition
1.3.
call
sheaf
-modules
locally
coherent
rep-
resentable
two
equivalent
conditions
proposition
1.2
satisﬁed
terminology
justiﬁed
proposition
1.4
words
category
locally
coherent
representable
sheaves
essential
image
fully
faithful
functor
mentioned
proposition
1.1.
therefore
equivalence
categories
coh
sheaves
loc
coh
repr
sheaves
7−→
following
proposition
summarizes
facts
locally
coherent
rep-
resentable
sheaves
follow
easily
facts
mentioned
proposition
1.4.
let
locally
coherent
representable
sheaf
algebraic
stack
sheaf
locally
coherent
sheaf
coherent
iii
canonical
homomorphism
isomorphism
sheaves
-modules
sheaf
representable
algebraic
stack
ﬁnite
type
aﬃne
fact
specx
symo
moreover
functor
essential
inverse
functor
maps
left
exact
sequences
locally
coherent
representable
sheaves
right
exact
sequences
coherent
sheaves
cid:3
proposition
1.5.
let
locally
coherent
representable
sheaf
ﬁnite
type
algebraic
stack
unique
stratiﬁcation
property
x-scheme
factors
vector
bundle
precisely
n≥0
locally
closed
immersion
algebraic
stacks
property
factors
vector
bundle
rank
proof
sought
stratiﬁcation
ﬂattening
stratiﬁcation
coherent
sheaf
cid:3
example
1.6.
consider
coordinate
let
cokernel
homomorphism
vector
bundles
skyscraper
sheaf
origin
considered
coherent
sheaf
extended
big
sheaf
usual
way
sheaf
example
coherent
sheaf
representable
let
kernel
locally
coherent
repre-
sentable
cartesian
hence
coherent
note
shows
may
coherent
even
note
also
shows
may
repre-
sentable
even
finally
note
structure
sheaf
origin
considered
skyscraper
sheaf
x´et
zero
gives
example
remark
1.7.
course
category
coherent
sheaves
algebraic
stack
kernels
internal
homs
agree
category
big
sheaves
considered
therefore
important
specify
context
dealing
kernels
duals
category
coherent
sheaves
unless
speciﬁed
otherwise
always
consider
sheaves
-modules
big
sheaves
1.2
linear
algebraic
stacks
review
deﬁnition
linear
algebraic
stacks
basic
constructions
deﬁnitions
basic
properties
ﬁbered
categories
refer
reader
expos´e
material
presumably
known
could
ﬁnd
suitable
reference
suppose
category
write
ﬁber
object
morphism
x-objects
lying
respectively
write
homf
set
morphisms
lying
ids
write
homs
recall
morphism
lying
cartesian
every
object
x′′
composition
induces
bijection
homs
x′′
≃−→
homf
x′′
recall
ﬁbered
category
every
composition
cartesian
morphisms
cartesian
every
every
exists
cartesian
morphism
target
cartesian
functor
categories
one
preserves
cartesian
morphisms
ﬁbered
category
subcategory
consisting
objects
cartesian
morphisms
category
ﬁbered
groupoids
denote
xcfg
call
underlying
category
ﬁbered
groupoids
deﬁnition
1.8.
category
-linear
category
every
set
homf
endowed
structure
-module
way
every
pair
morphisms
s′′
every
triple
objects
x′′
s′′
composition
homf
homg
x′′
homf
x′′
-bilinear
-linear
functor
-linear
categories
functor
categories
every
map
homf
homf
cid:0
cid:1
-linear
assume
given
-linear
ﬁbered
category
pullback
-linear
i.e.
morphism
objects
pullbacks
pullback
map
homs
homs′
-linear
objects
presheaf
homs
usual
small
´etale
site
deﬁned
homs
homt
x|t
y|t
every
´etale
presheaf
s´et
-modules
moreover
morphism
natural
homomorphism
presheaves
-modules
homs
homs′
put
together
small
presheaves
homt
varies
big
´etale
site
scheme
form
big
presheaf
denote
hom
deﬁnition
1.9.
linear
algebraic
stack
-linear
ﬁbered
cate-
gory
every
object
every
pair
presheaf
hom
big
´etale
site
scheme
locally
coherent
representable
sheaf
s-modules
underlying
category
ﬁbered
groupoids
xcfg
alge-
braic
stack
locally
ﬁnite
type
morphism
linear
algebraic
stacks
-linear
cartesian
functor
remark
1.10.
linear
algebraic
stack
underling
algebraic
stack
xcfg
exists
locally
coherent
representable
sheaf
represents
sheaf
whose
set
sections
pair
-module
homs
sheaf
universal
sheaf
homomorphisms
subsheaf
representing
isomorphisms
naturally
identiﬁed
projection
diagonal
pulling
back
via
diagonal
obtain
universal
sheaf
endomorphisms
represents
sheaf
whose
set
sections
-algebra
ends
let
emphasize
representable
morphism
algebraic
stacks
time
sheaf
algebras
locally
coherent
representable
sheaf
modules
linear
algebraic
stack
reconstructed
underlying
algebraic
stack
representable
sheaf
x×x
-algebras
leave
reader
write
axioms
pair
assure
comes
linear
algebraic
stack
examples
example
1.11.
let
projective
r-scheme
linear
stack
cohx
objects
lying
r-scheme
coherent
sheaves
ﬂat
morphism
r-schemes
cohx
cohx
set
homf
x×s′
morphism
cohx
carte-
homo
sian
induces
isomorphism
linear
stack
cohx
algebraic
see
suppose
coherent
sheaves
ﬂat
fact
hom
locally
coherent
representable
sheaf
-modules
follows
fact
exists
coherent
sheaf
big
´etale
site
hom
see
ega
iii
7.7.8
7.7.9
fact
morphism
schemes
homt
fx×t
x×t
fact
pushforward
commute
arbitrary
pullbacks
means
hom
general
cartesian
hence
general
coherent
hand
ibid
fx×t
x×t
proves
indeed
hom
fact
cohx
cfg
algebraic
locally
ﬁnite
type
proved
4.6.2.1.
example
1.12.
special
case
previous
example
consider
case
spec
linear
algebraic
stack
cohspec
linear
stack
vector
bundles
notation
vect
underlying
algebraic
stack
vectcfg
disjoint
union
n≥0
bgln
sheaf
gln
glm
an≥0
bgln
×an≥0
bgln
m≥0
given
natural
representation
gln
glm
component
gln
glm
example
1.13.
generalization
vect
diﬀerent
direction
given
quiver
representations
let
quiver
stack
representations
notation
repq
repq
set
diagrams
shape
locally
free
ﬁnite
rank
s-modules
morphism
r-schemes
homf
-module
homomorphisms
diagrams
locally
free
-modules
example
1.14.
toy
example
let
smooth
r-algebra
scheme
ﬁnite
type
smooth
group
scheme
units
also
ﬁnite
type
underlying
r-module
locally
free
deﬁne
linear
stack
a×-torsors
objects
r-scheme
right
a×-torsors
a×-torsors
set
homf
homs′
×a×
×a×
example
underlying
algebraic
stack
ba×
a×\a/a×
case
excluded
associated
linear
stack
homf
singletons
endowed
unique
module
structure
stack
represented
spec
also
thought
stack
zero-dimensional
vector
bundles
substacks
let
linear
algebraic
stack
underlying
algebraic
stack
xcfg
locally
closed
algebraic
substack
canonical
linear
algebraic
stack
underlying
algebraic
stack
ycfg
fact
deﬁne
full
subcategory
consisting
objects
situation
call
locally
closed
linear
substack
fibered
products
let
cartesian
morphisms
-linear
ﬁbered
categories
deﬁne
new
-linear
ﬁbered
category
follows
objects
object
triples
object
y-object
isomorphism
morphism
pair
morphisms
words
write
set
morphisms
ﬁbered
product
homϕ
×homϕ
homϕ
sets
ﬁbered
product
-module
maps
linear
ﬁbered
product
also
-module
leave
reader
verify
composition
bilinear
let
verify
ﬁbered
category
suppose
triple
morphism
construct
triple
taking
pullback
via
pullback
via
cartesian
pullback
via
hence
exists
unique
morphism
covering
cartesian
cartesian
morphisms
satisfy
necessary
two
three
property
invertible
cartesian
morphisms
covering
identity
invertible
triple
comes
given
morphism
covers
easily
veriﬁed
morphism
cartesian
therefore
-linear
ﬁbered
category
construction
two
projections
cartesian
call
ﬁbered
product
suppose
algebraic
underlying
algebraic
stacks
respectively
triples
presheaf
hom
cid:0
cid:1
equal
ﬁbered
product
hom
×hom
hom
therefore
locally
coherent
representable
sheaf
s-modules
see
linear
algebraic
stack
moreover
underlying
algebraic
stack
ﬁbered
product
lack
locality
remark
1.15.
suppose
linear
algebraic
stacks
un-
derlying
algebraic
stacks
construct
disjoint
union
linear
algebraic
stack
whose
underlying
algebraic
stack
declaring
homomorphisms
objects
objects
zero
concept
disjoint
union
useful
purposes
linear
algebraic
stacks
interested
underlying
algebraic
stack
often
decomposes
disjoint
union
even
though
linear
al-
gebraic
stack
example
given
linear
stack
vector
bundles
vect
example
1.12.
thus
linear
algebraic
stacks
exhibit
less
local
behaviour
algebraic
stacks
therefore
less
geometrical
one
reasons
prefer
work
algebroids
rather
linear
algebraic
stacks
special
linear
stacks
linear
algebraic
stack
every
ﬁber
category
r-linear
category
putting
special
requirements
linear
categories
get
stronger
notions
linear
algebraic
stack
linear
algebraic
stack
denote
universal
sheaf
endo-
morphisms
deﬁnition
1.16.
linear
algebraic
stack
zero
object
r-linear
category
admits
zero
object
admits
zero
object
every
r-scheme
r-linear
category
admits
zero
object
namely
pullback
zero
object
spec
via
unique
morphism
spec
zero
object
deﬁnes
section
spec
0−→
isomorphism
onto
closed
substack
deﬁned
condition
inside
admits
zero
object
denote
complement
zero
object
linear
open
substack
deﬁnition
1.17.
linear
algebraic
stack
admits
direct
sums
ever
r-scheme
r-linear
category
admits
ﬁnite
direct
sums
pullback
functor
morphism
r-schemes
commutes
direct
sums
hence
admits
direct
sums
canonical
morphism
linear
stacks
7−→
see
also
remark
1.63
1.3
finite
type
algebras
deﬁnition
1.18.
let
algebraic
stack
algebra
mean
sheaf
-algebras
algebra
algebraic
stack
algebraic
stack
i.e.
structure
morphism
representable
morphism
stacks
say
representable
represented
ﬁnite
type
aﬃne
stack
coherent
sheaf
call
ﬁnite
form
specx
symo
type
algebra
automorphism
algebra
denote
subalgebra
ﬁxed
sections
section
denote
subalgebra
sections
commuting
sheaf
-modules
underlying
ﬁnite
type
algebra
locally
coherent
representable
linear
algebraic
stack
underlying
algebraic
stack
universal
sheaf
endomorphisms
ﬁnite
type
algebra
note
ﬁnite
type
algebras
need
coherent
underlying
sheaf
-modules
example
let
coordinate
let
centralizer
m2×2
matrix
cid:0
big
sheaf
underlying
cartesian
cid:1
case
remark
1.19.
dually
ﬁnite
type
algebra
corresponds
coherent
sheaf
endowed
coalgebra
structure
associative
comultiplication
counit
x-scheme
inertia
representation
whenever
algebra
algebraic
stack
tautological
morphism
sheaves
groups
aut
inertia
stack
i.e.
stack
pairs
object
automorphism
aut
sheaf
automorphisms
sheaf
algebras
construct
consider
stack
sheaves
algebras
alg
objects
scheme
sheaves
s-algebras
usual
small
´etale
site
morphism
sheaf
-algebras
covering
morphism
schemes
sheaf
s-algebras
deﬁnition
isomorphism
sheaves
-algebras
sheaf
algebras
gives
rise
morphism
-stacks
alg
get
induced
morphism
inertia
stacks
ialg
notice
a∗ialg
aut
deﬁnition
automorphism
object
stack
mapped
inverse
restriction
morphism
lemma
1.20.
suppose
gerbe
algebraic
space
algebra
exists
sheaf
-algebras
isomorphism
b|x
inertia
representation
autx
trivial
similarly
connected
gerbe
deligne-mumford
stack
algebra
descends
inertia
representation
restricts
trivial
homomorphism
autx
either
case
representable
ﬁnite
type
cid:3
pull
back
sheaf
algebras
via
structure
morphism
obtain
sheaf
algebras
a|ix
sheaf
algebras
endowed
tautological
automorphism
induced
algebra
invariants
automorphism
shall
denote
aﬁx
following
statement
somewhat
tautological
holds
generally
algebras
proposition
1.21.
suppose
representable
algebra
algebraic
stack
inertia
stack
naturally
identiﬁed
aﬁx
particular
representable
algebra
proof
commutative
diagram
algebraic
stacks
identiﬁes
substack
a|ix
algebra
a|ix
stack
triples
object
automorphism
object
lying
triple
aut
subgroup
aut
aut
equivalent
ﬁxing
action
aut
claim
cid:3
fact
ﬁbre
object
equal
aut
ﬁbre
aut
subalgebra
ﬁbre
subgroup
stabaut
aut
algebra
bundles
deﬁnition
1.22.
call
ﬁnite
type
algebra
algebra
bun-
dle
underlying
-module
locally
free
necessarily
ﬁnite
rank
studying
ﬁnite
type
algebras
ﬁnite
type
stacks
may
passing
locally
closed
stratiﬁcation
assume
ﬁnite
type
algebra
algebra
bundle
deﬁnition
1.23.
let
ﬁnite
type
algebra
algebraic
stack
stratiﬁcation
proposition
1.5
characterized
property
x-scheme
factors
a|s
algebra
bundle
pullback
a|x′
algebra
bundle
induced
stratiﬁcation
called
rank
stratiﬁcation
remark
1.24.
considering
representation
left
multiplication
see
every
algebra
bundle
sheaf
subalgebras
algebra
end
endomorphisms
vector
bundle
stack
central
idempotents
lemma
1.25.
centre
algebra
bundle
ﬁnite
type
algebra
proof
centre
kernel
-linear
homomorphism
given
locally
vector
bundles
endo
coherent
representable
sheaf
cid:3
thus
ﬁnite
type
algebra
ﬁnite
type
stack
passing
locally
closed
stratiﬁcation
may
assume
algebra
bundle
whose
centre
algebra
bundle
commutative
algebra
bundle
specx
ﬁnite
ﬂat
representable
morphism
π∗o
fact
cat-
egory
commutative
algebra
bundles
equivalent
category
ﬁnite
ﬂat
representable
stacks
commutative
ﬁnite
type
algebra
denote
stack
idempotents
lemma
1.26.
suppose
commutative
algebra
bundle
al-
gebraic
stack
structure
morphism
aﬃne
ﬁnite
type
´etale
particular
exists
non-empty
open
sub-
stack
a|u
ﬁnite
´etale
proof
reduce
case
scheme
quote
lem
18.5.3
ega
cid:3
lemma
studying
centre
ﬁnite
type
algebras
ﬁnite
type
stack
may
passing
stratiﬁcation
assume
stack
central
idempotents
ﬁnite
´etale
primitive
idempotents
recall
non-zero
idempotent
called
primitive
whenever
orthogonal
idempotents
necessarily
ﬁnite-dimensional
commutative
algebra
ﬁeld
following
true
every
idempotent
unique
way
order
summands
sum
orthogonal
primitive
idempotents
primitive
de-
composition
orthogonal
idempotents
disjoint
primitive
decompositions
iii
distinct
primitive
idempotents
orthogonal
primitive
idempotents
add
thus
idempotents
bijection
subsets
ﬁnite
set
primitive
idempotents
let
ﬁnite
type
algebra
deﬁnition
1.27.
idempotent
local
section
primitive
gives
rise
primitive
idempotent
ﬁber
every
geometric
point
suppose
π∗o
commutative
algebra
bundle
idem-
potent
global
section
let
open
closed
substack
deﬁned
equation
primitive
geometric
ﬁbres
connected
function
counting
number
connected
components
ﬁbres
lower
semi-continuous
sub-
set
primitive
closed
general
subset
open
therefore
studying
primitive
idempotents
assume
ﬁnite
´etale
lemma
1.28.
let
commutative
algebra
bundle
nite
´etale
stack
idempotents
open
closed
substack
idempotent
local
section
factors
primitive
proof
may
assume
constant
multipli-
cation
operation
partially
deﬁned
addition
operation
also
constant
claim
follows
cid:3
deﬁnition
1.29.
let
algebra
bundle
centre
let
stack
idempotents
words
stack
central
idempotents
assume
ﬁnite
´etale
substack
primitive
idempotents
denoted
called
stack
primitive
central
idempotents
ﬁnite
´etale
degree
called
central
rank
connected
number
connected
components
split
central
rank
precisely
partition
central
rank
given
degrees
connected
components
called
central
type
split
central
rank
length
type
remark
1.30.
let
connected
let
commutative
nite
type
algebra
ﬁnite
´etale
stack
idempotents
one-to-one
correspondence
connected
components
primitive
idempotents
algebra
global
sections
degree
stratiﬁcation
let
ﬁeld
ﬁnite-dimensional
k-algebra
rank
dimension
k-vector
space
element
deﬁne
degree
dimension
commutative
subalgebra
equal
degree
minimal
polynomial
i.e.
monic
generator
kernel
algebra
map
deﬁned
let
algebra
bundle
rank
algebraic
stack
local
section
x-scheme
deﬁnition
1.31.
cokernel
homomorphism
s-modules
morphism
s-algebras
deﬁned
ﬂat
say
strict
call
rank
image
degree
characteristic
polynomial
morphism
factors
theorem
caley-hamilton
hence
cokernel
actually
cokernel
homomorphism
vector
bundles
hence
coherent
condition
cokernel
ﬂat
equivalent
locally
free
implies
forming
image
commutes
base
change
image
denoted
also
locally
free
proposition
1.32.
every
exists
locally
closed
substack
property
local
section
factors
strict
degree
pairwise
disjoint
disjoint
union
astrat
ran=1
maps
surjectively
section
factors
astrat
strict
proof
consider
tautological
section
pullback
via
structure
map
gives
rise
morphism
a-algebras
astrat
given
ﬂattening
stratiﬁcation
cokernel
astrat
component
cokernel
rank
cid:3
call
stratiﬁcation
astrat
degree
stratiﬁcation
semi-simple
elements
let
algebraically
closed
ﬁeld
ﬁnite-dimensional
k-algebra
recall
element
semi-simple
following
equivalent
conditions
satisﬁed
map
given
left
multiplication
diagonalizable
minimal
polynomial
separable
i.e.
satisﬁes
iii
commutative
subalgebra
reduced
equivalently
´etale
deﬁnition
1.33.
let
algebra
bundle
local
section
x-scheme
called
semi-simple
strict
every
geometric
point
element
induced
semi-simple
example
idempotent
section
semi-simple
open
subset
neither
commutative
algebra
bundle
subset
also
closed
assuming
strict
semi-simple
geo-
unramiﬁed
unramiﬁed
hence
´etale
metric
ﬁbres
ﬁnite
ﬂat
s-scheme
specs
condition
equivalent
specs
semi-simple
sections
form
subsheaf
ass
proposition
1.34.
let
algebra
bundle
algebraic
stack
ass
algebraic
stack
representable
structure
morphism
ﬁnite
type
ass
proof
fact
ass
astrat
open
substack
deﬁned
con-
dition
ﬁnite
ﬂat
representable
morphism
speca
unramiﬁed
thus
factorization
monomorphism
ass
ass
open
immersion
astrat
stratiﬁcation
thus
ass
constructible
substack
cid:3
semi-simple
centre
commutative
ﬁnite
dimensional
algebra
algebraically
closed
ﬁeld
primitive
idempotents
linearly
independent
element
semi-simple
linear
combination
primitive
idempotents
need
version
statement
algebra
bundles
proposition
1.35.
let
commutative
algebra
bundle
whose
stack
idempotents
ﬁnite
´etale
let
ﬁnite
ﬂat
cover
corresponding
canonical
ﬁnite
ﬂat
morphism
x-stacks
every
geometric
point
morphism
maps
point
ﬁbre
characteristic
function
connected
component
primitive
idempotent
a|x
dually
obtain
strict
monomorphism
algebra
bundles
π∗o
structure
map
induced
morphism
π∗o
strat
astrat
factors
open
substack
ass
astrat
induces
surjective
closed
immersion
algebraic
stacks
π∗o
strat
ass
proof
consider
ﬁnite
´etale
cover
primitive
idempotents
tautological
global
section
a|p
de-
ﬁnes
homomorphism
-modules
a|p
pushing
forward
composing
trace
map
a|p
deﬁnes
morphism
algebra
bundles
π∗o
strict
monomorphism
vector
bundles
injective
every
geometric
point
fact
dually
obtain
morphism
x-stacks
morphism
described
statement
proposition
ﬂat
´etale
ﬂatness
checked
´etale
locally
passing
degree
stratiﬁcation
commutes
strict
monomor-
phisms
algebra
bundles
cartesian
diagram
x-stacks
π∗o
strat
astrat
π∗o
shows
π∗o
strat
astrat
closed
immersion
facts
closed
immersion
factors
ass
astrat
surjective
onto
ass
checked
geometric
points
follows
fact
cid:3
permanence
rank
split
rank
proposition
1.36.
let
monomorphism
commutative
nite
type
algebras
ﬁnite
´etale
stacks
idempotents
connected
stack
denote
ranks
split
ranks
respectively
moreover
admits
semi-simple
global
section
factor
ﬁber
a|x
points
admits
idempotent
global
section
proof
monomorphism
induces
open
closed
embed-
ding
ﬁnite
´etale
x-stacks
every
idempotent
decomposed
uniquely
sum
orthogonal
primitive
idempotents
let
call
primitive
decomposition
consider
correspondence
deﬁned
partakes
primitive
decomposition
ee′
one
shows
ﬁnite
´etale
cover
locally
´etale
topology
reducing
case
trivial
covers
properties
primitive
decomposition
projection
surjective
projection
injective
thus
deg
deg
deg
isomorphisms
showing
proposition
1.35
implies
morphism
ass
surjective
proves
repeat
argument
algebras
global
sections
deduce
every
primitive
idempo-
tent
remains
primitive
every
primitive
idem-
potent
deduce
idempotents
proves
cid:3
families
idempotents
deﬁnition
1.37.
ﬁnite
type
algebra
denote
stack
n-tuples
non-zero
idempotents
pairwise
orthogonal
add
unity
call
sections
also
complete
sets
orthogonal
idempotents
note
family
members
sections
need
central
stack
algebraic
ﬁnite
type
stack
empty
unless
case
identiﬁed
stack
contains
exactly
unit
identiﬁed
unless
case
empty
group
units
let
ﬁnite
type
algebra
algebraic
stack
subsheaf
units
deﬁned
every
object
see
relative
aﬃne
group
scheme
writing
ﬁbered
product
u7→
u−1
1,1
algebra
bundle
subsheaf
represented
open
substack
case
local
section
invertible
determinants
left
right
multiplication
vanish
conclude
algebra
bundle
smooth
geometrically
connected
ﬁbers
general
case
implies
aﬃne
group
scheme
smooth
geometrically
connected
ﬁbers
similar
argument
using
determinant
proves
strict
monomorphism
algebra
bundles
also
algebra
bundle
morphism
another
algebra
bundle
determined
restriction
1.4
algebroids
deﬁnition
1.38.
algebroid
triple
al-
gebraic
stack
ﬁnite
type
algebra
homomorphism
sheaves
groups
identiﬁes
open
substack
moreover
require
diagram
groups
aut
commutes
map
autx
associates
unit
inner
automorphism
uxu−1
vertical
map
autx
inertia
representation
isomorphism
call
strict
algebroid
usually
abbreviate
triple
write
need
specify
algebra
call
commutativity
algebroid
property
explanation
terminology
see
remark
1.44.
condition
open
immersion
implies
represents
subsheaf
connected
components
identity
ﬁeld
connected
open
immersion
im-
plies
ix/a×
´etale
conditions
characterize
connected
component
ﬁeld
particular
connected
gerbe
deligne-mumford
stack
relative
inertia
ix/s
necessarily
equal
hence
identiﬁed
ix/s
algebra
bundle
therefore
also
aﬃne
smooth
relative
group
scheme
hence
admits
coarse
deligne-
mumford
stack
uniquely
determined
deligne-
mumford
stack
connected
gerbe
moreover
identiﬁed
relative
inertia
group
ix/x
short
exact
sequence
relative
group
schemes
case
strict
algebroid
space
fact
coarse
moduli
space
algebraic
many
cases
algebroid
property
automatic
proposition
1.39.
consider
triple
algebraic
stack
algebra
bundle
homomorphism
sheaves
groups
identiﬁes
open
substack
commutes
algebroid
proof
deﬁned
homomorphism
equivariant
respect
inertia
action
proof
combines
facts
monomorphism
inertia
action
inner
action
fact
morphism
algebra
bundles
determined
restriction
units
fact
let
show
automorphism
suﬃces
show
check
applying
suﬃces
true
cid:3
example
1.40
algebroid
underlying
linear
stack
let
linear
algebraic
stack
underlying
algebraic
stack
let
universal
sheaf
endomorphisms
remark
1.10.
auto-
morphisms
invertible
endomorphisms
use
tautological
identiﬁcation
inertia
representation
inverse
pullback
action
indeed
given
left
inner
automorphisms
call
algebroid
underlying
linear
algebraic
stack
strict
algebroid
example
1.41.
consider
linear
stack
vector
bundles
vect
ex-
ample
1.12.
underlying
algebroid
consists
disjoint
union
quotient
stacks
gln
\mn×n
given
adjoint
representations
thus
passing
linear
stack
underlying
algebroid
discard
mm×n
restrict
left-right
bi-
action
gln
mn×n
left
adjoint
action
thus
remove
exactly
information
consider
non-local
see
remark
1.15.
example
1.42
classifying
algebroid
let
algebra
bun-
dle
deligne-mumford
stack
let
act
left
inner
automorphisms
a×\a
algebra
bundle
rela-
tive
classifying
stack
exact
sequence
group
schemes
a×\a×
unramiﬁed
open
embedding
a×\a
algebroid
space
a×\a
strict
algebroid
remark
1.43
algebroids
trivial
gerbes
classifying
algebroids
let
algebroid
algebra
bundle
therefore
connected
gerbe
deligne-mumford
stack
ix/s
suppose
gerbe
admits
section
via
pull
back
bundle
algebras
claim
canonically
isomorphic
×\c
fact
gerbe
section
universal
principal
x∗ix/s-bundle
pullback
diagram
shows
x∗ix/s-bundle
hence
c/x∗ix/s
via
isomorphism
x∗ix/s
action
x∗ix/s
identiﬁed
action
left
inner
automorphisms
follows
algebroid
property
proves
claim
remark
1.44.
spec
gerbe
strict
algebroid
promoted
linear
algebraic
stack
whose
underlying
algebraic
stack
generally
exists
notion
relative
linear
algebraic
stack
base
replaced
arbitrary
scheme
algebraic
space
every
strict
algebroid
gerbe
space
becomes
naturally
linear
algebraic
stack
types
linear
algebraic
stacks
occur
naturally
theory
deformation
quantization
introduced
kontsevich
name
stack
algebroids
see
loc
cit
one
also
ﬁnd
description
stacks
algebroids
terms
cocycles
compare
also
thus
notion
algebroid
natural
generalization
kontsevich
notion
stack
algebroids
justiﬁes
terminology
loosely
speaking
algebroids
stacks
linear
coarse
deligne-mumford
stack
example
1.45
schemes
algebroids
every
deligne-mumford
stack
algebroid
via
deﬁnition
natural
way
enhance
algebroid
linear
algebraic
stack
unless
spec
ﬁnal
scheme
exhibits
one
way
algebroids
ﬂexible
linear
algebraic
stacks
example
1.46
algebroids
quotient
stacks
let
g\y
quotient
stack
ﬁnite
type
algebra
given
ﬁnite
type
algebra
together
lift
g-action
action
algebra
automorphisms
inertia
stack
naturally
identiﬁed
stabg
thus
becomes
algebroid
specify
equivariant
open
embedding
-group
schemes
stabg
algebra
bundle
also
need
require
morphisms
algebroids
deﬁnition
1.47.
call
morphism
algebraic
stacks
inert
diagram
stacks
cartesian
isomorphism
call
strictly
inert
connected
component
algebroid
necessarily
algebraic
stack
inert
apply
concept
representable
basic
facts
inert
morphisms
every
inert
morphism
algebraic
stacks
deligne-mumford
repre-
sentable
relative
inertia
group
scheme
unramiﬁed
every
base
change
inert
morphism
algebraic
stacks
inert
iii
every
monomorphism
algebraic
stacks
particular
every
locally
closed
immersion
every
stratiﬁcation
strictly
inert
inert
local
´etale
topology
target
every
morphism
deligne-mumford
stacks
inert
base
changes
morphisms
deligne-mumford
stacks
fact
inert
morphisms
least
stratiﬁcations
proposition
1.48.
suppose
inert
morphism
algebraic
stacks
suppose
smooth
representable
coarse
deligne-mumford
stacks
induced
morphism
diagram
hence
also
cartesian
proof
prove
morphism
gerbes
isomorphism
may
pass
´etale
cover
assume
gerbe
trivial
pullback
via
trivializing
section
moreover
pullback
isomorphism
hence
cid:3
via
trivializing
section
since
deﬁnition
1.49.
morphism
algebroids
pair
morphism
algebraic
stacks
morphism
algebras
diagram
commutes
morphism
representable
morphism
algebroids
monomorphism
sheaves
algebras
implies
deligne-mumford
representable
morphism
inert
isomorphism
ﬁnite
type
algebras
implies
inert
natural
notion
2-morphism
algebroid
makes
algebroids
2-category
remark
1.50
inert
morphisms
case
algebra
bundles
suppose
morphism
algebroids
inert
morphism
algebraic
algebra
bundles
stacks
automatically
hence
inert
morphism
algebroids
remark
1.51
strict
algebroids
representable
morphisms
suppose
strict
algebroid
representable
morphism
algebraic
stacks
a|y
ﬁnite
type
subalgebra
a×|y
inside
strict
algebroid
representable
morphism
algebroid
condition
automatic
every
strict
algebroid
comes
way
remark
1.52
pullbacks
suppose
algebroid
inert
morphism
algebraic
stacks
case
admits
unique
algebroid
endowed
inert
morphism
algebroids
fact
strict
algebroid
morphism
neces-
sarily
strictly
inert
necessarily
strict
algebroid
call
strictly
inert
morphism
strict
algebroids
deﬁnition
1.53.
call
morphism
algebroids
vector
bundle
principal
homogeneous
g-bundle
algebraic
group
iii
ﬁbre
bundle
group
ﬁbre
locally
closed
immersion
stratiﬁcation
inert
underlying
morphism
algebraic
stacks
indicated
property
remark
1.54
ﬁbered
products
fibered
products
algebroids
ex-
ist
commute
ﬁbered
products
underlying
stacks
under-
lying
algebras
fibered
products
strict
algebroids
strict
algebroids
algebroid
underlying
ﬁbered
product
linear
algebraic
stacks
equal
ﬁbered
product
underlying
algebroids
proposition
1.55.
suppose
morphism
algebroids
stratiﬁcation
algebraic
stacks
exists
stratiﬁcation
algebroids
composition
also
stratiﬁcation
algebroids
strict
stratiﬁcations
strict
algebroids
proof
passing
rank
stratiﬁcations
obtain
com-
mutative
diagram
algebroids
upper
horizontal
morphism
inert
morphism
algebroids
be-
cause
algebra
bundles
remark
1.50.
claim
fol-
lows
cid:3
algebroid
inertia
remark
1.56
inertia
let
algebroid
another
algebroid
call
algebroid
inertia
fact
a|ix
subalgebra
a|ix
elements
invariant
tautological
automorphism
induced
inertia
action
subgroup
units
a×|ix
cartesian
diagram
a×|ix
iix
strict
algebroid
remark
1.57
induced
algebroid
structure
algebra
let
algebroid
let
a|a
subalgebra
pullback
a|a
el-
ements
commuting
tautological
section
a|a
equal
space
commuting
pairs
subgroup
units
a×|a
cartesian
diagram
a×|a
proves
cid:0
a|a
cid:1
algebroid
fact
commutative
diagram
algebroids
a|a×
a|a
strict
algebroid
diagram
strict
algebroids
remark
1.58
semi-simple
algebroid
inertia
also
semi-
simple
version
algebroid
inertia
deﬁne
let
algebroid
consider
diagram
algebroids
ass
square
right
constructed
remark
1.57.
morphism
ass
composition
stratiﬁcation
open
immersion
see
proposition
1.34
particular
inert
hence
get
induced
algebroid
structure
ass
requiring
square
left
cartesian
diagram
algebroids
deﬁnes
algebraic
stack
algebroid
structure
strict
algebroid
objects
diagram
strict
isomorphism
justiﬁed
deﬁning
calling
semi-simple
algebroid
inertia
general
case
deﬁne
also
call
semi-simple
algebroid
inertia
slight
abuse
language
idempotents
algebroids
lemma
1.59.
let
semi-simple
invertible
global
section
algebra
bundle
let
ea×
ss/gm
quotient
subgroup
scalars
consider
action
group
staba×
staba×
ea×
conjugation
induced
group
homomorphism
class
ea×
open
immersion
proof
let
relative
spectrum
epimor-
phism
commutative
algebras
gives
rise
closed
im-
mersion
invertible
get
induced
proper
morphism
7−→
unramiﬁed
diagonal
open
im-
mersion
complement
denoted
closed
hence
proper
hence
image
de-
noted
closed
complement
hence
open
neighborhood
identity
section
cartesian
diagram
staba×
staba×
b7→bab−1a−1
lower
square
cartesian
deﬁnition
staba×
fact
upper
square
cartesian
follows
fact
image
staba×
contained
image
latter
claim
follows
fact
scalar
necessarily
quotient
eigenvalues
cid:3
remark
1.60.
let
algebroid
let
stack
complete
labelled
sets
orthogonal
idempotents
let
write
a|y
...
subalgebra
a|y
consisting
elements
commuting
tautological
idempotents
a|y
homomorphism
restricts
homomorphism
deﬁnes
algebroid
structure
algebra
endowed
canonical
complete
set
orthogonal
central
idempotents
hence
decomposes
product
let
algebroid
algebra
bundle
let
complete
set
orthogonal
central
idempotents
de-
composing
product
algebra
bundles
get
induced
decomposition
algebroid
structure
ﬁbered
product
algebroid
structures
obtain
embedding
algebras
acts
left
multiplication
action
semi-simple
units
restricted
action
free
quotient
via
torus
preserves
ﬁberwise
representable
ea×
ss/gk
/gm
/gm
proposition
1.61.
claim
ea×
canonical
algebroid
struc-
ture
get
induced
commutative
diagram
ea×
algebroids
horizontal
map
inert
hence
principal
bundle
algebroids
proof
inert
morphisms
algebroids
stable
composi-
tion
pullback
claim
reduces
case
consider
let
denote
tautological
section
algebra
given
centralizer
algebra
a|a×
algebra
descends
quotient
ea×
centralizer
alge-
bra
element
depend
equivalence
class
let
denote
descended
algebra
ea×
units
algebra
identiﬁed
open
subgroup
a×|
ea×
stab
a×|
ea×
lemma
1.59.
also
cartesian
diagram
stab
a×|
ea×
stab
a×|
ea×
ea×
a×|
ea×
ea×
inertia
stack
ea×
identiﬁed
ea×
ea×
proves
stab
a×|
ea×
open
subgroup
ea×
com-
posing
two
open
immersions
obtain
open
immersion
groups
algebroid
required
ea×
a×|
ea×
ea×
endowing
ea×
structure
get
induced
morphism
algebroids
ea×
inert
construction
cid:3
remark
1.62.
even
strict
ea×
necessarily
strict
construction
fact
makes
impossible
restrict
attention
strict
algebroids
remark
1.63.
let
algebroid
underlying
linear
algebraic
stack
suppose
admits
direct
sums
let
complement
zero
object
obtain
canonical
morphism
algebroids
times
7−→
projectors
corresponding
factors
every
r-scheme
morphism
fully
faithful
underlying
morphism
algebraic
stacks
monomorphism
require
ﬁbers
karoubian
i.e.
require
idempotents
admit
corresponding
direct
summands
iso-
morphism
algebroids
call
linear
algebraic
stack
karoubian
admits
direct
sums
ﬁbers
karoubian
algebroid
representations
deﬁnition
1.64.
let
algebroid
representation
morphism
algebroids
vect
algebroid
underlying
linear
stack
vect
vector
bundles
factors
vector
bundles
rank
i.e.
deﬁnes
morphism
gln
natural
algebroid
structure
see
example
1.41
say
rank
algebroid
morphism
gln
representable
call
representation
faithful
give
representation
algebroid
equivalent
spec-
ifying
vector
bundle
together
morphism
alge-
bras
end
induced
morphism
unit
groups
makes
diagram
commute
inertia
representation
given
vector
bundle
representation
rank
faithful
end
monomorphism
algebras
case
underlying
morphism
stacks
gln
deligne-mumford
representable
gln-bundle
frames
isom
represented
deligne-
mumford
stack
faithful
representation
identiﬁes
quotient
stack
gln
deligne-mumford
stack
algebroid
structure
given
gln-invariant
subalgebra
mn×n
subgroup
gln
equal
subgroup
stabgln
gln
remark
1.65.
every
algebroid
algebra
bundle
admits
tautological
adjoint
representation
given
adjoint
representation
algebra
contrast
representation
left
multiplication
algebroid
representation
unless
proposition
1.66.
every
algebroid
admits
stratiﬁcation
restricted
algebroid
a|x′
admits
faithful
represen-
tation
proof
without
loss
generality
assume
algebra
bundle
smooth
unit
group
connected
isotrivial
gerbe
deligne-mumford
stack
thus
admits
section
ﬁnite
´etale
cover
begin
consider
case
i.e.
case
trivial
gerbe
remark
1.43
assume
de-
scends
dealing
algebroid
ba×
a×\a
consider
representation
left
multi-
plication
end
restricts
representation
s-group
schemes
get
induced
morphism
algebraic
stacks
ba×
bgl
covered
morphism
algebras
a×\a
bgl
end
since
end
injective
gives
required
faithful
representation
ba×
a×\a
note
construction
contradict
remark
1.65.
vector
bundle
deﬁned
left
representation
diﬀerent
vector
bundle
underlying
algebroid
given
adjoint
representation
consider
general
case
pullback
algebroid
inert
since
trivial
gerbe
admits
faithful
representation
end
vector
bundle
let
projection
π∗v
faithful
representation
fact
adjunction
embedding
π∗a
end
gives
rise
embedding
end
end
π∗v
cid:3
clear
algebroids
suppose
algebroid
connected
gerbe
deligne-mumford
stack
centre
descends
commutative
ﬁnite
type
algebra
lemma
1.20.
deﬁnition
1.67.
call
algebroid
clear
algebra
bundles
connected
isotrivial
gerbe
iii
deligne-mumford
stack
connected
ﬁnite
´etale
clear
algebroid
descend
ﬁnite
´etale
schemes
deﬁnitions
central
rank
split
central
rank
central
type
apply
clear
algebroids
every
algebroid
ﬁnite
type
algebraic
stack
exists
stratiﬁcation
restricted
algebroids
pieces
stratiﬁcation
clear
follows
proposition
1.5
lemma
1.26
spectrum
semi-simple
inertia
let
q-vector
space
isomorphism
classes
ﬁnite
type
deligne-mumford
stacks
modulo
scissor
relations
bundle
relations
i.e.
equations
form
whenever
ﬁbre
bundle
special
structure
group
ﬁbre
product
spec
makes
q-algebra
write
class
aﬃne
line
let
linear
algebraic
stack
universal
endomor-
phism
algebra
recall
algebroid
c.f
example
1.40
stack
functions
deﬁnition
2.1.
stack
function
representable
morphism
alge-
broids
ﬁnite
type
k-module
notation
free
q-vector
space
isomorphism
classes
stack
functions
modulo
scissor
bundle
relations
relative
class
deﬁned
stack
function
denoted
scissor
relation
relative
closed
immersion
algebroids
stack
function
substacks
endowed
respective
pullback
algebroids
bundle
relation
relative
ﬁbre
bundle
algebroids
special
structure
group
ﬁbre
see
deﬁnition
1.53.
action
given
action
makes
-module
additive
zero
given
empty
algebroid
admits
zero
object
deﬁnition
1.16
denote
correspond-
ing
stack
function
spec
0−→
use
embed
via
spec
0−→
always
assume
admits
zero
object
ﬁltration
split
central
rank
call
stack
function
clear
clear
algebroid
deﬁni-
tion
1.67
deﬁnition
2.2.
introduce
ﬁltration
split
central
rank
declaring
generated
q-vector
space
clear
stack
functions
admits
orthogonal
central
non-zero
idempotents
globally
alternatively
generated
clear
algebroid
least
components
ﬁltered
piece
stable
scalar
multiplication
let
introduce
abbreviation
≥k/k
remark
2.3.
trying
deﬁne
direct
sum
decomposition
split
central
rank
would
work
clear
algebroid
split
central
rank
may
well
admit
closed
substack
whose
restricted
algebroid
clear
split
central
rank
larger
similarly
bundle
relations
respect
split
central
rank
zero
ring
non-zero
central
idempotents
non-zero
ring
least
one
therefore
complement
i.e.
particular
2.1
idempotent
operators
let
denote
operator
maps
stack
function
stack
tuples
non-zero
orthogonal
idempotents
adding
unity
see
deﬁnition
1.37.
algebroid
structure
described
re-
mark
1.60.
operators
well-deﬁned
applying
stratiﬁ-
cation
ﬁber
bundle
algebroids
gives
rise
another
inert
morphism
algebroids
type
operators
-linear
deﬁnition
applies
also
stack
empty
deligne-mumford
stack
hence
diagonalizable
eigenvalues
kernel
0-eigenspaces
image
1-eigenspaces
denoted
generated
stack
functions
deligne-mumford
stack
fact
operator
vanishes
stack
functions
deligne-mumford
stack
acts
identity
stack
functions
hence
also
diagonalizable
eigenvalues
kernel
image
hence
complementary
idempotent
operators
i.e.
orthogonal
add
identity
recall
stirling
number
second
kind
deﬁned
way
number
surjections
elsewhere
write
theorem
2.4.
operators
preserve
ﬁltration
split
central
rank
subquotient
≥k/k
operator
acts
multiplication
proof
consider
clear
algebroid
morphism
deﬁning
stack
function
let
central
rank
split
central
rank
ﬁltered
piece
generated
denote
coarse
deligne-mumford
stack
as-
style
galois
theories
see
section
trivializes
descends
galois
cover
sumption
connected
hence
admit
grothendieck
let
connected
galois
cover
galois
group
constructed
pullback
therefore
morphism
inert
hence
inherits
via
pullback
structure
algebroid
hence
stack
function
labelling
components
pullback
obtain
action
set
isomorphism
ﬁnite
´etale
covers
recall
degree
cover
number
components
≃−→
7−→
source
target
isomorphism
support
natural
algebroids
isomorphism
preserves
number
orbits
also
isomorphism
epi
≃−→
zer
7−→
cid:16
cid:17
ρ=1
...
zer
denotes
stack
labelled
complete
sets
orthogonal
central
idempotents
stacks
involved
fact
algebroids
isomorphism
isomorphism
algebroids
hence
may
calculate
follows
stacks
involved
endowed
natural
algebroid
structures
stabγ
zer
epi
aϕ∈epi
xϕ∈epi
xϕ∈epi
ex/
stabγ
xϕ∈epi
stabγ
ϕ6=γ
ex/
stabγ
epi
epi
n/γ
hence
epi
thus
conclude
zer
xϕ∈epi
ex/
stabγ
proper
subgroup
quotient
ex/γ′
interme-
diate
cover
pullback
components
number
orbits
larger
thus
proved
theorem
zer
instead
stabγ
ϕ6=γ
observe
zer
closed
substack
zer
proper
separated
write
zer
zer
zer
complement
zer
prove
zer
let
zer
locally
closed
embedding
algebroid
cid:0
aﬁx
cid:1
clear
consider
embedding
algebras
aﬁx|y
a|y
induces
em-
bedding
commutative
algebras
a|y
aﬁx|y
a|y
aﬁx|y
algebra
a|y
comes
tautological
idempotent
sections
contained
aﬁx|y
least
one
contained
a|y
proposition
1.36
split
central
rank
aﬁx|y
strictly
larger
split
central
rank
a|y
latter
least
big
split
central
rank
split
central
rank
decrease
base
extension
shows
ﬁnishes
proof
cid:3
corollary
2.5.
operators
simultaneously
diago-
nalizable
common
eigenspaces
form
family
subspaces
indexed
non-negative
integers
=mk≥0
moreover
every
=mk≥r
let
denote
projection
onto
erπk
proof
first
remark
given
numbers
form
mono-
tone
increasing
sequence
integers
note
operators
pairwise
commute
composition
er′
associates
algebroid
stack
pairs
complete
families
non-zero
orthogonal
idempotents
length
length
members
commuting
members
finally
let
prove
every
every
q-vector
space
union
ﬁnite-dimensional
subspaces
invariant
deﬁne
generated
q-vector
space
stack
functions
clear
algebroid
rank
vector
bundle
underlying
algebra
bounded
ascending
ﬁltration
preserved
set
suppose
stack
function
clear
algebroid
split
central
rank
let
rank
vector
bundle
underlying
note
commutative
algebra
number
primitive
idempotents
bounded
rank
underlying
vector
bundle
deduce
hand
theorem
2.4
implies
induction
ei−1
≥k+i
applying
see
cid:0
en−k
cid:1
en−k
hence
en−k
invariant
proves
contained
ﬁnite-dimensional
subspace
invariant
standard
techniques
ﬁnite-dimensional
linear
algebra
imply
result
cid:3
remark
2.6.
proof
theorem
2.4
corollary
show
central
versions
zer
also
diagonalizable
hand
zer
commute
less
useful
corollary
2.7.
ker
=mk
particular
erx
corollary
2.8.
every
∞xr=k
stirling
numbers
ﬁrst
kind
particular
proof
hence
therefore
xr≥0
=xr≥0
r+1
=xℓ≥0
∞xr=1
=xℓ≥0
erπℓ
=xℓ≥0
xℓ≥0
=xℓ≥0
cid:16
xr≥0
cid:17
=xℓ≥0
inverse
relationship
stirling
numbers
ﬁrst
second
kind
cid:3
remark
2.9.
stirling
numbers
ﬁrst
kind
appear
taylor
expansions
powers
logarithm
log
∞xr=k
deﬁnition
2.10.
let
formal
variable
deﬁne
operator
formula
extending
var
-linearly
write
formally
=xk
=xk
remark
2.11.
following
convenient
formula
follows
corollary
2.8
using
identity
=xn
example
2.12.
universal
rank
vector
bundle
gl2\a2
bgl2
classifying
morphism
vect
deﬁne
hall
algebra
element
bgl2
vect
vect
abbreviate
bgl2
decompose
bgl2
pieces
according
consider
action
bgl2
fact
bgl2
maximal
torus
gl2
thus
bgl2
sub-
space
vect
invariant
matrix
acting
subspace
cid:18
cid:19
matrix
lower
triangular
diﬀerent
numbers
diagonal
hence
diagonalizable
fact
diagonal
entries
diagonalizing
gives
eigenvectors
eigenvalue
bgl2
therefore
vect
vect
since
bgl2
found
required
decomposition
bgl2
eigenvalue
2.2
spectrum
semisimple
inertia
connected
semi-simple
inertia
operator
q-linear
en-
domorphism
7−→
denotes
semisimple
algebroid
inertia
alge-
broid
see
remark
1.58.
note
respects
scissor
bundle
connected
inertia
commutes
inert
pullbacks
relations
deﬁning
linear
passing
note
commutes
every
compositions
associate
algebroid
stack
pairs
semi-simple
unit
labelled
complete
set
orthogonal
idempotents
commuting
particular
preserves
ﬁltration
split
central
rank
composition
divisible
proposition
2.13.
every
exists
-linear
opera-
tor
proof
let
algebroid
algebra
aekx
endowed
tautological
complete
set
orthogonal
central
idempotents
apply
construction
proposition
1.61
obtain
principal
bundle
algebroids
assignment
kei
ekx
ekx
ea×
7−→
ea×
ekx
extends
well-deﬁned
-linear
operator
shall
denote
record
algebroid
stackei
stack
k+2
tuples
object
form
complete
set
orthogonal
idempotents
equivalence
class
semi-simple
units
ae1
...
i=1
λiei
equation
follows
fact
kei
ekx
ea×
ekx
holds
bundle
relations
cid:3
corollary
2.14.
map
induces
subquotient
≥k/k
divisible
ss|k≥k
|k≥k
kei
proof
≥k/k
operator
acts
mul-
tiplication
cid:3
use
scalars
localization
maximal
ideal
denoted
q−1
thus
inverting
rational
polynomials
vanish
extend
scalars
well
consider
q−1
q−1
note
deﬁnition
ensures
q−1
-torsion
free
direct
sum
decomposition
extends
q−1
oper-
ator
extends
q−1
-linear
operator
q−1
q−1
partition
deﬁne
=yi∈λ
polynomial
degree
vanishes
order
|λ|
also
deﬁne
polynomial
invertible
q−1
yi∈λ
theorem
2.15.
operator
≥k/k
q−1
≥k/k
q−1
diagonalizable
eigenvalue
spectrum
consists
partitions
length
|λ|
proof
work
throughout
subquotient
≥k/k
q−1
restricting
operators
tacitly
subquotient
note
q−1
-module
≥k/k
q−1
isomorphic
q−1
hence
-torsion
free
order
partitions
length
divisibility
partitions
|λ|
|µ|
write
exists
permutation
partial
ordering
partitions
length
write
q−1
q−1
-subspace
generated
clear
stack
functions
central
type
divisible
prove
titions
locally
ﬁnite
preserves
ﬁltration
divisibility
par-
operator
quotient
q−1
/ek
q−1
operator
multiplication
iii
operator
facts
imply
claims
concerning
diagonalizability
ofei
satisﬁed
eqµ
eqλ
vanish
lower
triangular
matrix
distinct
diagonal
entries
discrete
valuation
ring
diagonalizable
suﬃces
diﬀerences
diagonal
entries
units
latter
condition
argument
apply
directly
eigenvalues
linearly
ordered
partially
nevertheless
conclusion
remains
true
larger
generality
acts
let
partition
length
consider
clear
stack
function
central
type
algebra
abbreviate
induced
element
≥k/k
denote
central
rank
central
idempotents
ekx
canonical
sections
given
labelling
idempotents
denote
images
sections
proof
theorem
2.4
algebroid
ekx
stratiﬁed
ekx
=gσ
⊔gτ
clear
algebroids
split
central
rank
larger
lying
also
split
central
rank
larger
discard
every
isomorphic
labelling
replace
following
arguments
remembering
multiply
ﬁnal
result
part
hence
calculating
need
consider
quotient
ea×
write
center
strict
subbundle
hence
closed
substack
complement
start
examining
pullbacks
coarse
deligne-mumford
stack
hence
inert
algebroid
structures
hence
canonical
algebroid
structures
inert
x-stacks
quotient
ez×
ss/gk
note
ez×
proof
theorem
2.4
let
connected
galois
cover
galois
group
acting
set
get
induced
isomorphisms
≃−→
≃−→
π∗o
≃−→
π∗o
proposition
1.35
surjective
closed
immersion
π∗o
strat
follows
surjective
closed
immersion
strat
passing
quotient
another
surjective
closed
immersion
m/gk
strat
ez×
≥k/k
replace
ez×
labelling
central
idempotents
corresponds
labelling
orbits
labelling
parts
let
denote
orbits
|ii|
write
product
projective
spaces
aλ1
aλk
moreover
sequence
subsets
write
locally
closed
subspace
deﬁned
m/gk
entries
non-zero
others
zero
...
...
disjoint
union
sequences
subsets
group
acts
linearly
respecting
stratiﬁcation
al-
though
individual
strata
moreover
m/gk
...
stab
...
×stab
...
...
×stab
...
...
every
subgroup
stabilizer
sequence
orbits
proof
theorem
2.4
implies
m/gk
corresponding
morphism
course
deligne-mumford
stacks
deduce
≥k/k
ex/γ′
true
×γ′
projection
×γ′
ex/γ′
inert
pullback
ez×
last
step
used
bundle
relations
bundle
×γp
product
projective
bundles
associated
vector
bundles
clear
algebroid
consider
inclusion
com-
mutative
algebra
bundles
zax
zay
proposition
1.36
split
rank
zay
split
central
rank
least
large
split
rank
zax
turn
least
large
split
rank
zax
since
working
modulo
may
assume
split
central
rank
hence
split
rank
zay
zax
equal
consider
correspondence
used
proof
proposition
1.36
whose
structure
groups
special
general
linear
groups
consider
locally
closed
embedding
ss/gk
ax|y
three
stacks
diagram
representable
ﬁnite
´etale
covers
assumption
ax|y
connected
components
implies
horizontal
inclusion
diagram
isomorphism
surjective
representable
ﬁnite
´etale
cover
ax|y
since
ax|y
number
components
degrees
components
equal
well
means
central
type
ax|y
equal
central
type
existence
implies
divides
central
type
surjection
isomorphism
otherwise
given
central
least
pointwise
proposition
1.36
would
surjection
za×
would
force
tautological
section
class
za×
structure
map
za×
/gk
shows
central
type
strictly
divides
thus
completed
proof
local
proceed
proof
corollary
2.5.
every
time
produce
clear
algebroids
whose
central
type
multiple
bound
central
rank
rank
ﬁnitely
many
steps
process
ﬁniteness
apply
increase
applying
stops
cid:3
corollary
2.16.
operator
q−1
q−1
di-
agonalizable
eigenvalue
spectrum
consists
partitions
denote
eigenspace
corresponding
eigenvalue
q−1
q−1
m|λ|=k
q−1
example
2.17.
consider
example
2.12
stack
function
rank
vector
bundles
deﬁnes
element
bgl2
≥1/k
vect
going
decompose
eigencomponents
respect
operator
position
given
case
stack
function
bgl2
clear
central
rank
decom-
bgl2
∆/gl2
∗/n
central
torus
gl2
also
normalizer
gl2
get
corresponding
decomposition
bgl2
∆/gm
/gl2
∗/gm
∗/gm
bgl2
∗/n
bgl2
bgl2
∗/n
split
central
rank
connected
inertia
stack
fact
let
closed
subscheme
consisting
elements
trace
zero
write
least
′/gm
spec
note
∗/n
strict
algebroid
∗/n
∗∗/n
strict
algebroid
connected
∗/n
clear
algebroid
associated
coarse
deligne-mumford
stack
∗/z2
generically
scheme
central
rank
∗/n
consider
∗/n
start
noting
connected
inertia
∗/n
central
hence
modulo
vect
∗/n
∗/n
see
q−1
bgl2
q−1
∗/n
invariant
underei
matrix
subspace
cid:18
cid:19
matrix
lower
triangular
diﬀerences
scalars
diagonal
invertible
q−1
therefore
diagonalizable
q−1
diagonalizing
get
following
eigenvectors
modulo
vect
q−1
bgl2
∗/n
get
actual
eigenvectors
project
vect
q−1
∗/n
bgl2
bgl2
hence
bgl2
∗/n
∗/n
∗/n
q−2
∗/n
add
iii
1,1
get
spectral
decomposition
bgl2
1,1
bgl2
respect
operator
course
spectral
decomposition
respect
computed
introduction
applying
bundle
relations
bgl2
remark
2.18.
willing
invert
prove
diag-
onalizability
entirely
within
context
strict
algebroids
fact
generalize
calculation
introduction
accomplish
2.3
graded
structure
multiplication
assume
admits
direct
sums
deﬁne
commutative
product
⊕−→
product
becomes
commutative
-algebra
unit
spec
0−→
proposition
2.19.
proof
follows
immediately
fact
two
alge-
broids
algebroids
cid:3
x×y
denote
disjoint
union
two
partitions
corollary
2.20.
q−1
q−1
λ+µ
q−1
hence
also
q−1
q−1
k+ℓ
q−1
q−1
-module
q−1
=mk≥0
q−1
graded
q−1
-algebra
respect
commutative
product
q−1
prove
next
fact
true
proposition
2.21.
=xn
cid:3
number
ways
set
written
union
subset
order
subset
order
cid:2
proof
consider
stack
functions
stack
pairs
ρ∈p
complete
set
orthogonal
idempotents
ρ∈p
complete
set
orthogonal
idempotents
every
least
one
two
idempotents
non-zero
every
pair
strictly
monotone
maps
whose
images
cover
get
morphism
stack
functions
mapping
pair
complete
sets
orthogonal
idempotents
µ∈m
pair
deﬁned
ν∈n
xν7→ρ
xµ7→ρ
maps
injective
sums
either
zero
one
summand
morphisms
isomor-
phism
onto
locally
closed
substack
locus
vanishing
idempotent
closed
moreover
images
morphisms
disjoint
cover
cid:2
cid:3
cid:3
corollary
2.22.
k+ℓ
proof
=xp
=xp
cid:17
=xn
cid:16
=xn
step
line
line
uses
proposition
2.23
cid:3
combinatorial
lemma
let
non-negative
integer
p-tuple
non-negative
integers
deﬁne
ities
non-negative
integer
cid:2
|λ|
|λ|
=pρ
following
useful
combinatorial
property
cid:3
vanishes
unless
number
indexed
covers
subsets
cardinal-
proposition
2.23.
every
p-tuple
non-negative
integers
proof
let
formal
variables
prove
=xn
=xλ
xλ1
xλp
xλ1
xλp
proving
sides
equation
equal
one
hand
pyi=1
pyi=1
pyi=1xn
xλ1
...
xλ1
xλp
hand
n−j
cid:16
cid:17
pyi=1
pyi=1
cid:16
pyi=1
=xn
cid:17
=xn
pyi=1
pyi=1xℓ
=xn
=xn
xλ1
...
xλ1
=xn
cid:16
cid:17
=xn
=xλ
xλp
used
obvious
inclusion-exclusion
property
satisﬁed
covering
numbers
cid:3
order
ﬁltration
hall
algebra
let
linear
algebraic
stack
admitting
direct
sums
direct
sum-
mands
i.e.
assume
karoubian
remark
1.63
deﬁne
hall
product
need
additional
structure
linear
al-
gebraic
substack
stack
sequences
every
r-scheme
ﬁbre
deﬁnes
structure
exact
category
stack
comes
diagram
morphisms
linear
algebraic
stacks
a1×a2
projections
sequence
onto
objects
respectively
require
morphism
ﬁnite
type
morphism
representable
call
exact
linear
algebraic
stack
example
3.1.
linear
stacks
cohx
vect
repq
examples
1.11
1.12
1.13
satisfy
axioms
cohx
see
section
4.1
case
exact
structure
given
short
exact
sequences
note
categories
abelian
cokernel
ho-
momorphisms
ﬂat
sheaves
necessarily
ﬂat
throughout
following
discussion
exact
linear
algebraic
stack
let
universal
endomorphism
algebra
section
following
structures
module
structure
action
given
turns
-module
multiplication
commutative
multiplication
given
⊕−→
hall
product
hall
product
stack
functions
deﬁned
ﬁrst
constructing
ﬁbered
product
a1×a2
setting
b−→
multiplication
associative
commutative
hall
product
associative
unit
respect
multiplications
given
0-object
spec
0−→
refer
hall
algebra
3.1
filtered
structure
hall
algebra
deﬁnition
3.2.
deﬁne
ker
en+1
=mk≤n
ascending
ﬁltration
called
ﬁltration
order
vanishing
inertia
simply
order
ﬁltration
slight
abuse
language
space
obtained
extension
scalars
q−1
direct
sum
eigenspaces
whose
corresponding
eigenvalues
order
vanishing
less
equal
theorem
3.3.
suppose
ξ∗η
≤n+m
moreover
mod
n+m
prove
theorem
prove
following
lemma
lemma
3.4.
two
stack
functions
integer
cid:0
cid:1
xi+j=p
equation
mod
tp+1
proving
lemma
let
indicate
lemma
implies
theorem
suppose
degree
degree
degree
cid:0
cid:1
see
cid:0
cid:1
implies
≤k+ℓ
set
left
hand
side
degree
right
hand
side
degree
exactly
implies
sides
homogeneous
degree
corollary
2.7.
notice
rewrite
equation
hence
ek+ℓ
cid:0
cid:1
tk+ℓ
πk+ℓ
cid:0
cid:1
proves
theorem
analysis
suppose
stack
functions
stack
function
deﬁned
cartesian
diagram
explicitly
stack
triples
objects
respectively
object
i.e.
short
exact
sequence
objects
isomorphisms
images
respectively
omit
isomorphisms
triple
simplify
notation
stack
function
deﬁned
enlarged
diagram
represents
diagram
complete
set
non-zero
orthogonal
idempotents
complete
set
non-zero
orthogonal
idempotents
explicitly
stack
5-tuples
cid:0
cid:1
finally
stack
cid:0
∗em
cid:1
stack
objects
endowed
complete
set
non-zero
labelled
idempotents
explicitly
consists
6-tuples
cid:0
cid:1
ρ∈p
complete
set
non-zero
orthogonal
idempotent
endomorphisms
short
exact
sequence
moreover
ρ∈p
ν∈n
pn-tuple
orthogonal
idempo-
tents
ρ∈p
µ∈m
pm-tuple
orthogonal
idempotents
ν=1
gρ|m
µ=1
gρ|m
finally
require
every
=pp
ρ=1
=pp
ρ=1
decomposing
given
p-tuples
non-negative
integers
deﬁne
new
stack
function
denoted
follows
let
algebraic
stack
6-tuples
cid:0
cid:1
ρ=1
...
complete
set
non-
zero
orthogonal
idempotent
endomorphisms
short
exact
more-
every
require
eϕρ
fψρ
families
non-zero
orthogonal
idempotents
respectively
gρ|m
ϕρxω=1
gρ|m
ψρxη=1
follows
union
complete
set
orthogonal
idem-
potents
union
complete
set
orthogonal
idempotents
natural
algebroid
structure
morphism
given
mapping
6-tuple
middle
object
short
exact
sequence
makes
stack
function
note
integers
vanish
required
non-zero
let
write
|ϕ|
|ψ|
let
assume
every
least
one
two
integers
non-zero
morphism
e|ϕ|
e|ψ|
maps
quadruple
cid:0
cid:1
6-tuple
denoting
image
image
deﬁne
break
complete
family
orthogonal
idempotents
e|ϕ|
subfamilies
ρ-th
subfamily
members
similarly
break
f|ψ|
subfamilies
whose
sizes
family
idempotents
deﬁned
formulas
note
need
make
assumption
p-tuples
order
every
family
member
non-zero
lemma
3.5.
every
exactly
one
two
integers
non-zero
isomorphism
hence
equality
e|ϕ|
e|ψ|
stack
functions
proof
given
object
short
exact
sequence
split
direct
sum
short
exact
sequences
one
sequences
canonically
split
either
subobject
quotient
object
vanishes
assumption
therefore
sequence
split
canonically
cid:3
suppose
given
strictly
monotone
maps
֒−→
֒−→
images
cover
images
cover
choice
injections
determines
morphism
algebraic
stacks
mapping
6-tuple
6-tuple
deﬁning
cid:0
cid:1
xφρ
assumptions
sums
either
empty
consist
single
summand
obtained
essentially
relabelling
lemma
3.6.
morphism
gives
rise
morphism
stack
func-
note
requirements
needed
assure
non-zero
tions
cid:0
cid:1
open
closed
image
images
morphisms
cover
cid:0
cid:1
change
get
morphism
disjoint
proof
follows
fact
source
target
diﬀer
way
idempotents
indexed
cid:3
immersion
corollary
3.7.
using
notation
introduced
fol-
lowing
equation
cid:0
cid:1
=xϕ
ψxφ
=xϕ
run
p-tuples
non-negative
integers
example
consider
non-zero
empty
hence
epen
xϕ1
...
e|ϕ|
sum
p-tuples
positive
integers
proof
main
lemma
using
proposition
2.23
calculate
follows
cid:17
∗xm
cid:0
cid:1
cid:16
=xn
cid:17
cid:17
cid:16
=xϕ
cid:16
=xϕ
epπt
xϕ1
...
e|ϕ|
example
get
lowest
order
term
degree
since
vanish
need
every
least
one
non-zero
modulo
tp+1
terms
corresponding
pairs
property
every
exactly
one
non-zero
contribute
exactly
terms
lemma
3.5
applies
deduce
modulo
tp+1
cid:0
cid:1
≡xϕ
e|ϕ|
e|ψ|
sum
supports
form
partition
grouping
terms
corresponding
partitions
size
together
rewrite
e|ψ|
xi+j=p
xϕ1
...
equal
e|ϕ|
xψ1
...
eiπt
ejπt
xi+j=p
eiπi
ejπj
xi+j=p
modulo
tp+1
term
congruent
conclude
xi+j=p
cid:0
cid:1
xi+j=p
proves
lemma
3.4.
mod
tp+1
3.2
semi-classical
hall
algebra
theorem
3.3
submodule
=mn≥0
tnk
-subalgebra
respect
hall
product
algebra
one-parameter
ﬂat
family
algebras
special
ﬁbre
canonically
isomorphic
graded
algebra
associated
ﬁltered
algebra
cid:0
cid:1
quotient
map
/tk
identiﬁed
mappn
xntn
7→pn
graded
algebra
associated
ﬁltered
algebra
cid:0
cid:1
canonically
isomorphic
commutative
graded
algebra
cid:0
cid:1
theorem
3.3.
special
ﬁbre
inherits
therefore
poisson
bracket
encodes
hall
product
second
order
poisson
bracket
degree
given
formula
πk+ℓ−1
corollary
3.8.
graded
-algebra
cid:0
cid:1
endowed
poisson
bracket
degree
given
corollary
3.9.
particular
lie
algebra
respect
poisson
bracket
fact
x∗y−y∗x
case
poisson
bracket
equal
lie
bracket
thus
lie
algebra
ring
scalars
proof
equation
together
lemma
3.5
says
proves
implies
cid:3
cid:0
cid:1
deﬁnition
3.10.
call
lie
algebra
virtually
indecom-
posable
stack
functions
usually
write
vir
terminology
used
analogy
section
4.2
check
notion
virtually
indecomposable
agrees
ibid
special
case
3.3
epsilon
functions
prove
replacing
direct
sum
decompositions
ﬁltrations
formula
=xn≥k
give
rise
operator
mapping
particular
able
construct
virtually
indecomposable
stack
functions
hall
algebra
logarithms
fix
algebraic
substack
following
properties
avoids
image
spec
0−→
closed
direct
sums
direct
summands
i.e.
karoubian
remark
1.63
add
spec
0−→
iii
every
positive
integer
morphism
b|n
illus-
trated
diagram
a1×
...
×an
square
cartesian
ﬁnite
type
disjoint
union
morphisms
still
ﬁnite
type
means
morphism
ﬁnite
type
exists
image
b|n
intersect
image
example
3.11.
stack
coherent
sheaves
projective
curve
substack
non-zero
semi-stable
vector
bundles
ﬁxed
slope
example
substack
satisfying
conditions
gen-
erally
take
stack
vector
bundles
whose
harder-
narasimhan
slopes
contained
ﬁxed
interval
example
3.12.
stack
representations
quiver
take
consider
arbitrary
stack
function
denote
fnx
stack
fnx
ﬁts
cartesian
diagram
fnx
note
fnx
ﬁnite
type
assumption
also
repre-
sentable
algebroid
therefore
fnx
another
stack
function
objects
fnx
pairs
object
ﬂag
image
subquotients
fν/fν−1
consider
fnx
stack
triples
pair
object
fnx
complete
set
non-zero
orthogonal
idempotents
cid:0
cid:1
every
endomorphism
induced
respects
ﬂag
every
therefore
get
induced
idempotent
operator
eκ|fν
/fν−1
idempotents
properties
every
least
one
vanish
stack
fnx
decomposes
disjoint
union
substacks
according
idempotents
vanish
make
decomposition
precise
consider
sequence
positive
integers
deﬁne
fαx
stack
triples
cid:0
cid:1
object
image
complete
set
orthogonal
non-zero
idempotents
decomposes
direct
sum
moreover
ﬂag
length
subquotients
every
every
k-tuple
strictly
monotone
maps
deﬁne
morphism
deﬁning
ﬂag
terms
k-tuple
ﬂags
fαx
fnx
=mκ
xφκ
note
sum
ﬁxed
really
sum
largest
subobjects
making
ﬂag
fακ
lemma
3.13.
morphism
given
κ∈k
isomorphism
onto
locus
fnx
deﬁned
cid:3
corollary
3.14.
denotes
element
deﬁned
fnξ
=xα
sum
taken
k-tuples
positive
integers
set
equality
also
holds
deﬁnition
3.15.
deﬁne
every
=xn≥0
set
deﬁnition
justiﬁed
assumptions
sum
actually
ﬁnite
expanding
powers
deﬁnes
example
general
=xk≥0
=xn
=xn≥k
n+1
corollary
3.16.
every
hence
particular
virtually
indecomposable
proof
suﬃces
prove
cid:0
cid:1
mod
fact
cid:0
cid:1
=xn≥0
=xn≥0
xα1
...
ekfn
xα1
...
indeed
divisible
positive
cid:3
remark
3.17.
operator
respects
strict
alge-
broids
true
epsilons
logarithms
suppose
exists
abelian
group
decomposition
algebroid
linear
stack
disjoint
union
aγ∈γ
require
deﬁned
cartesian
diagram
a1×a2
composition
b−→
factors
mγ+β
call
grading
group
grading
group
decomposes
direct
sum
=mγ∈γ
submodule
generated
stack
functions
factor
hall
product
well
commutative
product
graded
respect
denote
projection
component
let
linear
algebraic
substack
avoiding
spec
0−→
properties
every
intersection
ﬁnite
type
closed
direct
summands
extensions
latter
meaning
deﬁned
composition
b−→
factors
iii
submonoid
implies
monoid
required
property
every
admits
ﬁnitely
many
decompositions
assume
property
intersection
coﬁnite
ideals
empty
axioms
hold
satisﬁes
ﬁniteness
conditions
deﬁned
remark
3.18.
stack
coherent
sheaves
projective
curve
take
deﬁne
stack
sheaves
rank
degree
suppose
stack
bundles
whose
harder-narasimhan
slopes
contained
interval
take
requirements
satisﬁed
remark
3.19.
stack
representations
quiver
take
zq0
set
vertices
set
equal
stack
representations
dimension
vector
take
take
zq0
let
also
deﬁne
=mγ∈s
coﬁnite
ideal
every
group
ideal
respect
multiplications
ring
may
complete
respect
collection
ideals
obtain
morphism
injective
multiplications
extend
sum
xγ∈γ+
converges
idempotent
operators
commute
γ-grading
every-
thing
deﬁned
terms
proposition
3.20.
=xn≥0
hence
write
exp∗
cid:0
log∗
cid:1
exponential
logarithm
deﬁned
power
series
using
hall
product
particular
log∗
log
proof
using
formula
result
follows
cid:3
b−→
times
remark
3.21.
compare
two
formulas
remark
3.22.
let
write
subspace
de-
ﬁned
requiring
coeﬃcient
contained
remark
3.23.
setting
also
get
exp∗
one
think
group-like
hopf
algebra
make
brief
remark
without
striving
generality
let
assume
simplicity
free
particular
implies
abbreviate
element
ﬁnite
sequence
non-zero
elements
write
particular
many
cases
interest
hall
algebra
elements
runs
ﬁnite
sequences
non-zero
elements
linearly
indepen-
dent
let
assume
case
q-span
q-subalgebra
free
generators
unitary
q-algebra
let
denote
algebra
let
assume
morphism
induced
commutative
product
injective
hold
many
cases
interest
deﬁne
comultiplication
making
cocom-
mutative
hopf
algebra
deﬁne
convenient
extend
notation
ﬁnite
sequences
elements
may
zero
done
setting
thus
unchanged
crossing
zeros
deﬁne
7−→
sum
pairs
sequences
length
allowing
zeros
deﬁnes
structure
cocommutative
hopf-algebra
lemma
3.24.
diagram
x7−→∆
−1⊗x−x⊗1
❚❚❚❚❚❚❚❚❚❚❚❚❚❚❚❚❚❚
comm
mult
commutative
augmentation
ideal
follows
virtual
indecomposables
equal
prim-
itives
respect
hopf
algebra
structure
prim
vir
cocommutative
hopf
algebra
isomorphic
universal
enveloping
algebra
prim
cartier-gabriel
theorem
theo-
rem
3.8.2
lie
algebra
vir
free
lie
algebra
elements
=xn
n+1
xγ=γ1+
...
+γn
...
remark
3.25.
suppose
vect
stack
vector
bundles
take
z≥0
indeed
linearly
independent
least
ground
ring
ﬁeld
moreover
injective
hopf
algebra
obtain
hopf
algebra
non-commutative
symmetric
functions
see
example
4.1
remark
3.26.
doubtful
possible
extend
coproduct
way
vir
prim
considerations
consider
family
operators
substitute
allows
prove
least
result
one
would
expect
cocommutative
hopf
algebra
particular
ﬁnd
unlikely
general
would
isomorphic
universal
enveloping
algebra
vir
integration
integral
stack
function
three
things
forgets
structure
map
forgets
algebroid
structure
mapping
introduces
bundle
relations
non-inert
morphisms
algebraic
stacks
vector
bundle
relations
let
grothendieck
-algebra
algebraic
stacks
ﬁnite
type
aﬃne
diagonal
modulo
scissor
bundle
relations
bundle
relation
equation
form
ﬁbre
bundle
algebraic
stacks
special
structure
group
ﬁbre
well-known
var
qn−1
n≥1
qn−1
n≥1
prefer
latter
expression
terms
var
note
connected
semi-simple
inertia
operator
pre-
serve
non-inert
bundle
relations
therefore
talk
regular
motivic
weights
deﬁnition
4.1.
call
element
regular
written
denominator
vanish
thus
subalgebra
regular
motivic
weights
reg
deﬁnition
image
morphism
var
-algebras
var
qn+
...
n≥1
var
qn−1
n≥1
image
contained
reg
hence
also
think
reg
-algebra
follows
following
lemma
lemma
4.2.
every
ﬁnite
type
stack
quasi-ﬁnite
stabilizer
regu-
lar
motivic
weight
proof
let
stack
quasi-ﬁnite
stabilizer
meaning
inertia
quasi-ﬁnite
stratifying
necessary
may
assume
inertia
stack
fact
ﬁnite
proposi-
tion
3.5.7
stratiﬁed
global
quotient
stacks
may
assume
glm
algebraic
space
glm
acts
ﬁnite
stabilizer
maximal
torus
glm
also
acts
ﬁnite
stabilizer
ﬂattening
stratiﬁcation
sta-
bilizer
stabt
-equivariant
acts
passing
open
closed
subspaces
may
assume
action
constant
stabilizer
see
5.4
acts
freely
quotient
ﬁnite
subgroup
conclude
glm
glm
yi/ti
glm
yi/ti
quotient
isomorphic
last
term
regular
yi/ti
algebraic
space
glm
m−1
myi=1
vanish
cid:3
integral
mapping
stack
function
class
gives
rise
well-deﬁned
homomorphism
-modules
denote
homomorphism
4.1
poles
theorem
theorem
4.3.
composition
factors
algebra
regular
motivic
weights
◦i◦
reg
proof
suﬃces
prove
regular
every
clear
algebroid
admitting
faithful
representation
suﬃce
proposition
1.66.
algebroid
exists
deligne-
mumford
stack
left
gln-action
together
strict
gln-
equivariant
algebra
subbundle
mn×n|y
stabgln
gln
gln
let
mn×n
diagonal
subalgebra
standard
maximal
torus
gln
gln
acts
mn×n|y
torus
stratify
stabilizer
respect
action
stratiﬁcation
canonical
need
stabt
units
ﬁnite
type
algebra
fact
algebra
dn|b
given
intersection
dn|b
b|b
inside
mn×n|b
b|b
centralizer
tautological
section
b|b
identiﬁcation
b|b
stack
commuting
pairs
thus
section
dn|b
indeed
equality
stabt
relative
group
schemes
mn×n|y
stabt
stabgln
zb×
subalgebras
one-to-one
correspondence
par-
titions
set
partition
corresponds
subalgebra
whose
primitive
idempo-
let
write
tents
eiρ
=pi∈iρ
torus
units
unique
stratiﬁcation
section
factors
pull-
back
dn|b
via
equal
existence
stratiﬁca-
tion
proved
passing
rank
stratiﬁcation
see
deﬁnition
1.23
observing
subalgebra
bundle
dn|s
stack
de-
composes
disjoint
union
open
closed
substacks
constant
components
may
reformulate
deﬁning
prop-
erty
saying
also
stabt
stratiﬁcation
-equivariant
tdn
tdi
commutative
let
remark
able
prove
general
action
deligne-mumford
stack
stabilizer
stratiﬁes
equivariantly
fact
stabilizer
equal
units
algebra
helps
note
also
prove
deﬁning
property
terms
stabilizers
every
partition
torus
acts
stabilizer
therefore
get
induced
action
/ti
matrix
conjugation
preserves
units
get
induced
action
/ti
fact
action
even
respects
modiﬁcation
following
consider
action
left
multiplication
well-deﬁned
action
implies
particular
product
exists
moreover
action
preserves
ﬁelds
also
preserves
sections
semi-simple
product
two
semi-simple
commuting
matrices
semi-simple
matrix
note
imply
acts
bss
even
strict
section
product
may
strict
ﬁnally
consider
action
/ti
deﬁned
quotient
stack
ﬁnite
type
scheme
zariski
topological
space
|zi
zariski
space
see
chap-
ter
chevalley
theorem
see
ibid
image
|b×
|zi
constructible
ﬁnd
disjoint
locally
closed
reduced
algebraic
substacks
image
equal
|z1|
|zn|
|zi
let
ezi
ﬁnite
type
algebraic
stack
endowed
representable
monomor-
phism
ezi
claim
ezi
algebraic
stack
quasi-ﬁnite
stabilizer
follow
fact
ﬁeld
valued
points
action
ﬁnite
stabilizers
see
assume
/ti
conjugation
preserves
ﬁber
implies
hence
commutes
rewriting
t′−1b
see
com-
mutes
changing
basis
necessary
diagonalize
three
matrices
simultaneously
since
eigen-
values
see
entries
diagonal
matrix
obtained
permutation
hence
possible
values
hence
tb−1
every
one
possible
values
one
/ti
t′−1b
thus
action
ﬁnite
stabilizers
least
ﬁeld
valued
points
required
consider
cartesian
diagram
eb×
ezi
eb×
obtained
pulling
back
disjoint
unions
isomorphisms
onto
locally
closed
substacks
via
ezi
morphisms
true
surjective
underlying
zariski
topological
spaces
scissor
relations
morphism
principal
-bundle
true
eb×
bundle
relations
eb×
ezi
ezi
follows
eb×
gln
\b×
gln
gln
n−1yi=1
n−1
gln
claim
follows
lemma
4.2
cid:3
ezi
ezi
corollary
4.4.
multiple
q−1
integral
takes
regular
values
every
1xi
q−1
reg
proof
consider
following
diagram
q−1
+❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲❲
reg
l|λ|=k
q−1
l|λ|=k
eqλ
◦iss
var
q−1
dotted
arrow
exists
square
lower
right
dia-
gram
cartesian
outer
part
diagram
commutes
identiﬁed
localization
var
q−1
image
cid:3
corollary
4.5.
deﬁning
extends
integral
var
linear
homomorphism
reg
4.2
integral
vs.
hall
product
γ-indexed
integral
let
grading
group
section
3.3.
assume
addition
endowed
z-valued
bilinear
form
deﬁnition
4.6.
call
hereditary
every
mor-
phism
vector
bundle
stack
deﬁnition
1.9
rank
let
assume
henceforth
hereditary
deﬁne
free
-module
symbols
introduce
associative
product
formula
q−χ
uγ+β
extend
linearly
make
-algebra
regular
coeﬃ-
cients
form
subalgebra
reg
deﬁne
γ-indexed
integral
reg
uγz
7−→xγ∈γ
xγ∈γ
proposition
4.7.
hereditary
γ-indexed
integral
preserves
star
product
fact
reg
proof
straightforward
calculation
one
uses
fact
morphism
vector
bundle
stack
rank
hence
q−χ
cid:3
semi-classical
limit
morphism
poisson
algebras
reg
setting
source
hence
pass
semi-classical
limit
integral
target
respects
∗-product
semi-classical
limit
modulo
q−1
star
product
reg
commutative
fact
modulo
given
commutative
product
uγ+β
hence
quotient
reg
inherits
poisson
bracket
deﬁned
mod
explicitly
given
−eχ
uγ+β
twice
anti-symmetrization
conclude
theorem
4.8.
hereditary
morphism
poisson
alge-
bras
reg/
poisson
structure
described
section
3.2
one
reg/
see
coeﬃcient
integral
zq=1
rq=1
may
expressed
zq=1
cid:16
πq−1
cid:17
cid:12
cid:12
cid:12
q=1
∞xn=0
cid:12
cid:12
cid:12
q=1
used
operator
deﬁnition
2.10
substituted
proof
homomorphism
obtained
setting
note
deformation
parameter
mapped
deformation
parameter
poisson
bracket
depends
choice
deformation
parameter
preserved
calculaterq=1
note
section
quotient
map
obtained
setting
gives
rise
displayed
formula
cid:3
remark
4.9.
note
diagram
invert
7−→
rq=1
reg
7−→
var
reg/
commutes
central
column
morphism
one-parameter
families
non-commutative
algebras
left
hand
column
general
ﬁbre
morphism
non-commutative
var
-algebras
right
hand
column
semi-classical
limit
hence
morphism
poisson
algebras
restricting
theorem
virtually
indecomposable
elements
obtain
corollary
4.10.
semi-classical
limit
integral
deﬁnes
mor-
phism
lie
algebras
var
zq=1
vir
reg/
bracket
vir
commutator
bracket
hall
product
bracket
var
reg/
given
integral
rq=1
given
formula
zq=1
=xγ∈γ
cid:16
cid:17
cid:12
cid:12
cid:12
q=1
virtually
indecomposable
hall
algebra
element
vir
remark
4.11.
surjective
morphism
var
-algebras
var
∼−→
reg/
morphism
likely
injective
obvious
reason
elements
ann
var
map
zero
var
although
certainly
map
zero
reg/
without
much
eﬀort
possible
prove
semi-
classical
limit
integral
lifts
var
-linear
homomorphism
zq=1
var
unfortunately
moment
prove
lift
mor-
phism
poisson
algebras
remark
4.12.
leave
interested
reader
write
analogue
theorem
4.8
case
calabi-yau-3
rather
hereditary
include
proving
main
theorems
equivariant
version
including
vanishing
cycle
orientation
data
weights
integral
appendix
comparison
joyce
vir-
tual
projections
example
let
write
gln
vect
vect
remark
3.21
xℓ1+
...
+ℓr
...
gives
=xr
=xr
=xλ⊢n
cid:16
xn≥0
...
|λ|
xℓ1+
...
+ℓr
aut
cid:17
cid:16
xn≥0
cid:17
remark
also
formula
remark
2.11
gives
contains
formulas
§5.2
joyce
deﬁnes
projection
operators
πvi
pairwise
commute
add
identity
although
works
bare
algebraic
stacks
algebroids
expect
modulo
diﬀerence
πvi
prove
operators
take
values
elements
vect
proposition
.13.
πvi
proof
let
n-dimensional
torus
diagonal
matrices
inside
gln
joyce
set
deﬁnition
5.3
trivial
case
quotient
stack
bgln
gln
point
set
gln
computed
example
5.7
set
tori
diag
ranges
surjection
maps
finally
set
coin-
cides
joyce
deﬁnition
needs
computation
selected
respectively
case
gln
cid:12
cid:12
cid:12
cid:12
ngln
cgln
ngln
cid:12
cid:12
cid:12
cid:12
ngln
choices
gln
unwind
deﬁnition
ngln
xb⊆
ˆq∈q
ˆq⊆q
q∈b
ˆq∈b
ˆq=r
|b|−1
ﬁnally
deﬁne
virtual
projections
bgln
πvi
bgln
dim
r=k
r⊆q
gln
bcg
say
gln
type
corresponding
surjection
induces
partition
note
···σn
···
also
cgln
depends
type
i=1
gli
normalizer
isomorphic
toqn
therefore
cgln
ngln
nyi=1
cid:12
cid:12
cid:12
cid:12
ngln
cgln
ngln
cid:12
cid:12
cid:12
cid:12
πvi
bgln
dim
r=k
r⊆q
gln
bcg
=xq
cid:12
cid:12
cid:12
cid:12
=xσ
=xσ
ngln
cgln
ngln
cid:12
cid:12
cid:12
cid:12
nyi=1
|σ|
type
−1
xr⊆q
dim
r=k
ngln

bcg
nyi=1
bgli
|σ|
bgli
third
line
follow
lemma
conclude
joyce
virtual
projections
bgln
identical
eigenprojections
cid:3
lemma
.14.
type
dim
r=k
|σ|
proof
let
dim
|σ|
proof
obviously
|σ|
possible
choice
therefore
proving
\ˆq∈b
dim
r=k
|σ|
|σ|
case
|σ|
choice
choice
set
proves
dim
r=k
|σ|
|σ|
values
|σ|
deﬁned
recursively
suﬃces
show
thatpr
dim
r=k
satisﬁes
recursive
relation
choice
xb⊆
ˆq∈q
ˆq⊆q
q∈b
ˆq∈b
ˆq=r
|b|−1
computed
also
form
choosing
codimension
inside
every
codimension
number
intermediate
subtori
positive
therefore
containing
included
possible
choices
cancelling
size
parities
let
write
points
m-tuples
let
dimensional
torus
consisting
points
xm−1
dim
given
set
deﬁning
equations
xi1
xiki
deﬁning
equation
dim
either
appear
case
r|w
dimensional
second
case
appears
deﬁning
equation
case
r|w
dimensional
choice
consisting
codimension
elements
satisfying
ˆq∈b
loses
one
elements
restriction
r|w
shows
xb⊆
ˆq∈q
ˆq⊆q
q∈b
dim
ˆq∈b
ˆq=k
|b|−1
|b|−1
xb⊆
ˆq∈q
ˆq⊆w
dim
ˆq∈b
ˆq=k−1
xb⊆
ˆq∈q
ˆq⊆w
dim
ˆq∈b
ˆq=k
|b|−1
completes
proof
cid:3
references
abramovich
olsson
vistoli
tame
stacks
positive
characteristic
ann
inst
fourier
grenoble
:1057–1091
2008
artin
bertin
demazure
grothendieck
gabriel
raynaud
j.-p.
serre
sch´emas
groupes
sga3
institut
des
hautes
´etudes
scientiﬁques
paris
1963/1966
artin
grothendieck
verdier
th´eorie
des
topos
cohomologie
etale
des
sch´emas
sga4
lecture
notes
mathe-
matics
nos
269
270
305.
springer
berlin
heidelberg
new
york
1972
behrend
fantechi
intrinsic
normal
cone
invent
math.
128
:45–88
1997
bridgeland
introduction
motivic
hall
algebras
adv
math.
229
:102–138
2012
cartier
primer
hopf
algebras
frontiers
number
theory
physics
geometry
pages
537–615
springer
berlin
2007
agnolo
polesello
deformation
quantization
complex
involutive
submanifolds
noncommutative
geometry
physics
pages
127–137
world
sci
publ.
hackensack
2005
grothendieck
revˆetements
etales
groupe
fondamental
sga1
volume
224
lecture
notes
mathematics
springer-verlag
1971
grothendieck
dieudonn´e
´el´ements
g´eom´etrie
alg´ebrique
ega
number
publications
math´ematiques
institut
des
hautes
´etudes
scientiﬁques
1960-1967
joyce
conﬁgurations
abelian
categories
ringel-hall
alge-
bras
adv
math.
210
:635–706
2007
joyce
motivic
invariants
artin
stacks
stack
functions
math.
:345–392
2007
joyce
song
theory
generalized
donaldson-thomas
invariants
mem
amer
math
soc.
217
1020
iv+199
2012
kontsevich
deformation
quantization
algebraic
varieties
lett
math
phys.
:271–294
2001.
euroconf´erence
mosh´e
flato
2000
part
iii
dijon
kresch
cycle
groups
artin
stacks
invent
math.
138
:495–
536
1999
laumon
moret-bailly
champs
alg´ebriques
volume
ergebnisse
der
mathematik
und
ihrer
grenzgebiete
folge
springer-verlag
berlin
2000
noohi
fundamental
groups
algebraic
stacks
inst
math
jussieu
:69–103
2004
oesterl´e
sch´emas
groupes
type
multiplicatif
autour
des
sch´emas
groupes
vol
volume
42/43
panor
synth
eses
pages
63–91
soc
math
france
paris
2014
stacks
project
http
stacks
math
columbia
edu
2015.
last
time
retrieved
december
2016.
authors
project
stacks
